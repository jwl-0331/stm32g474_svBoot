
stm32g474_svBoot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000024  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       0000021c  080062b8  080062b8  000162b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080064d4  080064d4  000202d4  2**0
                  CONTENTS
  5 .ARM          00000008  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080064dc  080064dc  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000214  20000000  080064e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RAMVectorTable 000000c0  20000214  080066f8  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001e60  200002d4  080067b8  000202d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20002134  080067b8  00022134  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002447b  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006d28  00000000  00000000  000447c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000c76f  00000000  00000000  0004b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000014d8  00000000  00000000  00057c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000016dd  00000000  00000000  00059138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002a990  00000000  00000000  0005a815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000273a2  00000000  00000000  000851a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f74dd  00000000  00000000  000ac547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00003b60  00000000  00000000  001a3a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004f  00000000  00000000  001a7584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800627c 	.word	0x0800627c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	0800627c 	.word	0x0800627c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <AppMain>:
#include "Reset.h"
#include "RTC.h"
#include "Flash.h"

void AppMain(void)
{
 80005bc:	b510      	push	{r4, lr}
  Reset_Init();
 80005be:	f000 faed 	bl	8000b9c <Reset_Init>
  UART_Init(_DEF_UART1, 115200);
 80005c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fb46 	bl	8000c58 <UART_Init>
  uint32_t pre_time = HAL_GetTick();
 80005cc:	f000 fc06 	bl	8000ddc <HAL_GetTick>
 80005d0:	4604      	mov	r4, r0
  while(1)
  {
    if(HAL_GetTick() - pre_time >= 300)
 80005d2:	f000 fc03 	bl	8000ddc <HAL_GetTick>
 80005d6:	1b00      	subs	r0, r0, r4
 80005d8:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80005dc:	d307      	bcc.n	80005ee <AppMain+0x32>
    {
      pre_time = HAL_GetTick();
 80005de:	f000 fbfd 	bl	8000ddc <HAL_GetTick>
      HAL_GPIO_TogglePin(PA5_LD2_LED_GPIO_Port, PA5_LD2_LED_Pin);
 80005e2:	2120      	movs	r1, #32
      pre_time = HAL_GetTick();
 80005e4:	4604      	mov	r4, r0
      HAL_GPIO_TogglePin(PA5_LD2_LED_GPIO_Port, PA5_LD2_LED_Pin);
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 ff46 	bl	800147a <HAL_GPIO_TogglePin>
    }
    if(Reset_GetCount() == 2)
 80005ee:	f000 fafd 	bl	8000bec <Reset_GetCount>
 80005f2:	2802      	cmp	r0, #2
 80005f4:	d1ed      	bne.n	80005d2 <AppMain+0x16>
    {
      Reset_ToBoot(500);
 80005f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fa:	f000 fafd 	bl	8000bf8 <Reset_ToBoot>
 80005fe:	e7e8      	b.n	80005d2 <AppMain+0x16>

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b510      	push	{r4, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000604:	2238      	movs	r2, #56	; 0x38
 8000606:	2100      	movs	r1, #0
 8000608:	a806      	add	r0, sp, #24
 800060a:	f005 fa5f 	bl	8005acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	2214      	movs	r2, #20
 8000610:	2100      	movs	r1, #0
 8000612:	a801      	add	r0, sp, #4
 8000614:	f005 fa5a 	bl	8005acc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061c:	f001 fdd0 	bl	80021c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8000620:	232a      	movs	r3, #42	; 0x2a
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	f44f 7080 	mov.w	r0, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8000626:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800062e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000632:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000636:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000638:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000640:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000642:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f001 fe77 	bl	800233c <HAL_RCC_OscConfig>
 800064e:	b108      	cbz	r0, 8000654 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000652:	e7fe      	b.n	8000652 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	220f      	movs	r2, #15
 800065a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065e:	4621      	mov	r1, r4
 8000660:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000666:	f002 f8ab 	bl	80027c0 <HAL_RCC_ClockConfig>
 800066a:	b108      	cbz	r0, 8000670 <SystemClock_Config+0x70>
 800066c:	b672      	cpsid	i
  while (1)
 800066e:	e7fe      	b.n	800066e <SystemClock_Config+0x6e>
}
 8000670:	b014      	add	sp, #80	; 0x50
 8000672:	bd10      	pop	{r4, pc}

08000674 <main>:
{
 8000674:	b510      	push	{r4, lr}
  g_RCC_CSR = RCC->CSR;         // Get Boot Reason
 8000676:	4c3a      	ldr	r4, [pc, #232]	; (8000760 <main+0xec>)
 8000678:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <main+0xf0>)
 800067a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
    VectorTable[i] = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 800067e:	493a      	ldr	r1, [pc, #232]	; (8000768 <main+0xf4>)
  g_RCC_CSR = RCC->CSR;         // Get Boot Reason
 8000680:	601a      	str	r2, [r3, #0]
{
 8000682:	b08a      	sub	sp, #40	; 0x28
  for(int i = 0; i < 48; i++)
 8000684:	2300      	movs	r3, #0
    VectorTable[i] = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 8000686:	009a      	lsls	r2, r3, #2
 8000688:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 800068c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 48; i++)
 8000696:	3301      	adds	r3, #1
 8000698:	2b30      	cmp	r3, #48	; 0x30
 800069a:	d1f4      	bne.n	8000686 <main+0x12>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6623      	str	r3, [r4, #96]	; 0x60
 80006a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b01      	ldr	r3, [sp, #4]
  HAL_Init();
 80006ae:	f000 fb79 	bl	8000da4 <HAL_Init>
  SystemClock_Config();
 80006b2:	f7ff ffa5 	bl	8000600 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	2214      	movs	r2, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	eb0d 0002 	add.w	r0, sp, r2
 80006be:	f005 fa05 	bl	8005acc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80006ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	9302      	str	r3, [sp, #8]
 80006d2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006d6:	f043 0320 	orr.w	r3, r3, #32
 80006da:	64e3      	str	r3, [r4, #76]	; 0x4c
 80006dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	9303      	str	r3, [sp, #12]
 80006e4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 80006ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006f0:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(PA5_LD2_LED_GPIO_Port, PA5_LD2_LED_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(PA5_LD2_LED_GPIO_Port, PA5_LD2_LED_Pin, GPIO_PIN_RESET);
 80006f8:	2120      	movs	r1, #32
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(PA5_LD2_LED_GPIO_Port, PA5_LD2_LED_Pin, GPIO_PIN_RESET);
 8000702:	f000 feb5 	bl	8001470 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(PC13_B1_SW_GPIO_Port, &GPIO_InitStruct);
 800070a:	4818      	ldr	r0, [pc, #96]	; (800076c <main+0xf8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PC13_B1_SW_GPIO_Port, &GPIO_InitStruct);
 800070e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(PC13_B1_SW_GPIO_Port, &GPIO_InitStruct);
 8000714:	f000 fde0 	bl	80012d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	2220      	movs	r2, #32
  HAL_GPIO_Init(PA5_LD2_LED_GPIO_Port, &GPIO_InitStruct);
 800071c:	a905      	add	r1, sp, #20
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(PA5_LD2_LED_GPIO_Port, &GPIO_InitStruct);
 800072a:	f000 fdd5 	bl	80012d8 <HAL_GPIO_Init>
  MX_USB_Device_Init();
 800072e:	f004 fee5 	bl	80054fc <MX_USB_Device_Init>
  hrtc.Instance = RTC;
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <main+0xfc>)
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <main+0x100>)
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000736:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000738:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 800073c:	217f      	movs	r1, #127	; 0x7f
 800073e:	23ff      	movs	r3, #255	; 0xff
 8000740:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000748:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800074c:	e9c0 3407 	strd	r3, r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000750:	f002 fb22 	bl	8002d98 <HAL_RTC_Init>
 8000754:	b108      	cbz	r0, 800075a <main+0xe6>
 8000756:	b672      	cpsid	i
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0xe4>
  AppMain();
 800075a:	f7ff ff2f 	bl	80005bc <AppMain>
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0xea>
 8000760:	40021000 	.word	0x40021000
 8000764:	200002f0 	.word	0x200002f0
 8000768:	20000214 	.word	0x20000214
 800076c:	48000800 	.word	0x48000800
 8000770:	200002f4 	.word	0x200002f4
 8000774:	40002800 	.word	0x40002800

08000778 <Error_Handler>:
 8000778:	b672      	cpsid	i
  while (1)
 800077a:	e7fe      	b.n	800077a <Error_Handler+0x2>

0800077c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_MspInit+0x30>)
 800077e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000780:	f042 0201 	orr.w	r2, r2, #1
 8000784:	661a      	str	r2, [r3, #96]	; 0x60
 8000786:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000788:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	f002 0201 	and.w	r2, r2, #1
 800078e:	9200      	str	r2, [sp, #0]
 8000790:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000798:	659a      	str	r2, [r3, #88]	; 0x58
 800079a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a4:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80007a6:	f001 bd65 	b.w	8002274 <HAL_PWREx_DisableUCPDDeadBattery>
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007b0:	b510      	push	{r4, lr}
 80007b2:	4604      	mov	r4, r0
 80007b4:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b6:	2254      	movs	r2, #84	; 0x54
 80007b8:	2100      	movs	r1, #0
 80007ba:	a801      	add	r0, sp, #4
 80007bc:	f005 f986 	bl	8005acc <memset>
  if(hrtc->Instance==RTC)
 80007c0:	6822      	ldr	r2, [r4, #0]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_RTC_MspInit+0x54>)
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d11b      	bne.n	8000800 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007cc:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ce:	a801      	add	r0, sp, #4
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d4:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d6:	f002 f90b 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	b108      	cbz	r0, 80007e0 <HAL_RTC_MspInit+0x30>
    {
      Error_Handler();
 80007dc:	f7ff ffcc 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_RTC_MspInit+0x58>)
 80007e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007f4:	659a      	str	r2, [r3, #88]	; 0x58
 80007f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000800:	b016      	add	sp, #88	; 0x58
 8000802:	bd10      	pop	{r4, pc}
 8000804:	40002800 	.word	0x40002800
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b510      	push	{r4, lr}
 800080e:	b09c      	sub	sp, #112	; 0x70
 8000810:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	2214      	movs	r2, #20
 8000814:	2100      	movs	r1, #0
 8000816:	a802      	add	r0, sp, #8
 8000818:	f005 f958 	bl	8005acc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	2254      	movs	r2, #84	; 0x54
 800081e:	2100      	movs	r1, #0
 8000820:	a807      	add	r0, sp, #28
 8000822:	f005 f953 	bl	8005acc <memset>
  if(huart->Instance==USART1)
 8000826:	6822      	ldr	r2, [r4, #0]
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <HAL_UART_MspInit+0x8c>)
 800082a:	429a      	cmp	r2, r3
 800082c:	d131      	bne.n	8000892 <HAL_UART_MspInit+0x86>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800082e:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000832:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f002 f8dc 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 8000838:	b108      	cbz	r0, 800083e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800083a:	f7ff ff9d 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_UART_MspInit+0x90>)
 8000840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000846:	661a      	str	r2, [r3, #96]	; 0x60
 8000848:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800084a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800084e:	9200      	str	r2, [sp, #0]
 8000850:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000854:	f042 0201 	orr.w	r2, r2, #1
 8000858:	64da      	str	r2, [r3, #76]	; 0x4c
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	9301      	str	r3, [sp, #4]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PA9_UART1_TX_Pin|PA10_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000870:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	a902      	add	r1, sp, #8
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000878:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f000 fd2b 	bl	80012d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000882:	2025      	movs	r0, #37	; 0x25
 8000884:	4622      	mov	r2, r4
 8000886:	4621      	mov	r1, r4
 8000888:	f000 fad4 	bl	8000e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800088c:	2025      	movs	r0, #37	; 0x25
 800088e:	f000 fb03 	bl	8000e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000892:	b01c      	add	sp, #112	; 0x70
 8000894:	bd10      	pop	{r4, pc}
 8000896:	bf00      	nop
 8000898:	40013800 	.word	0x40013800
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler>

080008a2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler>

080008a4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler>

080008a6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler>

080008a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler>

080008aa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 ba88 	b.w	8000dc4 <HAL_IncTick>

080008b4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008b4:	4801      	ldr	r0, [pc, #4]	; (80008bc <USB_LP_IRQHandler+0x8>)
 80008b6:	f000 be65 	b.w	8001584 <HAL_PCD_IRQHandler>
 80008ba:	bf00      	nop
 80008bc:	20001af0 	.word	0x20001af0

080008c0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008c0:	4801      	ldr	r0, [pc, #4]	; (80008c8 <USART1_IRQHandler+0x8>)
 80008c2:	f002 bafd 	b.w	8002ec0 <HAL_UART_IRQHandler>
 80008c6:	bf00      	nop
 80008c8:	20000354 	.word	0x20000354

080008cc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <_sbrk+0x30>)
 80008ce:	6811      	ldr	r1, [r2, #0]
{
 80008d0:	b510      	push	{r4, lr}
 80008d2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80008d4:	b909      	cbnz	r1, 80008da <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80008d6:	490a      	ldr	r1, [pc, #40]	; (8000900 <_sbrk+0x34>)
 80008d8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	6810      	ldr	r0, [r2, #0]
 80008dc:	4909      	ldr	r1, [pc, #36]	; (8000904 <_sbrk+0x38>)
 80008de:	4c0a      	ldr	r4, [pc, #40]	; (8000908 <_sbrk+0x3c>)
 80008e0:	4403      	add	r3, r0
 80008e2:	1b09      	subs	r1, r1, r4
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d906      	bls.n	80008f6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80008e8:	f005 f908 	bl	8005afc <__errno>
 80008ec:	230c      	movs	r3, #12
 80008ee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80008f4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80008f6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80008f8:	e7fc      	b.n	80008f4 <_sbrk+0x28>
 80008fa:	bf00      	nop
 80008fc:	2000031c 	.word	0x2000031c
 8000900:	20002138 	.word	0x20002138
 8000904:	20004000 	.word	0x20004000
 8000908:	00000400 	.word	0x00000400

0800090c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <SystemInit+0x10>)
 800090e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000912:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000916:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000922:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000924:	f7ff fff2 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f005 f8db 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000952:	f7ff fe8f 	bl	8000674 <main>

08000956 <LoopForever>:

LoopForever:
    b LoopForever
 8000956:	e7fe      	b.n	8000956 <LoopForever>
  ldr   r0, =_estack
 8000958:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8000964:	080064e4 	.word	0x080064e4
  ldr r2, =_sbss
 8000968:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 800096c:	20002134 	.word	0x20002134

08000970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_2_IRQHandler>
	...

08000974 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	b087      	sub	sp, #28
 8000978:	4606      	mov	r6, r0
 800097a:	460c      	mov	r4, r1
  BOOL ret = FALSE;

  int32_t start_sector = -1;
  int32_t end_sector = -1;

  HAL_FLASH_Unlock();
 800097c:	f000 fb34 	bl	8000fe8 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <Flash_Erase+0x98>)
 8000982:	4f23      	ldr	r7, [pc, #140]	; (8000a10 <Flash_Erase+0x9c>)
 8000984:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000988:	611a      	str	r2, [r3, #16]

  start_sector = -1;
  end_sector = -1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
  flash_start  = addr;
  flash_end    = addr + length - 1;
 800098e:	18e1      	adds	r1, r4, r3
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000990:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8000994:	2200      	movs	r2, #0
  start_sector = -1;
 8000996:	4618      	mov	r0, r3
  flash_end    = addr + length - 1;
 8000998:	4431      	add	r1, r6


  if (sector_start >= flash_start && sector_start <= flash_end)
 800099a:	42ae      	cmp	r6, r5
 800099c:	d833      	bhi.n	8000a06 <Flash_Erase+0x92>
 800099e:	42a9      	cmp	r1, r5
 80009a0:	bf34      	ite	cc
 80009a2:	2400      	movcc	r4, #0
 80009a4:	2401      	movcs	r4, #1
  {
    ret = TRUE;
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80009a6:	42be      	cmp	r6, r7
 80009a8:	d804      	bhi.n	80009b4 <Flash_Erase+0x40>
  {
    ret = TRUE;
 80009aa:	42b9      	cmp	r1, r7
 80009ac:	bf28      	it	cs
 80009ae:	2401      	movcs	r4, #1
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80009b0:	42ae      	cmp	r6, r5
 80009b2:	d205      	bcs.n	80009c0 <Flash_Erase+0x4c>
  {
    ret = TRUE;
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80009b4:	42a9      	cmp	r1, r5
 80009b6:	d301      	bcc.n	80009bc <Flash_Erase+0x48>
 80009b8:	42b9      	cmp	r1, r7
 80009ba:	d901      	bls.n	80009c0 <Flash_Erase+0x4c>
    if(Flash_InSector(i, addr, length) == TRUE)
 80009bc:	2c01      	cmp	r4, #1
 80009be:	d104      	bne.n	80009ca <Flash_Erase+0x56>
      if(start_sector < 0)
 80009c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80009c4:	4613      	mov	r3, r2
 80009c6:	bf08      	it	eq
 80009c8:	4610      	moveq	r0, r2
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 80009ca:	3201      	adds	r2, #1
 80009cc:	2a40      	cmp	r2, #64	; 0x40
 80009ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80009d2:	f507 6700 	add.w	r7, r7, #2048	; 0x800
 80009d6:	d1e0      	bne.n	800099a <Flash_Erase+0x26>
  if(start_sector >= 0)
 80009d8:	1c42      	adds	r2, r0, #1
 80009da:	f04f 0400 	mov.w	r4, #0
 80009de:	d00d      	beq.n	80009fc <Flash_Erase+0x88>
    EraseInit.Banks = FLASH_BANK_BOTH;
 80009e0:	2203      	movs	r2, #3
    EraseInit.NbPages = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 80009e2:	1a1b      	subs	r3, r3, r0
    EraseInit.Page = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 80009e4:	e9cd 2003 	strd	r2, r0, [sp, #12]
    EraseInit.NbPages = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 80009e8:	3301      	adds	r3, #1
    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80009ea:	a901      	add	r1, sp, #4
 80009ec:	a802      	add	r0, sp, #8
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80009ee:	9402      	str	r4, [sp, #8]
    EraseInit.NbPages = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 80009f0:	9305      	str	r3, [sp, #20]
    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80009f2:	f000 fc01 	bl	80011f8 <HAL_FLASHEx_Erase>
    if(status == HAL_OK)
 80009f6:	fab0 f480 	clz	r4, r0
 80009fa:	0964      	lsrs	r4, r4, #5
  HAL_FLASH_Lock();
 80009fc:	f000 fb06 	bl	800100c <HAL_FLASH_Lock>
}
 8000a00:	4620      	mov	r0, r4
 8000a02:	b007      	add	sp, #28
 8000a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BOOL ret = FALSE;
 8000a06:	2400      	movs	r4, #0
 8000a08:	e7cd      	b.n	80009a6 <Flash_Erase+0x32>
 8000a0a:	bf00      	nop
 8000a0c:	40022000 	.word	0x40022000
 8000a10:	080007ff 	.word	0x080007ff

08000a14 <Flash_Write>:
{
 8000a14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(addr%FLASH_WRITE_SIZE != 0) //16bit %2 , double-word (64-bit) %8
 8000a18:	f010 0607 	ands.w	r6, r0, #7
{
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	460f      	mov	r7, r1
 8000a20:	4690      	mov	r8, r2
  if(addr%FLASH_WRITE_SIZE != 0) //16bit %2 , double-word (64-bit) %8
 8000a22:	d11a      	bne.n	8000a5a <Flash_Write+0x46>
  HAL_FLASH_Unlock();
 8000a24:	f000 fae0 	bl	8000fe8 <HAL_FLASH_Unlock>
  for(int i = 0; i < length; i+=FLASH_WRITE_SIZE) // 64bit-8 , 16bit-2
 8000a28:	4634      	mov	r4, r6
 8000a2a:	4544      	cmp	r4, r8
 8000a2c:	d306      	bcc.n	8000a3c <Flash_Write+0x28>
  BOOL ret = TRUE;
 8000a2e:	2601      	movs	r6, #1
  HAL_FLASH_Lock();
 8000a30:	f000 faec 	bl	800100c <HAL_FLASH_Lock>
}
 8000a34:	4630      	mov	r0, r6
 8000a36:	b002      	add	sp, #8
 8000a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(&data, &p_data[i], FLASH_WRITE_SIZE);
 8000a3c:	193a      	adds	r2, r7, r4
 8000a3e:	5938      	ldr	r0, [r7, r4]
 8000a40:	6851      	ldr	r1, [r2, #4]
 8000a42:	466b      	mov	r3, sp
 8000a44:	c303      	stmia	r3!, {r0, r1}
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr + i, data);
 8000a46:	1961      	adds	r1, r4, r5
 8000a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fb11 	bl	8001074 <HAL_FLASH_Program>
    if(status != HAL_OK)
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d1ec      	bne.n	8000a30 <Flash_Write+0x1c>
  for(int i = 0; i < length; i+=FLASH_WRITE_SIZE) // 64bit-8 , 16bit-2
 8000a56:	3408      	adds	r4, #8
 8000a58:	e7e7      	b.n	8000a2a <Flash_Write+0x16>
    return FALSE;
 8000a5a:	2600      	movs	r6, #0
 8000a5c:	e7ea      	b.n	8000a34 <Flash_Write+0x20>

08000a5e <Flash_Read>:
{
 8000a5e:	b510      	push	{r4, lr}
  for(int i=0; i < length; i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <Flash_Read+0xc>
}
 8000a66:	2001      	movs	r0, #1
 8000a68:	bd10      	pop	{r4, pc}
    p_data[i] = p_byte[i];
 8000a6a:	5cc4      	ldrb	r4, [r0, r3]
 8000a6c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for(int i=0; i < length; i++)
 8000a70:	3301      	adds	r3, #1
 8000a72:	e7f6      	b.n	8000a62 <Flash_Read+0x4>

08000a74 <CLI_FlashTest>:
  return ret;
}
// Read, Erase, Write
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(nCount == 2)
 8000a76:	2902      	cmp	r1, #2
{
 8000a78:	b08d      	sub	sp, #52	; 0x34
 8000a7a:	461c      	mov	r4, r3
  if(nCount == 2)
 8000a7c:	d11d      	bne.n	8000aba <CLI_FlashTest+0x46>
  {
    switch(nFirst)
 8000a7e:	2a02      	cmp	r2, #2
 8000a80:	d01d      	beq.n	8000abe <CLI_FlashTest+0x4a>
 8000a82:	2a03      	cmp	r2, #3
 8000a84:	d02f      	beq.n	8000ae6 <CLI_FlashTest+0x72>
 8000a86:	4e26      	ldr	r6, [pc, #152]	; (8000b20 <CLI_FlashTest+0xac>)
 8000a88:	2a01      	cmp	r2, #1
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 8000a8a:	6833      	ldr	r3, [r6, #0]
    switch(nFirst)
 8000a8c:	d144      	bne.n	8000b18 <CLI_FlashTest+0xa4>
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 8000a8e:	b113      	cbz	r3, 8000a96 <CLI_FlashTest+0x22>
 8000a90:	4824      	ldr	r0, [pc, #144]	; (8000b24 <CLI_FlashTest+0xb0>)
 8000a92:	f000 f949 	bl	8000d28 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],12);
 8000a96:	220c      	movs	r2, #12
 8000a98:	4669      	mov	r1, sp
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff ffdf 	bl	8000a5e <Flash_Read>
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 8000aa0:	4f21      	ldr	r7, [pc, #132]	; (8000b28 <CLI_FlashTest+0xb4>)
        for(int i=0; i<12; i++)
 8000aa2:	2500      	movs	r5, #0
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 8000aa4:	6833      	ldr	r3, [r6, #0]
 8000aa6:	b12b      	cbz	r3, 8000ab4 <CLI_FlashTest+0x40>
 8000aa8:	f85d 2025 	ldr.w	r2, [sp, r5, lsl #2]
 8000aac:	1961      	adds	r1, r4, r5
 8000aae:	4638      	mov	r0, r7
 8000ab0:	f000 f93a 	bl	8000d28 <svDebugMessage>
        for(int i=0; i<12; i++)
 8000ab4:	3501      	adds	r5, #1
 8000ab6:	2d0c      	cmp	r5, #12
 8000ab8:	d1f4      	bne.n	8000aa4 <CLI_FlashTest+0x30>
        break;
    }
  }
}
 8000aba:	b00d      	add	sp, #52	; 0x34
 8000abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(Flash_Erase(nAddress, 32) == TRUE)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	f7ff ff57 	bl	8000974 <Flash_Erase>
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <CLI_FlashTest+0xac>)
 8000ac8:	2801      	cmp	r0, #1
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 8000aca:	681b      	ldr	r3, [r3, #0]
        if(Flash_Erase(nAddress, 32) == TRUE)
 8000acc:	d107      	bne.n	8000ade <CLI_FlashTest+0x6a>
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f3      	beq.n	8000aba <CLI_FlashTest+0x46>
 8000ad2:	4816      	ldr	r0, [pc, #88]	; (8000b2c <CLI_FlashTest+0xb8>)
}
 8000ad4:	b00d      	add	sp, #52	; 0x34
 8000ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 8000ada:	f000 b925 	b.w	8000d28 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0eb      	beq.n	8000aba <CLI_FlashTest+0x46>
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <CLI_FlashTest+0xbc>)
 8000ae4:	e7f6      	b.n	8000ad4 <CLI_FlashTest+0x60>
 8000ae6:	466b      	mov	r3, sp
        for(int i=0; i<32; i++)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4619      	mov	r1, r3
          wbuf[i] = i;
 8000aec:	f803 2b01 	strb.w	r2, [r3], #1
        for(int i=0; i<32; i++)
 8000af0:	3201      	adds	r2, #1
 8000af2:	2a20      	cmp	r2, #32
 8000af4:	d1fa      	bne.n	8000aec <CLI_FlashTest+0x78>
        if(Flash_Write(nAddress, wbuf, 32) == TRUE)
 8000af6:	4620      	mov	r0, r4
 8000af8:	f7ff ff8c 	bl	8000a14 <Flash_Write>
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <CLI_FlashTest+0xac>)
 8000afe:	2801      	cmp	r0, #1
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 8000b00:	681b      	ldr	r3, [r3, #0]
        if(Flash_Write(nAddress, wbuf, 32) == TRUE)
 8000b02:	d105      	bne.n	8000b10 <CLI_FlashTest+0x9c>
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0d8      	beq.n	8000aba <CLI_FlashTest+0x46>
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <CLI_FlashTest+0xc0>)
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 8000b0a:	f000 f90d 	bl	8000d28 <svDebugMessage>
 8000b0e:	e7d4      	b.n	8000aba <CLI_FlashTest+0x46>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0d2      	beq.n	8000aba <CLI_FlashTest+0x46>
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <CLI_FlashTest+0xc4>)
 8000b16:	e7f8      	b.n	8000b0a <CLI_FlashTest+0x96>
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0ce      	beq.n	8000aba <CLI_FlashTest+0x46>
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <CLI_FlashTest+0xc8>)
 8000b1e:	e7d9      	b.n	8000ad4 <CLI_FlashTest+0x60>
 8000b20:	20000004 	.word	0x20000004
 8000b24:	080062d0 	.word	0x080062d0
 8000b28:	08006300 	.word	0x08006300
 8000b2c:	0800630d 	.word	0x0800630d
 8000b30:	08006317 	.word	0x08006317
 8000b34:	08006323 	.word	0x08006323
 8000b38:	0800632d 	.word	0x0800632d
 8000b3c:	08006339 	.word	0x08006339

08000b40 <LED_OnOff>:
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
  if(FALSE == s_bLEDEnable)
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <LED_OnOff+0x24>)
 8000b42:	681b      	ldr	r3, [r3, #0]
{
 8000b44:	4602      	mov	r2, r0
  if(FALSE == s_bLEDEnable)
 8000b46:	b163      	cbz	r3, 8000b62 <LED_OnOff+0x22>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <LED_OnOff+0x28>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	b14b      	cbz	r3, 8000b62 <LED_OnOff+0x22>
  {
    switch(eLED){
 8000b4e:	2801      	cmp	r0, #1
 8000b50:	d107      	bne.n	8000b62 <LED_OnOff+0x22>
        break;
      default:
        return;
        break;
    }
    if(bOn)
 8000b52:	b121      	cbz	r1, 8000b5e <LED_OnOff+0x1e>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 8000b54:	2120      	movs	r1, #32
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 bc89 	b.w	8001470 <HAL_GPIO_WritePin>
 8000b5e:	460a      	mov	r2, r1
 8000b60:	e7f8      	b.n	8000b54 <LED_OnOff+0x14>
    }
  }
}
 8000b62:	4770      	bx	lr
 8000b64:	20000320 	.word	0x20000320
 8000b68:	20000324 	.word	0x20000324

08000b6c <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
  if (nCount == 2) {
 8000b6c:	2902      	cmp	r1, #2
 8000b6e:	d105      	bne.n	8000b7c <CLI_LEDTest+0x10>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 8000b70:	1e19      	subs	r1, r3, #0
 8000b72:	bf18      	it	ne
 8000b74:	2101      	movne	r1, #1
 8000b76:	b2d0      	uxtb	r0, r2
 8000b78:	f7ff bfe2 	b.w	8000b40 <LED_OnOff>
  }
}
 8000b7c:	4770      	bx	lr
	...

08000b80 <RTC_BackupRegRead>:

  return ret;
}

uint32_t RTC_BackupRegRead(uint32_t index)
{
 8000b80:	4601      	mov	r1, r0
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000b82:	4801      	ldr	r0, [pc, #4]	; (8000b88 <RTC_BackupRegRead+0x8>)
 8000b84:	f002 b95b 	b.w	8002e3e <HAL_RTCEx_BKUPRead>
 8000b88:	20000328 	.word	0x20000328

08000b8c <RTC_BackupRegWrite>:
}
void RTC_BackupRegWrite(uint32_t index, uint32_t data)
{
 8000b8c:	460a      	mov	r2, r1
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000b8e:	4601      	mov	r1, r0
 8000b90:	4801      	ldr	r0, [pc, #4]	; (8000b98 <RTC_BackupRegWrite+0xc>)
 8000b92:	f002 b94d 	b.w	8002e30 <HAL_RTCEx_BKUPWrite>
 8000b96:	bf00      	nop
 8000b98:	20000328 	.word	0x20000328

08000b9c <Reset_Init>:
    }
  }
}

BOOL Reset_Init(void)
{
 8000b9c:	b508      	push	{r3, lr}
  {
    is_debug = TRUE;
  }

  // Reset 핀이 눌린다면
  if(RCC->CSR & (1<<26) && is_debug != TRUE)
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <Reset_Init+0x44>)
  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <Reset_Init+0x48>)
 8000ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
  if(RCC->CSR & (1<<26) && is_debug != TRUE)
 8000ba6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000baa:	0152      	lsls	r2, r2, #5
 8000bac:	d511      	bpl.n	8000bd2 <Reset_Init+0x36>
 8000bae:	07db      	lsls	r3, r3, #31
 8000bb0:	d40f      	bmi.n	8000bd2 <Reset_Init+0x36>
  {
    RTC_BackupRegWrite(RESET_REG_COUNT, RTC_BackupRegRead(RESET_REG_COUNT) + 1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff ffe4 	bl	8000b80 <RTC_BackupRegRead>
 8000bb8:	1c41      	adds	r1, r0, #1
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff ffe6 	bl	8000b8c <RTC_BackupRegWrite>
    HAL_Delay(500);
 8000bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc4:	f000 f910 	bl	8000de8 <HAL_Delay>
    s_ResetCount = RTC_BackupRegRead(RESET_REG_COUNT);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff ffd9 	bl	8000b80 <RTC_BackupRegRead>
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <Reset_Init+0x4c>)
 8000bd0:	6018      	str	r0, [r3, #0]
  }

  //clear 다시 0으로
  RTC_BackupRegWrite(RESET_REG_COUNT,0);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ffd9 	bl	8000b8c <RTC_BackupRegWrite>

  return ret;
}
 8000bda:	2001      	movs	r0, #1
 8000bdc:	bd08      	pop	{r3, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	20000350 	.word	0x20000350

08000bec <Reset_GetCount>:

uint32_t Reset_GetCount(void)
{
  return s_ResetCount;
}
 8000bec:	4b01      	ldr	r3, [pc, #4]	; (8000bf4 <Reset_GetCount+0x8>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000350 	.word	0x20000350

08000bf8 <Reset_ToBoot>:


void Reset_ToBoot(uint32_t timeout)
{
 8000bf8:	b507      	push	{r0, r1, r2, lr}
  void(*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <Reset_ToBoot+0x58>)
 8000bfc:	9301      	str	r3, [sp, #4]

  HAL_RCC_DeInit();
 8000bfe:	f001 fb41 	bl	8002284 <HAL_RCC_DeInit>

  SYSCFG->MEMRMP = 0x01;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <Reset_ToBoot+0x5c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
  SYSCFG->CFGR1 = 0x01;
 8000c08:	605a      	str	r2, [r3, #4]
  SysTick->CTRL = 0;
 8000c0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000c0e:	2300      	movs	r3, #0
 8000c10:	6113      	str	r3, [r2, #16]
  SysTick->LOAD = 0;
  SysTick->VAL  = 0;

  for (int i=0;i<8;i++)
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8000c12:	f04f 31ff 	mov.w	r1, #4294967295
  SysTick->LOAD = 0;
 8000c16:	6153      	str	r3, [r2, #20]
  SysTick->VAL  = 0;
 8000c18:	6193      	str	r3, [r2, #24]
    NVIC->ICER[i]=0xFFFFFFFF;
 8000c1a:	009a      	lsls	r2, r3, #2
 8000c1c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8000c20:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8000c24:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->ICPR[i]=0xFFFFFFFF;
 8000c28:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c30:	f3bf 8f6f 	isb	sy
  for (int i=0;i<8;i++)
 8000c34:	3301      	adds	r3, #1
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d1ef      	bne.n	8000c1a <Reset_ToBoot+0x22>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8000c3a:	9b01      	ldr	r3, [sp, #4]

  __set_MSP(*(uint32_t *)addr);
 8000c3c:	9a01      	ldr	r2, [sp, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c3e:	6812      	ldr	r2, [r2, #0]
 8000c40:	f382 8808 	msr	MSP, r2
  SysMemBootJump();
 8000c44:	685b      	ldr	r3, [r3, #4]
}
 8000c46:	b003      	add	sp, #12
 8000c48:	f85d eb04 	ldr.w	lr, [sp], #4
  SysMemBootJump();
 8000c4c:	4718      	bx	r3
 8000c4e:	bf00      	nop
 8000c50:	1fff0000 	.word	0x1fff0000
 8000c54:	40010000 	.word	0x40010000

08000c58 <UART_Init>:
static BOOL s_bUARTConnected = FALSE;

UART_HandleTypeDef huart1;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 8000c58:	b570      	push	{r4, r5, r6, lr}
  switch(ch)
 8000c5a:	bb10      	cbnz	r0, 8000ca2 <UART_Init+0x4a>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 8000c5c:	4c1c      	ldr	r4, [pc, #112]	; (8000cd0 <UART_Init+0x78>)
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <UART_Init+0x7c>)
      huart1.Init.BaudRate = baud;
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
      huart1.Init.StopBits = UART_STOPBITS_1;
      huart1.Init.Parity = UART_PARITY_NONE;
 8000c60:	6120      	str	r0, [r4, #16]
      huart1.Init.BaudRate = baud;
 8000c62:	e9c4 3100 	strd	r3, r1, [r4]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000c66:	230c      	movs	r3, #12
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000c68:	e9c4 0002 	strd	r0, r0, [r4, #8]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6c:	e9c4 3005 	strd	r3, r0, [r4, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c70:	e9c4 0007 	strd	r0, r0, [r4, #28]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f002 ff5d 	bl	8003b38 <HAL_UART_Init>
 8000c7e:	4e16      	ldr	r6, [pc, #88]	; (8000cd8 <UART_Init+0x80>)
 8000c80:	4d16      	ldr	r5, [pc, #88]	; (8000cdc <UART_Init+0x84>)
 8000c82:	4601      	mov	r1, r0
 8000c84:	b170      	cbz	r0, 8000ca4 <UART_Init+0x4c>
      {
        Error_Handler();
 8000c86:	f7ff fd77 	bl	8000778 <Error_Handler>
        s_bUARTConnected = FALSE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6033      	str	r3, [r6, #0]
        g_bDebugTx = FALSE;
 8000c8e:	602b      	str	r3, [r5, #0]
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
      }

      if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data,1) != HAL_OK)
 8000c90:	4913      	ldr	r1, [pc, #76]	; (8000ce0 <UART_Init+0x88>)
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <UART_Init+0x78>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	f003 f807 	bl	8003ca8 <HAL_UART_Receive_IT>
 8000c9a:	b1b8      	cbz	r0, 8000ccc <UART_Init+0x74>
      {
        s_bUARTConnected = FALSE;
 8000c9c:	2300      	movs	r3, #0
        g_bDebugTx = FALSE;
      }
      else
      {
        s_bUARTConnected = TRUE;
 8000c9e:	6033      	str	r3, [r6, #0]
        g_bDebugTx = TRUE;
 8000ca0:	602b      	str	r3, [r5, #0]
      break;
    default:
      break;
  }
  return;
}
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f003 f861 	bl	8003d6c <HAL_UARTEx_SetTxFifoThreshold>
 8000caa:	4601      	mov	r1, r0
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d1ea      	bne.n	8000c86 <UART_Init+0x2e>
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f003 f87b 	bl	8003dac <HAL_UARTEx_SetRxFifoThreshold>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d1e5      	bne.n	8000c86 <UART_Init+0x2e>
      else if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f003 f83b 	bl	8003d36 <HAL_UARTEx_DisableFifoMode>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d1e0      	bne.n	8000c86 <UART_Init+0x2e>
        svRingBuffer_Reset(&g_uartRxBuff);
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <UART_Init+0x8c>)
 8000cc6:	f004 fb9f 	bl	8005408 <svRingBuffer_Reset>
 8000cca:	e7e1      	b.n	8000c90 <UART_Init+0x38>
        s_bUARTConnected = TRUE;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e7e6      	b.n	8000c9e <UART_Init+0x46>
 8000cd0:	20000354 	.word	0x20000354
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	200003ec 	.word	0x200003ec
 8000cdc:	200003f0 	.word	0x200003f0
 8000ce0:	200003e8 	.word	0x200003e8
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce8:	b508      	push	{r3, lr}
  if(huart->Instance == USART1)
 8000cea:	6802      	ldr	r2, [r0, #0]
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_UART_RxCpltCallback+0x30>)
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d110      	bne.n	8000d14 <HAL_UART_RxCpltCallback+0x2c>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_UART_RxCpltCallback+0x34>)
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <HAL_UART_RxCpltCallback+0x38>)
 8000cf6:	7819      	ldrb	r1, [r3, #0]
 8000cf8:	f004 fb8d 	bl	8005416 <svRingBuffer_Push>
    if(result == -2 )
 8000cfc:	3002      	adds	r0, #2
 8000cfe:	d102      	bne.n	8000d06 <HAL_UART_RxCpltCallback+0x1e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <HAL_UART_RxCpltCallback+0x38>)
 8000d02:	f004 fb81 	bl	8005408 <svRingBuffer_Reset>
    {

    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data, 1);
  }
}
 8000d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data, 1);
 8000d0a:	4904      	ldr	r1, [pc, #16]	; (8000d1c <HAL_UART_RxCpltCallback+0x34>)
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_RxCpltCallback+0x3c>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f002 bfca 	b.w	8003ca8 <HAL_UART_Receive_IT>
}
 8000d14:	bd08      	pop	{r3, pc}
 8000d16:	bf00      	nop
 8000d18:	40013800 	.word	0x40013800
 8000d1c:	200003e8 	.word	0x200003e8
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000354 	.word	0x20000354

08000d28 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8000d28:	b40f      	push	{r0, r1, r2, r3}
 8000d2a:	b513      	push	{r0, r1, r4, lr}
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
	len = vsprintf(s_msg4Debug, fmt, ap);
 8000d2c:	4c08      	ldr	r4, [pc, #32]	; (8000d50 <svDebugMessage+0x28>)
{
 8000d2e:	aa04      	add	r2, sp, #16
	len = vsprintf(s_msg4Debug, fmt, ap);
 8000d30:	4620      	mov	r0, r4
{
 8000d32:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 8000d36:	9201      	str	r2, [sp, #4]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8000d38:	f004 febe 	bl	8005ab8 <vsiprintf>
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8000d3c:	4621      	mov	r1, r4
	len = vsprintf(s_msg4Debug, fmt, ap);
 8000d3e:	4602      	mov	r2, r0
	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <svDebugMessage+0x2c>)
 8000d42:	f004 fb94 	bl	800546e <lwrb_write>
}
 8000d46:	b002      	add	sp, #8
 8000d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d4c:	b004      	add	sp, #16
 8000d4e:	4770      	bx	lr
 8000d50:	20000488 	.word	0x20000488
 8000d54:	200003f4 	.word	0x200003f4

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_InitTick+0x40>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
{
 8000d5e:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000d60:	b90a      	cbnz	r2, 8000d66 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d62:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_InitTick+0x44>)
 8000d70:	6810      	ldr	r0, [r2, #0]
 8000d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d76:	f000 f89d 	bl	8000eb4 <HAL_SYSTICK_Config>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d1f0      	bne.n	8000d62 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	2d0f      	cmp	r5, #15
 8000d82:	d8ee      	bhi.n	8000d62 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	4602      	mov	r2, r0
 8000d86:	4629      	mov	r1, r5
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f852 	bl	8000e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_InitTick+0x48>)
 8000d92:	4620      	mov	r0, r4
 8000d94:	601d      	str	r5, [r3, #0]
  return status;
 8000d96:	e7e5      	b.n	8000d64 <HAL_InitTick+0xc>
 8000d98:	20000024 	.word	0x20000024
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000028 	.word	0x20000028

08000da4 <HAL_Init>:
{
 8000da4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da6:	2003      	movs	r0, #3
 8000da8:	f000 f832 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dac:	200f      	movs	r0, #15
 8000dae:	f7ff ffd3 	bl	8000d58 <HAL_InitTick>
 8000db2:	4604      	mov	r4, r0
 8000db4:	b918      	cbnz	r0, 8000dbe <HAL_Init+0x1a>
    HAL_MspInit();
 8000db6:	f7ff fce1 	bl	800077c <HAL_MspInit>
}
 8000dba:	4620      	mov	r0, r4
 8000dbc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000dbe:	2401      	movs	r4, #1
 8000dc0:	e7fb      	b.n	8000dba <HAL_Init+0x16>
	...

08000dc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_IncTick+0x10>)
 8000dc6:	4904      	ldr	r1, [pc, #16]	; (8000dd8 <HAL_IncTick+0x14>)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	6809      	ldr	r1, [r1, #0]
 8000dcc:	440b      	add	r3, r1
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000508 	.word	0x20000508
 8000dd8:	20000024 	.word	0x20000024

08000ddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ddc:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <HAL_GetTick+0x8>)
 8000dde:	6818      	ldr	r0, [r3, #0]
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000508 	.word	0x20000508

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff6 	bl	8000ddc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	bf1c      	itt	ne
 8000df4:	4b05      	ldrne	r3, [pc, #20]	; (8000e0c <HAL_Delay+0x24>)
 8000df6:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	bf18      	it	ne
 8000dfc:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfe:	f7ff ffed 	bl	8000ddc <HAL_GetTick>
 8000e02:	1b43      	subs	r3, r0, r5
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	d3fa      	bcc.n	8000dfe <HAL_Delay+0x16>
  {
  }
}
 8000e08:	bd38      	pop	{r3, r4, r5, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000024 	.word	0x20000024

08000e10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e20:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000e2c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b530      	push	{r4, r5, lr}
 8000e38:	68dc      	ldr	r4, [r3, #12]
 8000e3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	bf28      	it	cs
 8000e48:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e50:	bf8c      	ite	hi
 8000e52:	3c03      	subhi	r4, #3
 8000e54:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e56:	fa05 f303 	lsl.w	r3, r5, r3
 8000e5a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5e:	40a5      	lsls	r5, r4
 8000e60:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000e66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	bfac      	ite	ge
 8000e6e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	4a08      	ldrlt	r2, [pc, #32]	; (8000e94 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	bfb8      	it	lt
 8000e7a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	bfaa      	itet	ge
 8000e82:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e8c:	bd30      	pop	{r4, r5, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	e000ed14 	.word	0xe000ed14

08000e98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	db07      	blt.n	8000eac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_NVIC_EnableIRQ+0x18>)
 8000e9e:	0941      	lsrs	r1, r0, #5
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f000 001f 	and.w	r0, r0, #31
 8000ea6:	4083      	lsls	r3, r0
 8000ea8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eba:	d20b      	bcs.n	8000ed4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	21f0      	movs	r1, #240	; 0xf0
 8000ec6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eca:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ecc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ece:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ed4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000edc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000ee0:	2a02      	cmp	r2, #2
{
 8000ee2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee4:	d009      	beq.n	8000efa <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000eea:	2001      	movs	r0, #1
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8000ef8:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	6802      	ldr	r2, [r0, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000efc:	6c80      	ldr	r0, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efe:	6811      	ldr	r1, [r2, #0]
 8000f00:	f021 010e 	bic.w	r1, r1, #14
 8000f04:	6011      	str	r1, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f06:	6801      	ldr	r1, [r0, #0]
 8000f08:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000f0c:	6001      	str	r1, [r0, #0]
     __HAL_DMA_DISABLE(hdma);
 8000f0e:	6811      	ldr	r1, [r2, #0]
 8000f10:	f021 0101 	bic.w	r1, r1, #1
 8000f14:	6011      	str	r1, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f16:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	; 0x40
 8000f1a:	f002 011f 	and.w	r1, r2, #31
 8000f1e:	2201      	movs	r2, #1
 8000f20:	408a      	lsls	r2, r1
 8000f22:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f24:	e9d3 2113 	ldrd	r2, r1, [r3, #76]	; 0x4c
     if (hdma->DMAmuxRequestGen != 0U)
 8000f28:	6d58      	ldr	r0, [r3, #84]	; 0x54
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f2a:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d0dd      	beq.n	8000eec <HAL_DMA_Abort+0x10>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f36:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f38:	e9d3 2116 	ldrd	r2, r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8000f3c:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f3e:	6051      	str	r1, [r2, #4]
 8000f40:	e7d4      	b.n	8000eec <HAL_DMA_Abort+0x10>

08000f42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f42:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f44:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d009      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f50:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000f58:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	e02b      	b.n	8000fb8 <HAL_DMA_Abort_IT+0x76>
    status = HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f60:	6803      	ldr	r3, [r0, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f022 020e 	bic.w	r2, r2, #14
 8000f68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f72:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f7c:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	2301      	movs	r3, #1
 8000f86:	4093      	lsls	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f8a:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8000f8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f90:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000f92:	b133      	cbz	r3, 8000fa2 <HAL_DMA_Abort_IT+0x60>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f9c:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 8000fa0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000faa:	2400      	movs	r4, #0
 8000fac:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0d3      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x1a>
    {
      hdma->XferAbortCallback(hdma);
 8000fb4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000fb6:	4620      	mov	r0, r4
    }
  }
  return status;
}
 8000fb8:	bd10      	pop	{r4, pc}
	...

08000fbc <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000fbc:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <FLASH_Program_Fast+0x28>)
 8000fbe:	6953      	ldr	r3, [r2, #20]
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 8000fc4:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000fc6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fc8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8000fd0:	58cc      	ldr	r4, [r1, r3]
 8000fd2:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fda:	d1f9      	bne.n	8000fd0 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fdc:	f382 8810 	msr	PRIMASK, r2

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8000fe0:	bd10      	pop	{r4, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_FLASH_Unlock+0x1c>)
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fee:	bfbf      	itttt	lt
 8000ff0:	4a05      	ldrlt	r2, [pc, #20]	; (8001008 <HAL_FLASH_Unlock+0x20>)
 8000ff2:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ff4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000ff8:	609a      	strlt	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000ffa:	bfba      	itte	lt
 8000ffc:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	0fc0      	lsrlt	r0, r0, #31
 8001000:	2000      	movge	r0, #0
}
 8001002:	4770      	bx	lr
 8001004:	40022000 	.word	0x40022000
 8001008:	45670123 	.word	0x45670123

0800100c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_FLASH_Lock+0x14>)
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001014:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001016:	6958      	ldr	r0, [r3, #20]
}
 8001018:	43c0      	mvns	r0, r0
 800101a:	0fc0      	lsrs	r0, r0, #31
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <FLASH_WaitForLastOperation>:
{
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff fed8 	bl	8000ddc <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800102c:	4c0f      	ldr	r4, [pc, #60]	; (800106c <FLASH_WaitForLastOperation+0x48>)
  uint32_t tickstart = HAL_GetTick();
 800102e:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001030:	6923      	ldr	r3, [r4, #16]
 8001032:	03db      	lsls	r3, r3, #15
 8001034:	d40b      	bmi.n	800104e <FLASH_WaitForLastOperation+0x2a>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001036:	6923      	ldr	r3, [r4, #16]
 8001038:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 800103c:	4013      	ands	r3, r2
 800103e:	d00d      	beq.n	800105c <FLASH_WaitForLastOperation+0x38>
    pFlash.ErrorCode |= error;
 8001040:	490b      	ldr	r1, [pc, #44]	; (8001070 <FLASH_WaitForLastOperation+0x4c>)
 8001042:	684a      	ldr	r2, [r1, #4]
 8001044:	431a      	orrs	r2, r3
 8001046:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800104a:	6123      	str	r3, [r4, #16]
}
 800104c:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > Timeout)
 800104e:	f7ff fec5 	bl	8000ddc <HAL_GetTick>
 8001052:	1b40      	subs	r0, r0, r5
 8001054:	42b0      	cmp	r0, r6
 8001056:	d9eb      	bls.n	8001030 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8001058:	2003      	movs	r0, #3
 800105a:	e7f7      	b.n	800104c <FLASH_WaitForLastOperation+0x28>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800105c:	6920      	ldr	r0, [r4, #16]
 800105e:	f010 0001 	ands.w	r0, r0, #1
 8001062:	d0f3      	beq.n	800104c <FLASH_WaitForLastOperation+0x28>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001064:	2201      	movs	r2, #1
 8001066:	6122      	str	r2, [r4, #16]
 8001068:	4618      	mov	r0, r3
 800106a:	e7ef      	b.n	800104c <FLASH_WaitForLastOperation+0x28>
 800106c:	40022000 	.word	0x40022000
 8001070:	2000002c 	.word	0x2000002c

08001074 <HAL_FLASH_Program>:
{
 8001074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001078:	4d25      	ldr	r5, [pc, #148]	; (8001110 <HAL_FLASH_Program+0x9c>)
{
 800107a:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800107c:	782b      	ldrb	r3, [r5, #0]
 800107e:	2b01      	cmp	r3, #1
{
 8001080:	4604      	mov	r4, r0
 8001082:	460f      	mov	r7, r1
 8001084:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8001086:	d041      	beq.n	800110c <HAL_FLASH_Program+0x98>
 8001088:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800108a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  __HAL_LOCK(&pFlash);
 800108e:	702b      	strb	r3, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001090:	f7ff ffc8 	bl	8001024 <FLASH_WaitForLastOperation>
 8001094:	4606      	mov	r6, r0
  if (status == HAL_OK)
 8001096:	bb30      	cbnz	r0, 80010e6 <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001098:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800109a:	481e      	ldr	r0, [pc, #120]	; (8001114 <HAL_FLASH_Program+0xa0>)
 800109c:	6802      	ldr	r2, [r0, #0]
 800109e:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80010a2:	bf17      	itett	ne
 80010a4:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80010a6:	772a      	strbeq	r2, [r5, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80010a8:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80010ac:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80010ae:	bf1c      	itt	ne
 80010b0:	2302      	movne	r3, #2
 80010b2:	772b      	strbne	r3, [r5, #28]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80010b4:	b9e4      	cbnz	r4, 80010f0 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010b6:	6943      	ldr	r3, [r0, #20]
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6143      	str	r3, [r0, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 80010be:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 80010c2:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 80010c6:	2401      	movs	r4, #1
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80010c8:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d0:	f7ff ffa8 	bl	8001024 <FLASH_WaitForLastOperation>
 80010d4:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80010d6:	b124      	cbz	r4, 80010e2 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_FLASH_Program+0xa0>)
 80010da:	6953      	ldr	r3, [r2, #20]
 80010dc:	ea23 0304 	bic.w	r3, r3, r4
 80010e0:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80010e2:	f000 f859 	bl	8001198 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80010e6:	2300      	movs	r3, #0
 80010e8:	702b      	strb	r3, [r5, #0]
}
 80010ea:	4630      	mov	r0, r6
 80010ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80010f0:	1e63      	subs	r3, r4, #1
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d808      	bhi.n	8001108 <HAL_FLASH_Program+0x94>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80010f6:	4641      	mov	r1, r8
 80010f8:	4638      	mov	r0, r7
 80010fa:	f7ff ff5f 	bl	8000fbc <FLASH_Program_Fast>
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80010fe:	1ea3      	subs	r3, r4, #2
 8001100:	425c      	negs	r4, r3
 8001102:	415c      	adcs	r4, r3
 8001104:	04a4      	lsls	r4, r4, #18
 8001106:	e7e1      	b.n	80010cc <HAL_FLASH_Program+0x58>
  uint32_t prog_bit = 0;
 8001108:	2400      	movs	r4, #0
 800110a:	e7df      	b.n	80010cc <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 800110c:	2602      	movs	r6, #2
 800110e:	e7ec      	b.n	80010ea <HAL_FLASH_Program+0x76>
 8001110:	2000002c 	.word	0x2000002c
 8001114:	40022000 	.word	0x40022000

08001118 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <FLASH_MassErase+0x38>)
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	0252      	lsls	r2, r2, #9
 800111e:	d511      	bpl.n	8001144 <FLASH_MassErase+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8001120:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001122:	bf42      	ittt	mi
 8001124:	695a      	ldrmi	r2, [r3, #20]
 8001126:	f042 0204 	orrmi.w	r2, r2, #4
 800112a:	615a      	strmi	r2, [r3, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 800112c:	0782      	lsls	r2, r0, #30
 800112e:	d503      	bpl.n	8001138 <FLASH_MassErase+0x20>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001136:	615a      	str	r2, [r3, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001138:	4a05      	ldr	r2, [pc, #20]	; (8001150 <FLASH_MassErase+0x38>)
 800113a:	6953      	ldr	r3, [r2, #20]
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6153      	str	r3, [r2, #20]
}
 8001142:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800114a:	f042 0204 	orr.w	r2, r2, #4
 800114e:	e7f2      	b.n	8001136 <FLASH_MassErase+0x1e>
 8001150:	40022000 	.word	0x40022000

08001154 <FLASH_PageErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <FLASH_PageErase+0x40>)
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800115c:	695a      	ldr	r2, [r3, #20]
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800115e:	d113      	bne.n	8001188 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001164:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	00c0      	lsls	r0, r0, #3
 800116a:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 800116e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8001172:	4310      	orrs	r0, r2
 8001174:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	f042 0202 	orr.w	r2, r2, #2
 800117c:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001184:	615a      	str	r2, [r3, #20]
}
 8001186:	4770      	bx	lr
    if ((Banks & FLASH_BANK_1) != 0U)
 8001188:	07c9      	lsls	r1, r1, #31
 800118a:	d4e9      	bmi.n	8001160 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800118c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001190:	e7e8      	b.n	8001164 <FLASH_PageErase+0x10>
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001198:	4815      	ldr	r0, [pc, #84]	; (80011f0 <FLASH_FlushCaches+0x58>)
 800119a:	7f03      	ldrb	r3, [r0, #28]
 800119c:	b2da      	uxtb	r2, r3

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800119e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d110      	bne.n	80011c8 <FLASH_FlushCaches+0x30>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <FLASH_FlushCaches+0x5c>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80011ae:	6019      	str	r1, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80011b6:	6019      	str	r1, [r3, #0]
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80011be:	6019      	str	r1, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80011c6:	6019      	str	r1, [r3, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80011c8:	1e93      	subs	r3, r2, #2
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d80c      	bhi.n	80011e8 <FLASH_FlushCaches+0x50>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <FLASH_FlushCaches+0x5c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011de:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011e6:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80011e8:	2300      	movs	r3, #0
 80011ea:	7703      	strb	r3, [r0, #28]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000002c 	.word	0x2000002c
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_FLASHEx_Erase>:
{
 80011f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80011fc:	4d33      	ldr	r5, [pc, #204]	; (80012cc <HAL_FLASHEx_Erase+0xd4>)
 80011fe:	782b      	ldrb	r3, [r5, #0]
 8001200:	2b01      	cmp	r3, #1
{
 8001202:	4606      	mov	r6, r0
 8001204:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001206:	d05e      	beq.n	80012c6 <HAL_FLASHEx_Erase+0xce>
 8001208:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800120a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  __HAL_LOCK(&pFlash);
 800120e:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001210:	f7ff ff08 	bl	8001024 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001214:	4604      	mov	r4, r0
 8001216:	bb20      	cbnz	r0, 8001262 <HAL_FLASHEx_Erase+0x6a>
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_FLASHEx_Erase+0xd8>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800121a:	6068      	str	r0, [r5, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	f412 7f00 	tst.w	r2, #512	; 0x200
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001222:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001224:	d022      	beq.n	800126c <HAL_FLASHEx_Erase+0x74>
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001226:	0551      	lsls	r1, r2, #21
 8001228:	d506      	bpl.n	8001238 <HAL_FLASHEx_Erase+0x40>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001230:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001232:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001234:	772b      	strb	r3, [r5, #28]
 8001236:	e000      	b.n	800123a <HAL_FLASHEx_Erase+0x42>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001238:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800123a:	6833      	ldr	r3, [r6, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d11f      	bne.n	8001280 <HAL_FLASHEx_Erase+0x88>
      FLASH_MassErase(pEraseInit->Banks);
 8001240:	6870      	ldr	r0, [r6, #4]
 8001242:	f7ff ff69 	bl	8001118 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124a:	f7ff feeb 	bl	8001024 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800124e:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <HAL_FLASHEx_Erase+0xd8>)
 8001250:	6953      	ldr	r3, [r2, #20]
 8001252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001256:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800125a:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800125c:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800125e:	f7ff ff9b 	bl	8001198 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001262:	2300      	movs	r3, #0
 8001264:	702b      	strb	r3, [r5, #0]
}
 8001266:	4620      	mov	r0, r4
 8001268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800126c:	0552      	lsls	r2, r2, #21
 800126e:	d505      	bpl.n	800127c <HAL_FLASHEx_Erase+0x84>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001276:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001278:	2302      	movs	r3, #2
 800127a:	e7db      	b.n	8001234 <HAL_FLASHEx_Erase+0x3c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800127c:	7728      	strb	r0, [r5, #28]
 800127e:	e7dc      	b.n	800123a <HAL_FLASHEx_Erase+0x42>
      *PageError = 0xFFFFFFFFU;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001288:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800128a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80012d0 <HAL_FLASHEx_Erase+0xd8>
 800128e:	f8df a044 	ldr.w	sl, [pc, #68]	; 80012d4 <HAL_FLASHEx_Erase+0xdc>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001292:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001296:	4413      	add	r3, r2
 8001298:	42bb      	cmp	r3, r7
 800129a:	d9e0      	bls.n	800125e <HAL_FLASHEx_Erase+0x66>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800129c:	6871      	ldr	r1, [r6, #4]
 800129e:	4638      	mov	r0, r7
 80012a0:	f7ff ff58 	bl	8001154 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a8:	f7ff febc 	bl	8001024 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80012ac:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80012b0:	ea03 030a 	and.w	r3, r3, sl
 80012b4:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80012b8:	b118      	cbz	r0, 80012c2 <HAL_FLASHEx_Erase+0xca>
          *PageError = page_index;
 80012ba:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012be:	4604      	mov	r4, r0
          break;
 80012c0:	e7cd      	b.n	800125e <HAL_FLASHEx_Erase+0x66>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80012c2:	3701      	adds	r7, #1
 80012c4:	e7e5      	b.n	8001292 <HAL_FLASHEx_Erase+0x9a>
  __HAL_LOCK(&pFlash);
 80012c6:	2402      	movs	r4, #2
 80012c8:	e7cd      	b.n	8001266 <HAL_FLASHEx_Erase+0x6e>
 80012ca:	bf00      	nop
 80012cc:	2000002c 	.word	0x2000002c
 80012d0:	40022000 	.word	0x40022000
 80012d4:	fffffc05 	.word	0xfffffc05

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800146c <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012e0:	4c60      	ldr	r4, [pc, #384]	; (8001464 <HAL_GPIO_Init+0x18c>)
  uint32_t position = 0x00U;
 80012e2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e4:	680a      	ldr	r2, [r1, #0]
 80012e6:	fa32 f503 	lsrs.w	r5, r2, r3
 80012ea:	d102      	bne.n	80012f2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80012ec:	b003      	add	sp, #12
 80012ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012f2:	2501      	movs	r5, #1
 80012f4:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 80012f8:	ea1e 0202 	ands.w	r2, lr, r2
 80012fc:	f000 80a5 	beq.w	800144a <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001300:	684e      	ldr	r6, [r1, #4]
 8001302:	f006 0503 	and.w	r5, r6, #3
 8001306:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800130a:	f04f 0c03 	mov.w	ip, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800130e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001310:	fa0c fc08 	lsl.w	ip, ip, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001314:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001316:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800131a:	d834      	bhi.n	8001386 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800131c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800131e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	68cf      	ldr	r7, [r1, #12]
 8001324:	fa07 f708 	lsl.w	r7, r7, r8
 8001328:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800132c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800132e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001330:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001334:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001338:	409f      	lsls	r7, r3
 800133a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800133e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001340:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001342:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	688f      	ldr	r7, [r1, #8]
 8001348:	fa07 f708 	lsl.w	r7, r7, r8
 800134c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001350:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001352:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001354:	d119      	bne.n	800138a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8001356:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800135a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800135e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001362:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001366:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800136a:	f04f 0e0f 	mov.w	lr, #15
 800136e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001372:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001376:	690f      	ldr	r7, [r1, #16]
 8001378:	fa07 f70b 	lsl.w	r7, r7, fp
 800137c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001380:	f8ca 7020 	str.w	r7, [sl, #32]
 8001384:	e001      	b.n	800138a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	2d03      	cmp	r5, #3
 8001388:	d1da      	bne.n	8001340 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800138a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001390:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001396:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 800139a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139c:	d055      	beq.n	800144a <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80013a2:	f045 0501 	orr.w	r5, r5, #1
 80013a6:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80013aa:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80013ae:	f023 0703 	bic.w	r7, r3, #3
 80013b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013b6:	f005 0501 	and.w	r5, r5, #1
 80013ba:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80013be:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013c0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c4:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80013c6:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80013cc:	f04f 0c0f 	mov.w	ip, #15
 80013d0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013d4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013d8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013dc:	d037      	beq.n	800144e <HAL_GPIO_Init+0x176>
 80013de:	4d22      	ldr	r5, [pc, #136]	; (8001468 <HAL_GPIO_Init+0x190>)
 80013e0:	42a8      	cmp	r0, r5
 80013e2:	d036      	beq.n	8001452 <HAL_GPIO_Init+0x17a>
 80013e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013e8:	42a8      	cmp	r0, r5
 80013ea:	d034      	beq.n	8001456 <HAL_GPIO_Init+0x17e>
 80013ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013f0:	42a8      	cmp	r0, r5
 80013f2:	d032      	beq.n	800145a <HAL_GPIO_Init+0x182>
 80013f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013f8:	42a8      	cmp	r0, r5
 80013fa:	d030      	beq.n	800145e <HAL_GPIO_Init+0x186>
 80013fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001400:	42a8      	cmp	r0, r5
 8001402:	bf0c      	ite	eq
 8001404:	2505      	moveq	r5, #5
 8001406:	2506      	movne	r5, #6
 8001408:	fa05 f50e 	lsl.w	r5, r5, lr
 800140c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8001412:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001414:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001416:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800141a:	bf0c      	ite	eq
 800141c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800141e:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8001420:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001422:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001424:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001428:	bf0c      	ite	eq
 800142a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800142c:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 800142e:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8001430:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001432:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001436:	bf0c      	ite	eq
 8001438:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800143a:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 800143c:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 800143e:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001442:	bf54      	ite	pl
 8001444:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001446:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8001448:	6025      	str	r5, [r4, #0]
    position++;
 800144a:	3301      	adds	r3, #1
 800144c:	e74a      	b.n	80012e4 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800144e:	2500      	movs	r5, #0
 8001450:	e7da      	b.n	8001408 <HAL_GPIO_Init+0x130>
 8001452:	2501      	movs	r5, #1
 8001454:	e7d8      	b.n	8001408 <HAL_GPIO_Init+0x130>
 8001456:	2502      	movs	r5, #2
 8001458:	e7d6      	b.n	8001408 <HAL_GPIO_Init+0x130>
 800145a:	2503      	movs	r5, #3
 800145c:	e7d4      	b.n	8001408 <HAL_GPIO_Init+0x130>
 800145e:	2504      	movs	r5, #4
 8001460:	e7d2      	b.n	8001408 <HAL_GPIO_Init+0x130>
 8001462:	bf00      	nop
 8001464:	40010400 	.word	0x40010400
 8001468:	48000400 	.word	0x48000400
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001470:	b10a      	cbz	r2, 8001476 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001472:	6181      	str	r1, [r0, #24]
 8001474:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001478:	4770      	bx	lr

0800147a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147c:	ea01 0203 	and.w	r2, r1, r3
 8001480:	ea21 0103 	bic.w	r1, r1, r3
 8001484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001488:	6181      	str	r1, [r0, #24]
}
 800148a:	4770      	bx	lr

0800148c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148e:	4604      	mov	r4, r0
 8001490:	2800      	cmp	r0, #0
 8001492:	d04c      	beq.n	800152e <HAL_PCD_Init+0xa2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001494:	f890 3291 	ldrb.w	r3, [r0, #657]	; 0x291
 8001498:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800149c:	b91b      	cbnz	r3, 80014a6 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800149e:	f880 2290 	strb.w	r2, [r0, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014a2:	f004 f8fb 	bl	800569c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014ac:	6820      	ldr	r0, [r4, #0]
 80014ae:	f002 fca6 	bl	8003dfe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b2:	2200      	movs	r2, #0
 80014b4:	7925      	ldrb	r5, [r4, #4]
 80014b6:	f104 0310 	add.w	r3, r4, #16
 80014ba:	4611      	mov	r1, r2
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014bc:	2601      	movs	r6, #1
 80014be:	b2d0      	uxtb	r0, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c0:	4285      	cmp	r5, r0
 80014c2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80014c6:	d81a      	bhi.n	80014fe <HAL_PCD_Init+0x72>
 80014c8:	2100      	movs	r1, #0
 80014ca:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ce:	460a      	mov	r2, r1
 80014d0:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d2:	4285      	cmp	r5, r0
 80014d4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80014d8:	d81d      	bhi.n	8001516 <HAL_PCD_Init+0x8a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014da:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80014de:	6820      	ldr	r0, [r4, #0]
 80014e0:	f002 fc97 	bl	8003e12 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014e4:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80014e6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80014e8:	7325      	strb	r5, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014ea:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014ee:	7aa3      	ldrb	r3, [r4, #10]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d102      	bne.n	80014fa <HAL_PCD_Init+0x6e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f000 fe4b 	bl	8002190 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014fa:	4628      	mov	r0, r5
 80014fc:	e018      	b.n	8001530 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014fe:	e943 1106 	strd	r1, r1, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8001502:	f803 6c27 	strb.w	r6, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8001506:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150a:	f803 1c25 	strb.w	r1, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 800150e:	f843 1c10 	str.w	r1, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	3201      	adds	r2, #1
 8001514:	e7d3      	b.n	80014be <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001516:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 800151a:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 800151e:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001522:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001526:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	3101      	adds	r1, #1
 800152c:	e7d0      	b.n	80014d0 <HAL_PCD_Init+0x44>
    return HAL_ERROR;
 800152e:	2001      	movs	r0, #1
}
 8001530:	bd70      	pop	{r4, r5, r6, pc}

08001532 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001532:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001534:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001538:	2b01      	cmp	r3, #1
{
 800153a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800153c:	d00c      	beq.n	8001558 <HAL_PCD_Start+0x26>
 800153e:	2301      	movs	r3, #1
 8001540:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001544:	6800      	ldr	r0, [r0, #0]
 8001546:	f002 fc51 	bl	8003dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800154a:	6820      	ldr	r0, [r4, #0]
 800154c:	f002 ff18 	bl	8004380 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001550:	2000      	movs	r0, #0
 8001552:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290

  return HAL_OK;
}
 8001556:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001558:	2002      	movs	r0, #2
 800155a:	e7fc      	b.n	8001556 <HAL_PCD_Start+0x24>

0800155c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800155c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800155e:	f890 2290 	ldrb.w	r2, [r0, #656]	; 0x290
 8001562:	2a01      	cmp	r2, #1
{
 8001564:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001566:	d00a      	beq.n	800157e <HAL_PCD_SetAddress+0x22>
 8001568:	2201      	movs	r2, #1
 800156a:	f880 2290 	strb.w	r2, [r0, #656]	; 0x290
  hpcd->USB_Address = address;
 800156e:	7301      	strb	r1, [r0, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001570:	6800      	ldr	r0, [r0, #0]
 8001572:	f002 feff 	bl	8004374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001576:	2000      	movs	r0, #0
 8001578:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290

  return HAL_OK;
}
 800157c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800157e:	2002      	movs	r0, #2
 8001580:	e7fc      	b.n	800157c <HAL_PCD_SetAddress+0x20>
	...

08001584 <HAL_PCD_IRQHandler>:
{
 8001584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001588:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800158a:	6800      	ldr	r0, [r0, #0]
 800158c:	f002 ff03 	bl	8004396 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001590:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 8001594:	f000 8424 	beq.w	8001de0 <HAL_PCD_IRQHandler+0x85c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001598:	f8df 99b0 	ldr.w	r9, [pc, #2480]	; 8001f4c <HAL_PCD_IRQHandler+0x9c8>
 800159c:	f8df 89b0 	ldr.w	r8, [pc, #2480]	; 8001f50 <HAL_PCD_IRQHandler+0x9cc>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015a0:	6820      	ldr	r0, [r4, #0]
 80015a2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80015a6:	041a      	lsls	r2, r3, #16
 80015a8:	d402      	bmi.n	80015b0 <HAL_PCD_IRQHandler+0x2c>
}
 80015aa:	b003      	add	sp, #12
 80015ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80015b0:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80015b4:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80015b6:	f015 050f 	ands.w	r5, r5, #15
 80015ba:	f040 80bf 	bne.w	800173c <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015be:	f011 0110 	ands.w	r1, r1, #16
 80015c2:	d126      	bne.n	8001612 <HAL_PCD_IRQHandler+0x8e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015c4:	8803      	ldrh	r3, [r0, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	ea03 0309 	and.w	r3, r3, r9
 80015cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015d6:	7c22      	ldrb	r2, [r4, #16]
 80015d8:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80015dc:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015e0:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015e2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80015e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80015ec:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ee:	62e3      	str	r3, [r4, #44]	; 0x2c
        ep->xfer_buff += ep->xfer_count;
 80015f0:	6262      	str	r2, [r4, #36]	; 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015f2:	f004 f890 	bl	8005716 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015f6:	7b23      	ldrb	r3, [r4, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0d1      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
 80015fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015fe:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001600:	2a00      	cmp	r2, #0
 8001602:	d1cd      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001604:	7b23      	ldrb	r3, [r4, #12]
 8001606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800160e:	7322      	strb	r2, [r4, #12]
 8001610:	e7c6      	b.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001612:	8805      	ldrh	r5, [r0, #0]
 8001614:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001616:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800161a:	d020      	beq.n	800165e <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800161c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001620:	f894 2150 	ldrb.w	r2, [r4, #336]	; 0x150
 8001624:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001628:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800162c:	f504 7126 	add.w	r1, r4, #664	; 0x298
 8001630:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001634:	f8b4 2156 	ldrh.w	r2, [r4, #342]	; 0x156
 8001638:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800163c:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001640:	f003 f8fc 	bl	800483c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	8813      	ldrh	r3, [r2, #0]
 8001648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164c:	051b      	lsls	r3, r3, #20
 800164e:	0d1b      	lsrs	r3, r3, #20
 8001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001654:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001656:	4620      	mov	r0, r4
 8001658:	f004 f84e 	bl	80056f8 <HAL_PCD_SetupStageCallback>
 800165c:	e7a0      	b.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800165e:	0419      	lsls	r1, r3, #16
 8001660:	d59e      	bpl.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001662:	8803      	ldrh	r3, [r0, #0]
 8001664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001668:	051b      	lsls	r3, r3, #20
 800166a:	0d1b      	lsrs	r3, r3, #20
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001672:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001676:	f894 2150 	ldrb.w	r2, [r4, #336]	; 0x150
 800167a:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800167e:	fa11 f383 	uxtah	r3, r1, r3
 8001682:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168a:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800168e:	b18b      	cbz	r3, 80016b4 <HAL_PCD_IRQHandler+0x130>
 8001690:	f8d4 1164 	ldr.w	r1, [r4, #356]	; 0x164
 8001694:	b171      	cbz	r1, 80016b4 <HAL_PCD_IRQHandler+0x130>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001696:	f8b4 2156 	ldrh.w	r2, [r4, #342]	; 0x156
 800169a:	f003 f8cf 	bl	800483c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800169e:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 80016a2:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 80016a6:	4413      	add	r3, r2
 80016a8:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016ac:	4629      	mov	r1, r5
 80016ae:	4620      	mov	r0, r4
 80016b0:	f004 f828 	bl	8005704 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016b4:	6821      	ldr	r1, [r4, #0]
 80016b6:	880a      	ldrh	r2, [r1, #0]
 80016b8:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80016ba:	0512      	lsls	r2, r2, #20
 80016bc:	f53f af70 	bmi.w	80015a0 <HAL_PCD_IRQHandler+0x1c>
 80016c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016c8:	f43f af6a 	beq.w	80015a0 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016cc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80016d0:	f201 4006 	addw	r0, r1, #1030	; 0x406
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	5ac2      	ldrh	r2, [r0, r3]
 80016d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016dc:	52c2      	strh	r2, [r0, r3]
 80016de:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 80016e2:	2a3e      	cmp	r2, #62	; 0x3e
 80016e4:	d90c      	bls.n	8001700 <HAL_PCD_IRQHandler+0x17c>
 80016e6:	0955      	lsrs	r5, r2, #5
 80016e8:	06d7      	lsls	r7, r2, #27
 80016ea:	5ac2      	ldrh	r2, [r0, r3]
 80016ec:	bf08      	it	eq
 80016ee:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80016f2:	b292      	uxth	r2, r2
 80016f4:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80016f8:	ea42 0208 	orr.w	r2, r2, r8
 80016fc:	b292      	uxth	r2, r2
 80016fe:	e004      	b.n	800170a <HAL_PCD_IRQHandler+0x186>
 8001700:	b99a      	cbnz	r2, 800172a <HAL_PCD_IRQHandler+0x1a6>
 8001702:	5ac2      	ldrh	r2, [r0, r3]
 8001704:	b292      	uxth	r2, r2
 8001706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800170a:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800170c:	880b      	ldrh	r3, [r1, #0]
 800170e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800171e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001726:	800b      	strh	r3, [r1, #0]
 8001728:	e73a      	b.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800172a:	0855      	lsrs	r5, r2, #1
 800172c:	07d6      	lsls	r6, r2, #31
 800172e:	5ac2      	ldrh	r2, [r0, r3]
 8001730:	bf48      	it	mi
 8001732:	3501      	addmi	r5, #1
 8001734:	b292      	uxth	r2, r2
 8001736:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800173a:	e7df      	b.n	80016fc <HAL_PCD_IRQHandler+0x178>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800173c:	b22e      	sxth	r6, r5
 800173e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001742:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001744:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001746:	f140 80f0 	bpl.w	800192a <HAL_PCD_IRQHandler+0x3a6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800174a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800174e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001752:	051b      	lsls	r3, r3, #20
 8001754:	0d1b      	lsrs	r3, r3, #20
 8001756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 800175a:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800175c:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001760:	fb01 4105 	mla	r1, r1, r5, r4
 8001764:	f891 315c 	ldrb.w	r3, [r1, #348]	; 0x15c
 8001768:	b9bb      	cbnz	r3, 800179a <HAL_PCD_IRQHandler+0x216>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800176a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800176e:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 8001772:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001776:	fa1c f383 	uxtah	r3, ip, r3
 800177a:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 800177e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8001782:	f1ba 0f00 	cmp.w	sl, #0
 8001786:	f000 80b4 	beq.w	80018f2 <HAL_PCD_IRQHandler+0x36e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800178a:	f8b1 2156 	ldrh.w	r2, [r1, #342]	; 0x156
 800178e:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001790:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 8001794:	f003 f852 	bl	800483c <USB_ReadPMA>
 8001798:	e0ab      	b.n	80018f2 <HAL_PCD_IRQHandler+0x36e>
          if (ep->type == EP_TYPE_BULK)
 800179a:	f891 3153 	ldrb.w	r3, [r1, #339]	; 0x153
 800179e:	2b02      	cmp	r3, #2
 80017a0:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
 80017a4:	f040 8083 	bne.w	80018ae <HAL_PCD_IRQHandler+0x32a>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017a8:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50

    if (ep->xfer_len >= count)
 80017ac:	f8d1 2168 	ldr.w	r2, [r1, #360]	; 0x168
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017b0:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017b4:	fa1a fc8c 	uxtah	ip, sl, ip
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017b8:	f417 4b80 	ands.w	fp, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017bc:	4484      	add	ip, r0
 80017be:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017c2:	d03a      	beq.n	800183a <HAL_PCD_IRQHandler+0x2b6>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017c4:	f8bc a402 	ldrh.w	sl, [ip, #1026]	; 0x402
 80017c8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80017cc:	4592      	cmp	sl, r2
 80017ce:	d913      	bls.n	80017f8 <HAL_PCD_IRQHandler+0x274>
 80017d0:	2200      	movs	r2, #0
 80017d2:	f8c1 2168 	str.w	r2, [r1, #360]	; 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017d6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017e2:	0412      	lsls	r2, r2, #16
 80017e4:	0c12      	lsrs	r2, r2, #16
 80017e6:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80017ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80017f6:	e005      	b.n	8001804 <HAL_PCD_IRQHandler+0x280>
      ep->xfer_len -= count;
 80017f8:	eba2 020a 	sub.w	r2, r2, sl
 80017fc:	f8c1 2168 	str.w	r2, [r1, #360]	; 0x168
    if (ep->xfer_len == 0U)
 8001800:	2a00      	cmp	r2, #0
 8001802:	d0e8      	beq.n	80017d6 <HAL_PCD_IRQHandler+0x252>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001804:	f1be 0f00 	cmp.w	lr, #0
 8001808:	d00d      	beq.n	8001826 <HAL_PCD_IRQHandler+0x2a2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800180a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800180e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001812:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001816:	0412      	lsls	r2, r2, #16
 8001818:	0c12      	lsrs	r2, r2, #16
 800181a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001822:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001826:	f1ba 0f00 	cmp.w	sl, #0
 800182a:	d062      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x36e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800182c:	2128      	movs	r1, #40	; 0x28
 800182e:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001832:	f8b1 2158 	ldrh.w	r2, [r1, #344]	; 0x158
 8001836:	4653      	mov	r3, sl
 8001838:	e7aa      	b.n	8001790 <HAL_PCD_IRQHandler+0x20c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800183a:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 800183e:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8001842:	4592      	cmp	sl, r2
 8001844:	d912      	bls.n	800186c <HAL_PCD_IRQHandler+0x2e8>
 8001846:	f8c1 b168 	str.w	fp, [r1, #360]	; 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800184a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800184e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001852:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001856:	0412      	lsls	r2, r2, #16
 8001858:	0c12      	lsrs	r2, r2, #16
 800185a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800185e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001866:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 800186a:	e005      	b.n	8001878 <HAL_PCD_IRQHandler+0x2f4>
      ep->xfer_len -= count;
 800186c:	eba2 020a 	sub.w	r2, r2, sl
 8001870:	f8c1 2168 	str.w	r2, [r1, #360]	; 0x168
    if (ep->xfer_len == 0U)
 8001874:	2a00      	cmp	r2, #0
 8001876:	d0e8      	beq.n	800184a <HAL_PCD_IRQHandler+0x2c6>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001878:	f1be 0f00 	cmp.w	lr, #0
 800187c:	d10d      	bne.n	800189a <HAL_PCD_IRQHandler+0x316>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800187e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001882:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001886:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800188a:	0412      	lsls	r2, r2, #16
 800188c:	0c12      	lsrs	r2, r2, #16
 800188e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001892:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001896:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 800189a:	f1ba 0f00 	cmp.w	sl, #0
 800189e:	d028      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x36e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018a0:	2128      	movs	r1, #40	; 0x28
 80018a2:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018a6:	f8b1 215a 	ldrh.w	r2, [r1, #346]	; 0x15a
 80018aa:	4653      	mov	r3, sl
 80018ac:	e770      	b.n	8001790 <HAL_PCD_IRQHandler+0x20c>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ba:	0412      	lsls	r2, r2, #16
 80018bc:	0c12      	lsrs	r2, r2, #16
 80018be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018c2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80018c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018ca:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 80018ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018d2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018da:	d05b      	beq.n	8001994 <HAL_PCD_IRQHandler+0x410>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018dc:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80018e0:	fa1c f383 	uxtah	r3, ip, r3
 80018e4:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80018e8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80018ec:	f1ba 0f00 	cmp.w	sl, #0
 80018f0:	d19f      	bne.n	8001832 <HAL_PCD_IRQHandler+0x2ae>
        ep->xfer_count += count;
 80018f2:	2128      	movs	r1, #40	; 0x28
 80018f4:	fb01 4305 	mla	r3, r1, r5, r4
 80018f8:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80018fc:	4452      	add	r2, sl
 80018fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        ep->xfer_buff += count;
 8001902:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8001906:	4452      	add	r2, sl
 8001908:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800190c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8001910:	b11a      	cbz	r2, 800191a <HAL_PCD_IRQHandler+0x396>
 8001912:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001916:	459a      	cmp	sl, r3
 8001918:	d248      	bcs.n	80019ac <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800191a:	2328      	movs	r3, #40	; 0x28
 800191c:	fb03 4305 	mla	r3, r3, r5, r4
 8001920:	4620      	mov	r0, r4
 8001922:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
 8001926:	f003 feed 	bl	8005704 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800192a:	063b      	lsls	r3, r7, #24
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800192c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800192e:	f57f ae37 	bpl.w	80015a0 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001932:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8001936:	b29b      	uxth	r3, r3
 8001938:	ea03 0309 	and.w	r3, r3, r9
 800193c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001940:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001944:	2328      	movs	r3, #40	; 0x28
 8001946:	fb03 4c05 	mla	ip, r3, r5, r4
 800194a:	f89c 2013 	ldrb.w	r2, [ip, #19]
 800194e:	2a01      	cmp	r2, #1
 8001950:	d15f      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x48e>
          ep->xfer_len = 0U;
 8001952:	fb05 3303 	mla	r3, r5, r3, r3
 8001956:	2200      	movs	r2, #0
 8001958:	50e2      	str	r2, [r4, r3]
          if (ep->doublebuffer != 0U)
 800195a:	f89c 301c 	ldrb.w	r3, [ip, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d039      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x452>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001962:	f017 0740 	ands.w	r7, r7, #64	; 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001966:	f89c 3011 	ldrb.w	r3, [ip, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800196a:	d03c      	beq.n	80019e6 <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800196c:	bb33      	cbnz	r3, 80019bc <HAL_PCD_IRQHandler+0x438>
 800196e:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8001972:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001976:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800197a:	fa10 f383 	uxtah	r3, r0, r3
 800197e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	b292      	uxth	r2, r2
 800198e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001992:	e01f      	b.n	80019d4 <HAL_PCD_IRQHandler+0x450>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001994:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001998:	fa1c f383 	uxtah	r3, ip, r3
 800199c:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80019a0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80019a4:	f1ba 0f00 	cmp.w	sl, #0
 80019a8:	d0a3      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x36e>
 80019aa:	e77c      	b.n	80018a6 <HAL_PCD_IRQHandler+0x322>
        ep = &hpcd->OUT_ep[epindex];
 80019ac:	fb01 4105 	mla	r1, r1, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019b0:	6820      	ldr	r0, [r4, #0]
 80019b2:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80019b6:	f002 fd01 	bl	80043bc <USB_EPStartXfer>
 80019ba:	e7b6      	b.n	800192a <HAL_PCD_IRQHandler+0x3a6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10a      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x452>
 80019c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019c4:	f89c 1010 	ldrb.w	r1, [ip, #16]
 80019c8:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80019cc:	fa10 f383 	uxtah	r3, r0, r3
 80019d0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80019d4:	801a      	strh	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019d6:	2328      	movs	r3, #40	; 0x28
 80019d8:	fb03 4305 	mla	r3, r3, r5, r4
 80019dc:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019de:	4620      	mov	r0, r4
 80019e0:	f003 fe99 	bl	8005716 <HAL_PCD_DataInStageCallback>
 80019e4:	e5dc      	b.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019e6:	b933      	cbnz	r3, 80019f6 <HAL_PCD_IRQHandler+0x472>
 80019e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019ec:	f89c 2010 	ldrb.w	r2, [ip, #16]
 80019f0:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80019f4:	e7c1      	b.n	800197a <HAL_PCD_IRQHandler+0x3f6>
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d1ed      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x452>
 80019fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019fe:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8001a02:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001a06:	fa10 f383 	uxtah	r3, r0, r3
 8001a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a0e:	801f      	strh	r7, [r3, #0]
 8001a10:	e7e1      	b.n	80019d6 <HAL_PCD_IRQHandler+0x452>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a12:	eb06 0686 	add.w	r6, r6, r6, lsl #2
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a16:	f89c 1010 	ldrb.w	r1, [ip, #16]
 8001a1a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8001a1e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a22:	f417 7b80 	ands.w	fp, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8001a26:	6ab3      	ldr	r3, [r6, #40]	; 0x28
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a28:	460a      	mov	r2, r1
 8001a2a:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a2e:	d11d      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x4e8>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a30:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a34:	fa10 f282 	uxtah	r2, r0, r2
 8001a38:	4452      	add	r2, sl
 8001a3a:	f8b2 2402 	ldrh.w	r2, [r2, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 8001a3e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d302      	bcc.n	8001a4c <HAL_PCD_IRQHandler+0x4c8>
 8001a46:	f8c6 b028 	str.w	fp, [r6, #40]	; 0x28
 8001a4a:	e7c8      	b.n	80019de <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	62b3      	str	r3, [r6, #40]	; 0x28
              ep->xfer_buff += TxPctSize;
 8001a50:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8001a54:	4413      	add	r3, r2
 8001a56:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
              ep->xfer_count += TxPctSize;
 8001a5a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
        ep = &hpcd->IN_ep[epindex];
 8001a5c:	f10e 0110 	add.w	r1, lr, #16
              ep->xfer_count += TxPctSize;
 8001a60:	4413      	add	r3, r2
 8001a62:	62f3      	str	r3, [r6, #44]	; 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a64:	4421      	add	r1, r4
 8001a66:	f002 fca9 	bl	80043bc <USB_EPStartXfer>
 8001a6a:	e599      	b.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a6c:	f017 0a40 	ands.w	sl, r7, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a70:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001a74:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a78:	f000 80da 	beq.w	8001c30 <HAL_PCD_IRQHandler+0x6ac>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a7c:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8001a80:	fa1e fc8c 	uxtah	ip, lr, ip
 8001a84:	b2bf      	uxth	r7, r7
 8001a86:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 8001a8a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001a8e:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 8001a90:	bf34      	ite	cc
 8001a92:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8001a96:	2300      	movcs	r3, #0
 8001a98:	62b3      	str	r3, [r6, #40]	; 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d154      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x5c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a9e:	2628      	movs	r6, #40	; 0x28
 8001aa0:	fb06 4605 	mla	r6, r6, r5, r4
 8001aa4:	7c76      	ldrb	r6, [r6, #17]
 8001aa6:	2e00      	cmp	r6, #0
 8001aa8:	d13d      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x5a2>
 8001aaa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001aae:	fa1e f383 	uxtah	r3, lr, r3
 8001ab2:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 8001ab6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001aba:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
 8001abe:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 8001ac2:	b2b6      	uxth	r6, r6
 8001ac4:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001ac8:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001acc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ad0:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001ad4:	fa10 f083 	uxtah	r0, r0, r3
 8001ad8:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae0:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8001ae4:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aee:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001af2:	4620      	mov	r0, r4
 8001af4:	f003 fe0f 	bl	8005716 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	f000 80da 	beq.w	8001cb2 <HAL_PCD_IRQHandler+0x72e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001afe:	2328      	movs	r3, #40	; 0x28
 8001b00:	fb03 4305 	mla	r3, r3, r5, r4
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	7c19      	ldrb	r1, [r3, #16]
 8001b08:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b20:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001b24:	e0c5      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x72e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b26:	2e01      	cmp	r6, #1
 8001b28:	d1e3      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x56e>
 8001b2a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001b2e:	fa1e f686 	uxtah	r6, lr, r6
 8001b32:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b36:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001b3a:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001b3e:	fa10 f686 	uxtah	r6, r0, r6
 8001b42:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
 8001b46:	e7d4      	b.n	8001af2 <HAL_PCD_IRQHandler+0x56e>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b48:	b16f      	cbz	r7, 8001b66 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b4a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b62:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001b66:	2728      	movs	r7, #40	; 0x28
 8001b68:	fb07 4705 	mla	r7, r7, r5, r4
 8001b6c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	f040 809e 	bne.w	8001cb2 <HAL_PCD_IRQHandler+0x72e>
        ep->xfer_buff += TxPctSize;
 8001b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b78:	4461      	add	r1, ip
 8001b7a:	6279      	str	r1, [r7, #36]	; 0x24
        ep->xfer_count += TxPctSize;
 8001b7c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001b7e:	4463      	add	r3, ip
 8001b80:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b84:	6a3e      	ldr	r6, [r7, #32]
 8001b86:	42b3      	cmp	r3, r6
 8001b88:	d323      	bcc.n	8001bd2 <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 8001b8a:	1b9b      	subs	r3, r3, r6
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b8e:	2328      	movs	r3, #40	; 0x28
 8001b90:	fb03 4305 	mla	r3, r3, r5, r4
 8001b94:	7c5f      	ldrb	r7, [r3, #17]
 8001b96:	b2b3      	uxth	r3, r6
 8001b98:	2f00      	cmp	r7, #0
 8001b9a:	d140      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x69a>
 8001b9c:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8001ba0:	fa1e f787 	uxtah	r7, lr, r7
 8001ba4:	2e3e      	cmp	r6, #62	; 0x3e
 8001ba6:	f837 c032 	ldrh.w	ip, [r7, r2, lsl #3]
 8001baa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001bae:	f827 c032 	strh.w	ip, [r7, r2, lsl #3]
 8001bb2:	d919      	bls.n	8001be8 <HAL_PCD_IRQHandler+0x664>
 8001bb4:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8001bb8:	06f6      	lsls	r6, r6, #27
 8001bba:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001bbe:	bf08      	it	eq
 8001bc0:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8001bc4:	b2b6      	uxth	r6, r6
 8001bc6:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8001bca:	ea46 0608 	orr.w	r6, r6, r8
 8001bce:	b2b6      	uxth	r6, r6
 8001bd0:	e010      	b.n	8001bf4 <HAL_PCD_IRQHandler+0x670>
        else if (ep->xfer_len_db == 0U)
 8001bd2:	b91b      	cbnz	r3, 8001bdc <HAL_PCD_IRQHandler+0x658>
          ep->xfer_fill_db = 0U;
 8001bd4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    if (ep->xfer_len > TxPctSize)
 8001bd8:	4666      	mov	r6, ip
 8001bda:	e7d8      	b.n	8001b8e <HAL_PCD_IRQHandler+0x60a>
          ep->xfer_fill_db = 0U;
 8001bdc:	2600      	movs	r6, #0
 8001bde:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
          ep->xfer_len_db = 0U;
 8001be2:	633e      	str	r6, [r7, #48]	; 0x30
 8001be4:	461e      	mov	r6, r3
 8001be6:	e7d2      	b.n	8001b8e <HAL_PCD_IRQHandler+0x60a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001be8:	b96e      	cbnz	r6, 8001c06 <HAL_PCD_IRQHandler+0x682>
 8001bea:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001bee:	b2b6      	uxth	r6, r6
 8001bf0:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001bf4:	f827 6032 	strh.w	r6, [r7, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001bf8:	2228      	movs	r2, #40	; 0x28
 8001bfa:	fb02 4205 	mla	r2, r2, r5, r4
 8001bfe:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001c00:	f002 fbcd 	bl	800439e <USB_WritePMA>
 8001c04:	e055      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x72e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c06:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 8001c0a:	07f6      	lsls	r6, r6, #31
 8001c0c:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001c10:	bf48      	it	mi
 8001c12:	f10c 0c01 	addmi.w	ip, ip, #1
 8001c16:	b2b6      	uxth	r6, r6
 8001c18:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8001c1c:	e7d7      	b.n	8001bce <HAL_PCD_IRQHandler+0x64a>
 8001c1e:	2f01      	cmp	r7, #1
 8001c20:	bf02      	ittt	eq
 8001c22:	f8b0 6050 	ldrheq.w	r6, [r0, #80]	; 0x50
 8001c26:	fa1e f686 	uxtaheq	r6, lr, r6
 8001c2a:	f826 3032 	strheq.w	r3, [r6, r2, lsl #3]
 8001c2e:	e7e3      	b.n	8001bf8 <HAL_PCD_IRQHandler+0x674>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c30:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8001c34:	fa1e fc8c 	uxtah	ip, lr, ip
 8001c38:	b2bf      	uxth	r7, r7
 8001c3a:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 8001c3e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001c42:	459c      	cmp	ip, r3
      ep->xfer_len -= TxPctSize;
 8001c44:	bf94      	ite	ls
 8001c46:	eba3 030c 	subls.w	r3, r3, ip
      ep->xfer_len = 0U;
 8001c4a:	4653      	movhi	r3, sl
 8001c4c:	62b3      	str	r3, [r6, #40]	; 0x28
    if (ep->xfer_len == 0U)
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d155      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x77a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c52:	2628      	movs	r6, #40	; 0x28
 8001c54:	fb06 4605 	mla	r6, r6, r5, r4
 8001c58:	7c76      	ldrb	r6, [r6, #17]
 8001c5a:	2e00      	cmp	r6, #0
 8001c5c:	d13e      	bne.n	8001cdc <HAL_PCD_IRQHandler+0x758>
 8001c5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001c62:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8001c66:	fa16 f383 	uxtah	r3, r6, r3
 8001c6a:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 8001c6e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001c72:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
 8001c76:	f833 6031 	ldrh.w	r6, [r3, r1, lsl #3]
 8001c7a:	b2b6      	uxth	r6, r6
 8001c7c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001c80:	f823 6031 	strh.w	r6, [r3, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c84:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001c88:	fa1e f383 	uxtah	r3, lr, r3
 8001c8c:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
 8001c90:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001c94:	f823 0031 	strh.w	r0, [r3, r1, lsl #3]
 8001c98:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
 8001c9c:	b280      	uxth	r0, r0
 8001c9e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001ca2:	f823 0031 	strh.w	r0, [r3, r1, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f003 fd35 	bl	8005716 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001cac:	2f00      	cmp	r7, #0
 8001cae:	f43f af26 	beq.w	8001afe <HAL_PCD_IRQHandler+0x57a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001cb2:	2328      	movs	r3, #40	; 0x28
 8001cb4:	fb03 4505 	mla	r5, r3, r5, r4
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	7c29      	ldrb	r1, [r5, #16]
 8001cbc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cca:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001cda:	e461      	b.n	80015a0 <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cdc:	2e01      	cmp	r6, #1
 8001cde:	d1e2      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x722>
 8001ce0:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001ce4:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8001ce8:	fa1c f686 	uxtah	r6, ip, r6
 8001cec:	f826 3031 	strh.w	r3, [r6, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cf0:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8001cf4:	fa1e f080 	uxtah	r0, lr, r0
 8001cf8:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8001cfc:	e7d3      	b.n	8001ca6 <HAL_PCD_IRQHandler+0x722>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001cfe:	b96f      	cbnz	r7, 8001d1c <HAL_PCD_IRQHandler+0x798>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d00:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001d1c:	2728      	movs	r7, #40	; 0x28
 8001d1e:	fb07 4705 	mla	r7, r7, r5, r4
 8001d22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d1c3      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x72e>
        ep->xfer_buff += TxPctSize;
 8001d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d2c:	4461      	add	r1, ip
 8001d2e:	6279      	str	r1, [r7, #36]	; 0x24
        ep->xfer_count += TxPctSize;
 8001d30:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001d32:	4463      	add	r3, ip
 8001d34:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	6a3e      	ldr	r6, [r7, #32]
 8001d3a:	42b3      	cmp	r3, r6
 8001d3c:	d323      	bcc.n	8001d86 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 8001d3e:	1b9b      	subs	r3, r3, r6
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d42:	2328      	movs	r3, #40	; 0x28
 8001d44:	fb03 4305 	mla	r3, r3, r5, r4
 8001d48:	7c5f      	ldrb	r7, [r3, #17]
 8001d4a:	b2b3      	uxth	r3, r6
 8001d4c:	2f00      	cmp	r7, #0
 8001d4e:	d13e      	bne.n	8001dce <HAL_PCD_IRQHandler+0x84a>
 8001d50:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8001d54:	fa1e f787 	uxtah	r7, lr, r7
 8001d58:	2e3e      	cmp	r6, #62	; 0x3e
 8001d5a:	f837 c032 	ldrh.w	ip, [r7, r2, lsl #3]
 8001d5e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001d62:	f827 c032 	strh.w	ip, [r7, r2, lsl #3]
 8001d66:	d919      	bls.n	8001d9c <HAL_PCD_IRQHandler+0x818>
 8001d68:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8001d6c:	06f6      	lsls	r6, r6, #27
 8001d6e:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001d72:	bf08      	it	eq
 8001d74:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8001d78:	b2b6      	uxth	r6, r6
 8001d7a:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8001d7e:	ea46 0608 	orr.w	r6, r6, r8
 8001d82:	b2b6      	uxth	r6, r6
 8001d84:	e010      	b.n	8001da8 <HAL_PCD_IRQHandler+0x824>
        else if (ep->xfer_len_db == 0U)
 8001d86:	b91b      	cbnz	r3, 8001d90 <HAL_PCD_IRQHandler+0x80c>
          ep->xfer_fill_db = 0U;
 8001d88:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    if (ep->xfer_len >= TxPctSize)
 8001d8c:	4666      	mov	r6, ip
 8001d8e:	e7d8      	b.n	8001d42 <HAL_PCD_IRQHandler+0x7be>
          ep->xfer_len_db = 0U;
 8001d90:	2600      	movs	r6, #0
 8001d92:	633e      	str	r6, [r7, #48]	; 0x30
          ep->xfer_fill_db = 0;
 8001d94:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
 8001d98:	461e      	mov	r6, r3
 8001d9a:	e7d2      	b.n	8001d42 <HAL_PCD_IRQHandler+0x7be>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d9c:	b95e      	cbnz	r6, 8001db6 <HAL_PCD_IRQHandler+0x832>
 8001d9e:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001da2:	b2b6      	uxth	r6, r6
 8001da4:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8001da8:	f827 6032 	strh.w	r6, [r7, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001dac:	2228      	movs	r2, #40	; 0x28
 8001dae:	fb02 4205 	mla	r2, r2, r5, r4
 8001db2:	8b52      	ldrh	r2, [r2, #26]
 8001db4:	e724      	b.n	8001c00 <HAL_PCD_IRQHandler+0x67c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001db6:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 8001dba:	07f6      	lsls	r6, r6, #31
 8001dbc:	f837 6032 	ldrh.w	r6, [r7, r2, lsl #3]
 8001dc0:	bf48      	it	mi
 8001dc2:	f10c 0c01 	addmi.w	ip, ip, #1
 8001dc6:	b2b6      	uxth	r6, r6
 8001dc8:	ea46 268c 	orr.w	r6, r6, ip, lsl #10
 8001dcc:	e7d9      	b.n	8001d82 <HAL_PCD_IRQHandler+0x7fe>
 8001dce:	2f01      	cmp	r7, #1
 8001dd0:	bf02      	ittt	eq
 8001dd2:	f8b0 6050 	ldrheq.w	r6, [r0, #80]	; 0x50
 8001dd6:	fa1e f686 	uxtaheq	r6, lr, r6
 8001dda:	f826 3032 	strheq.w	r3, [r6, r2, lsl #3]
 8001dde:	e7e5      	b.n	8001dac <HAL_PCD_IRQHandler+0x828>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001de0:	0543      	lsls	r3, r0, #21
 8001de2:	d513      	bpl.n	8001e0c <HAL_PCD_IRQHandler+0x888>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001de4:	6822      	ldr	r2, [r4, #0]
 8001de6:	9101      	str	r1, [sp, #4]
 8001de8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8001df4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001df6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001dfa:	f003 fc98 	bl	800572e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dfe:	9901      	ldr	r1, [sp, #4]
 8001e00:	4620      	mov	r0, r4
}
 8001e02:	b003      	add	sp, #12
 8001e04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e08:	f7ff bba8 	b.w	800155c <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e0c:	0447      	lsls	r7, r0, #17
 8001e0e:	d50a      	bpl.n	8001e26 <HAL_PCD_IRQHandler+0x8a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001e22:	f7ff bbc2 	b.w	80015aa <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e26:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8001e2a:	d005      	beq.n	8001e38 <HAL_PCD_IRQHandler+0x8b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e36:	e7f0      	b.n	8001e1a <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e38:	04c6      	lsls	r6, r0, #19
 8001e3a:	d522      	bpl.n	8001e82 <HAL_PCD_IRQHandler+0x8fe>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e42:	f023 0304 	bic.w	r3, r3, #4
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e4e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e52:	f023 0308 	bic.w	r3, r3, #8
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001e5e:	f894 32c8 	ldrb.w	r3, [r4, #712]	; 0x2c8
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d104      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x8ec>
      hpcd->LPM_State = LPM_L0;
 8001e66:	f884 12c8 	strb.w	r1, [r4, #712]	; 0x2c8
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f003 fd38 	bl	80058e0 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001e70:	4620      	mov	r0, r4
 8001e72:	f003 fc7f 	bl	8005774 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e80:	e7cb      	b.n	8001e1a <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e82:	0505      	lsls	r5, r0, #20
 8001e84:	d51b      	bpl.n	8001ebe <HAL_PCD_IRQHandler+0x93a>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e96:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ea6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f003 fc4d 	bl	8005754 <HAL_PCD_SuspendCallback>
 8001eba:	f7ff bb76 	b.w	80015aa <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ebe:	0601      	lsls	r1, r0, #24
 8001ec0:	d52b      	bpl.n	8001f1a <HAL_PCD_IRQHandler+0x996>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ecc:	0412      	lsls	r2, r2, #16
 8001ece:	0c12      	lsrs	r2, r2, #16
 8001ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ed4:	f894 22c8 	ldrb.w	r2, [r4, #712]	; 0x2c8
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	d1eb      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x930>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001edc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	f042 0204 	orr.w	r2, r2, #4
 8001ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eea:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 8001ef4:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8001efa:	f884 12c8 	strb.w	r1, [r4, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001efe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f02:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8001f06:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f0a:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f0c:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
}
 8001f10:	b003      	add	sp, #12
 8001f12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f16:	f003 bce3 	b.w	80058e0 <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f1a:	0582      	lsls	r2, r0, #22
 8001f1c:	d50d      	bpl.n	8001f3a <HAL_PCD_IRQHandler+0x9b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001f30:	4620      	mov	r0, r4
 8001f32:	f003 fbf8 	bl	8005726 <HAL_PCD_SOFCallback>
    return;
 8001f36:	f7ff bb38 	b.w	80015aa <HAL_PCD_IRQHandler+0x26>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f3a:	05c3      	lsls	r3, r0, #23
 8001f3c:	f57f ab35 	bpl.w	80015aa <HAL_PCD_IRQHandler+0x26>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f4a:	e766      	b.n	8001e1a <HAL_PCD_IRQHandler+0x896>
 8001f4c:	ffff8f0f 	.word	0xffff8f0f
 8001f50:	ffff8000 	.word	0xffff8000

08001f54 <HAL_PCD_EP_Open>:
{
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	f001 0607 	and.w	r6, r1, #7
 8001f5a:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001f5e:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001f62:	4605      	mov	r5, r0
 8001f64:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8001f68:	f04f 0028 	mov.w	r0, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001f6c:	d01b      	beq.n	8001fa6 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8001f6e:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f72:	f104 0110 	add.w	r1, r4, #16
    ep->is_in = 1U;
 8001f76:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f78:	4429      	add	r1, r5
    ep->is_in = 1U;
 8001f7a:	7444      	strb	r4, [r0, #17]
  if (ep_type == EP_TYPE_BULK)
 8001f7c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8001f7e:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8001f80:	bf04      	itt	eq
 8001f82:	2300      	moveq	r3, #0
 8001f84:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f86:	700e      	strb	r6, [r1, #0]
  ep->maxpacket = ep_mps;
 8001f88:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8001f8a:	f895 3290 	ldrb.w	r3, [r5, #656]	; 0x290
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d012      	beq.n	8001fb8 <HAL_PCD_EP_Open+0x64>
 8001f92:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f94:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001f96:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f9a:	f001 ff4b 	bl	8003e34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f885 0290 	strb.w	r0, [r5, #656]	; 0x290
}
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001fa6:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	f504 71a8 	add.w	r1, r4, #336	; 0x150
    ep->is_in = 0U;
 8001fae:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	4429      	add	r1, r5
    ep->is_in = 0U;
 8001fb2:	f880 4151 	strb.w	r4, [r0, #337]	; 0x151
 8001fb6:	e7e1      	b.n	8001f7c <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
 8001fb8:	2002      	movs	r0, #2
 8001fba:	e7f3      	b.n	8001fa4 <HAL_PCD_EP_Open+0x50>

08001fbc <HAL_PCD_EP_Close>:
{
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	f001 0007 	and.w	r0, r1, #7
 8001fc4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001fc8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fcc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001fd0:	f04f 0228 	mov.w	r2, #40	; 0x28
 8001fd4:	d015      	beq.n	8002002 <HAL_PCD_EP_Close+0x46>
    ep->is_in = 1U;
 8001fd6:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8001fde:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001fe2:	7453      	strb	r3, [r2, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe4:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8001fe6:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d012      	beq.n	8002014 <HAL_PCD_EP_Close+0x58>
 8001fee:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001ff2:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff6:	f002 f881 	bl	80040fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 8002000:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 8002002:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002006:	f503 71a8 	add.w	r1, r3, #336	; 0x150
    ep->is_in = 0U;
 800200a:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200c:	4421      	add	r1, r4
    ep->is_in = 0U;
 800200e:	f882 3151 	strb.w	r3, [r2, #337]	; 0x151
 8002012:	e7e7      	b.n	8001fe4 <HAL_PCD_EP_Close+0x28>
  __HAL_LOCK(hpcd);
 8002014:	2002      	movs	r0, #2
 8002016:	e7f3      	b.n	8002000 <HAL_PCD_EP_Close+0x44>

08002018 <HAL_PCD_EP_Receive>:
{
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800201e:	2628      	movs	r6, #40	; 0x28
 8002020:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 8002024:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002026:	f884 1150 	strb.w	r1, [r4, #336]	; 0x150
  ep->xfer_len = len;
 800202a:	e9c4 2359 	strd	r2, r3, [r4, #356]	; 0x164
  ep->xfer_count = 0U;
 800202e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  ep->is_in = 0U;
 8002032:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002036:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 800203a:	6800      	ldr	r0, [r0, #0]
 800203c:	f002 f9be 	bl	80043bc <USB_EPStartXfer>
}
 8002040:	4628      	mov	r0, r5
 8002042:	bd70      	pop	{r4, r5, r6, pc}

08002044 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002044:	f001 0107 	and.w	r1, r1, #7
 8002048:	2328      	movs	r3, #40	; 0x28
 800204a:	fb03 0001 	mla	r0, r3, r1, r0
}
 800204e:	f8d0 016c 	ldr.w	r0, [r0, #364]	; 0x16c
 8002052:	4770      	bx	lr

08002054 <HAL_PCD_EP_Transmit>:
{
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	f001 0607 	and.w	r6, r1, #7
  ep->xfer_buff = pBuf;
 800205a:	2428      	movs	r4, #40	; 0x28
 800205c:	fb04 0406 	mla	r4, r4, r6, r0
 8002060:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8002064:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
 8002068:	6262      	str	r2, [r4, #36]	; 0x24
  ep->xfer_count = 0U;
 800206a:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 800206c:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206e:	4639      	mov	r1, r7
  ep->xfer_len = len;
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002072:	3110      	adds	r1, #16
  ep->xfer_fill_db = 1U;
 8002074:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  ep->xfer_len_db = len;
 8002078:	6323      	str	r3, [r4, #48]	; 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800207a:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 800207c:	62fd      	str	r5, [r7, #44]	; 0x2c
  ep->is_in = 1U;
 800207e:	7462      	strb	r2, [r4, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002080:	7426      	strb	r6, [r4, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002082:	f002 f99b 	bl	80043bc <USB_EPStartXfer>
}
 8002086:	4628      	mov	r0, r5
 8002088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800208a <HAL_PCD_EP_SetStall>:
{
 800208a:	b510      	push	{r4, lr}
 800208c:	4604      	mov	r4, r0
 800208e:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002092:	7923      	ldrb	r3, [r4, #4]
 8002094:	4283      	cmp	r3, r0
 8002096:	d326      	bcc.n	80020e6 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8002098:	f011 0f80 	tst.w	r1, #128	; 0x80
 800209c:	f04f 0228 	mov.w	r2, #40	; 0x28
 80020a0:	d017      	beq.n	80020d2 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a2:	fb02 4300 	mla	r3, r2, r0, r4
    ep->is_in = 1U;
 80020a6:	fb02 4200 	mla	r2, r2, r0, r4
 80020aa:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ac:	3310      	adds	r3, #16
    ep->is_in = 1U;
 80020ae:	7451      	strb	r1, [r2, #17]
  ep->is_stall = 1U;
 80020b0:	2201      	movs	r2, #1
 80020b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b4:	7018      	strb	r0, [r3, #0]
  __HAL_LOCK(hpcd);
 80020b6:	f894 1290 	ldrb.w	r1, [r4, #656]	; 0x290
 80020ba:	4291      	cmp	r1, r2
 80020bc:	d015      	beq.n	80020ea <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020be:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80020c0:	f884 2290 	strb.w	r2, [r4, #656]	; 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020c4:	4619      	mov	r1, r3
 80020c6:	f002 f8ec 	bl	80042a2 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 80020d0:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80020d2:	fb02 4301 	mla	r3, r2, r1, r4
    ep->is_in = 0U;
 80020d6:	fb02 4101 	mla	r1, r2, r1, r4
 80020da:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80020dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    ep->is_in = 0U;
 80020e0:	f881 2151 	strb.w	r2, [r1, #337]	; 0x151
 80020e4:	e7e4      	b.n	80020b0 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	e7f2      	b.n	80020d0 <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 80020ea:	2002      	movs	r0, #2
 80020ec:	e7f0      	b.n	80020d0 <HAL_PCD_EP_SetStall+0x46>

080020ee <HAL_PCD_EP_ClrStall>:
{
 80020ee:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020f0:	7902      	ldrb	r2, [r0, #4]
 80020f2:	f001 030f 	and.w	r3, r1, #15
 80020f6:	429a      	cmp	r2, r3
{
 80020f8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020fa:	d32b      	bcc.n	8002154 <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 80020fc:	f001 0007 	and.w	r0, r1, #7
 8002100:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002104:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002108:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800210c:	f04f 0228 	mov.w	r2, #40	; 0x28
 8002110:	d017      	beq.n	8002142 <HAL_PCD_EP_ClrStall+0x54>
    ep->is_in = 1U;
 8002112:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002116:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800211a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211c:	4421      	add	r1, r4
    ep->is_in = 1U;
 800211e:	7453      	strb	r3, [r2, #17]
  ep->is_stall = 0U;
 8002120:	2500      	movs	r5, #0
 8002122:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002124:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8002126:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 800212a:	2b01      	cmp	r3, #1
 800212c:	d014      	beq.n	8002158 <HAL_PCD_EP_ClrStall+0x6a>
 800212e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002130:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002132:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002136:	f002 f8d4 	bl	80042e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800213a:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
  return HAL_OK;
 800213e:	4628      	mov	r0, r5
}
 8002140:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002142:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002146:	f503 71a8 	add.w	r1, r3, #336	; 0x150
    ep->is_in = 0U;
 800214a:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214c:	4421      	add	r1, r4
    ep->is_in = 0U;
 800214e:	f882 3151 	strb.w	r3, [r2, #337]	; 0x151
 8002152:	e7e5      	b.n	8002120 <HAL_PCD_EP_ClrStall+0x32>
    return HAL_ERROR;
 8002154:	2001      	movs	r0, #1
 8002156:	e7f3      	b.n	8002140 <HAL_PCD_EP_ClrStall+0x52>
  __HAL_LOCK(hpcd);
 8002158:	2002      	movs	r0, #2
 800215a:	e7f1      	b.n	8002140 <HAL_PCD_EP_ClrStall+0x52>

0800215c <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800215c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	bf18      	it	ne
 8002162:	f001 0107 	andne.w	r1, r1, #7
{
 8002166:	b510      	push	{r4, lr}
 8002168:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216c:	bf13      	iteet	ne
 800216e:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002172:	fb04 0101 	mlaeq	r1, r4, r1, r0
 8002176:	f501 70a8 	addeq.w	r0, r1, #336	; 0x150
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217a:	3010      	addne	r0, #16
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800217c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800217e:	b91a      	cbnz	r2, 8002188 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 8002180:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002182:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002184:	2000      	movs	r0, #0
 8002186:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8002188:	2201      	movs	r2, #1
 800218a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800218c:	6083      	str	r3, [r0, #8]
 800218e:	e7f9      	b.n	8002184 <HAL_PCDEx_PMAConfig+0x28>

08002190 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8002190:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8002192:	2100      	movs	r1, #0
 8002194:	f880 12c8 	strb.w	r1, [r0, #712]	; 0x2c8
  hpcd->lpm_active = 1U;
 8002198:	2301      	movs	r3, #1
 800219a:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800219e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80021ac:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80021ba:	4608      	mov	r0, r1
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021c4:	bb30      	cbnz	r0, 8002214 <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c6:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80021ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80021d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021da:	d11a      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	2132      	movs	r1, #50	; 0x32
 80021ee:	434a      	muls	r2, r1
 80021f0:	491f      	ldr	r1, [pc, #124]	; (8002270 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80021f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80021f6:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f8:	6959      	ldr	r1, [r3, #20]
 80021fa:	0549      	lsls	r1, r1, #21
 80021fc:	d500      	bpl.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x40>
 80021fe:	b922      	cbnz	r2, 800220a <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	0558      	lsls	r0, r3, #21
 8002204:	d403      	bmi.n	800220e <HAL_PWREx_ControlVoltageScaling+0x4e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002206:	2000      	movs	r0, #0
}
 8002208:	4770      	bx	lr
        wait_loop_index--;
 800220a:	3a01      	subs	r2, #1
 800220c:	e7f4      	b.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 800220e:	2003      	movs	r0, #3
 8002210:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002212:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002214:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002218:	d11f      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800221a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800221e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002222:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800222e:	d1ea      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_PWREx_ControlVoltageScaling+0xac>)
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	2132      	movs	r1, #50	; 0x32
 8002242:	434a      	muls	r2, r1
 8002244:	490a      	ldr	r1, [pc, #40]	; (8002270 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002246:	fbb2 f2f1 	udiv	r2, r2, r1
 800224a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800224c:	6959      	ldr	r1, [r3, #20]
 800224e:	0549      	lsls	r1, r1, #21
 8002250:	d5d6      	bpl.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x40>
 8002252:	2a00      	cmp	r2, #0
 8002254:	d0d4      	beq.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8002256:	3a01      	subs	r2, #1
 8002258:	e7f8      	b.n	800224c <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800225a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800225e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e7cf      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x46>
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000
 800226c:	20000000 	.word	0x20000000
 8002270:	000f4240 	.word	0x000f4240

08002274 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002274:	4a02      	ldr	r2, [pc, #8]	; (8002280 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002276:	6893      	ldr	r3, [r2, #8]
 8002278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227c:	6093      	str	r3, [r2, #8]
}
 800227e:	4770      	bx	lr
 8002280:	40007000 	.word	0x40007000

08002284 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002284:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002286:	4c29      	ldr	r4, [pc, #164]	; (800232c <HAL_RCC_DeInit+0xa8>)
  tickstart = HAL_GetTick();
 8002288:	f7fe fda8 	bl	8000ddc <HAL_GetTick>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tickstart = HAL_GetTick();
 8002292:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002294:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	d531      	bpl.n	8002300 <HAL_RCC_DeInit+0x7c>
      return HAL_TIMEOUT;
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022a2:	6063      	str	r3, [r4, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022a4:	f7fe fd9a 	bl	8000ddc <HAL_GetTick>

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 80022a8:	2301      	movs	r3, #1
  tickstart = HAL_GetTick();
 80022aa:	4605      	mov	r5, r0
  RCC->CFGR = 0x00000001u;
 80022ac:	60a3      	str	r3, [r4, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ae:	f241 3688 	movw	r6, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80022b2:	68a3      	ldr	r3, [r4, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d129      	bne.n	8002310 <HAL_RCC_DeInit+0x8c>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCC_DeInit+0xac>)
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_RCC_DeInit+0xb0>)
 80022c0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_DeInit+0xb4>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	f7fe fd47 	bl	8000d58 <HAL_InitTick>
 80022ca:	4605      	mov	r5, r0
 80022cc:	bb60      	cbnz	r0, 8002328 <HAL_RCC_DeInit+0xa4>
  {
    return HAL_ERROR;
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80022ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d2:	6023      	str	r3, [r4, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80022d4:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022d6:	f7fe fd81 	bl	8000ddc <HAL_GetTick>
 80022da:	4606      	mov	r6, r0

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80022e2:	d11b      	bne.n	800231c <HAL_RCC_DeInit+0x98>
      return HAL_TIMEOUT;
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 80022e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e8:	60e2      	str	r2, [r4, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80022ea:	61a3      	str	r3, [r4, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	6223      	str	r3, [r4, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80022f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80022f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

  return HAL_OK;
 80022fe:	e005      	b.n	800230c <HAL_RCC_DeInit+0x88>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe fd6c 	bl	8000ddc <HAL_GetTick>
 8002304:	1b40      	subs	r0, r0, r5
 8002306:	2802      	cmp	r0, #2
 8002308:	d9c5      	bls.n	8002296 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 800230a:	2503      	movs	r5, #3
}
 800230c:	4628      	mov	r0, r5
 800230e:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7fe fd64 	bl	8000ddc <HAL_GetTick>
 8002314:	1b40      	subs	r0, r0, r5
 8002316:	42b0      	cmp	r0, r6
 8002318:	d9cb      	bls.n	80022b2 <HAL_RCC_DeInit+0x2e>
 800231a:	e7f6      	b.n	800230a <HAL_RCC_DeInit+0x86>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fd5e 	bl	8000ddc <HAL_GetTick>
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	2802      	cmp	r0, #2
 8002324:	d9da      	bls.n	80022dc <HAL_RCC_DeInit+0x58>
 8002326:	e7f0      	b.n	800230a <HAL_RCC_DeInit+0x86>
    return HAL_ERROR;
 8002328:	2501      	movs	r5, #1
 800232a:	e7ef      	b.n	800230c <HAL_RCC_DeInit+0x88>
 800232c:	40021000 	.word	0x40021000
 8002330:	20000000 	.word	0x20000000
 8002334:	00f42400 	.word	0x00f42400
 8002338:	20000028 	.word	0x20000028

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002340:	4604      	mov	r4, r0
 8002342:	b340      	cbz	r0, 8002396 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002344:	6803      	ldr	r3, [r0, #0]
 8002346:	07de      	lsls	r6, r3, #31
 8002348:	d414      	bmi.n	8002374 <HAL_RCC_OscConfig+0x38>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	079d      	lsls	r5, r3, #30
 800234e:	d45b      	bmi.n	8002408 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	0719      	lsls	r1, r3, #28
 8002354:	f100 80a4 	bmi.w	80024a0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	075a      	lsls	r2, r3, #29
 800235c:	f100 80cb 	bmi.w	80024f6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	069d      	lsls	r5, r3, #26
 8002364:	f100 8132 	bmi.w	80025cc <HAL_RCC_OscConfig+0x290>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002368:	69e0      	ldr	r0, [r4, #28]
 800236a:	2800      	cmp	r0, #0
 800236c:	f040 8160 	bne.w	8002630 <HAL_RCC_OscConfig+0x2f4>
      }
    }
  }
  }

  return HAL_OK;
 8002370:	2000      	movs	r0, #0
 8002372:	e028      	b.n	80023c6 <HAL_RCC_OscConfig+0x8a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002374:	4da1      	ldr	r5, [pc, #644]	; (80025fc <HAL_RCC_OscConfig+0x2c0>)
 8002376:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002378:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002382:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002386:	2b03      	cmp	r3, #3
 8002388:	d109      	bne.n	800239e <HAL_RCC_OscConfig+0x62>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	682b      	ldr	r3, [r5, #0]
 800238c:	0398      	lsls	r0, r3, #14
 800238e:	d5dc      	bpl.n	800234a <HAL_RCC_OscConfig+0xe>
 8002390:	6863      	ldr	r3, [r4, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1d9      	bne.n	800234a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8002396:	2001      	movs	r0, #1
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x8a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800239a:	2b08      	cmp	r3, #8
 800239c:	e7f4      	b.n	8002388 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	6863      	ldr	r3, [r4, #4]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d112      	bne.n	80023cc <HAL_RCC_OscConfig+0x90>
 80023a6:	682b      	ldr	r3, [r5, #0]
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023ae:	f7fe fd15 	bl	8000ddc <HAL_GetTick>
 80023b2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	0399      	lsls	r1, r3, #14
 80023b8:	d4c7      	bmi.n	800234a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ba:	f7fe fd0f 	bl	8000ddc <HAL_GetTick>
 80023be:	1b80      	subs	r0, r0, r6
 80023c0:	2864      	cmp	r0, #100	; 0x64
 80023c2:	d9f7      	bls.n	80023b4 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80023c4:	2003      	movs	r0, #3
}
 80023c6:	b002      	add	sp, #8
 80023c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d0:	d104      	bne.n	80023dc <HAL_RCC_OscConfig+0xa0>
 80023d2:	682b      	ldr	r3, [r5, #0]
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	602b      	str	r3, [r5, #0]
 80023da:	e7e4      	b.n	80023a6 <HAL_RCC_OscConfig+0x6a>
 80023dc:	682a      	ldr	r2, [r5, #0]
 80023de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023e2:	602a      	str	r2, [r5, #0]
 80023e4:	682a      	ldr	r2, [r5, #0]
 80023e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023ea:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1de      	bne.n	80023ae <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80023f0:	f7fe fcf4 	bl	8000ddc <HAL_GetTick>
 80023f4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f6:	682b      	ldr	r3, [r5, #0]
 80023f8:	039a      	lsls	r2, r3, #14
 80023fa:	d5a6      	bpl.n	800234a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7fe fcee 	bl	8000ddc <HAL_GetTick>
 8002400:	1b80      	subs	r0, r0, r6
 8002402:	2864      	cmp	r0, #100	; 0x64
 8002404:	d9f7      	bls.n	80023f6 <HAL_RCC_OscConfig+0xba>
 8002406:	e7dd      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002408:	4d7c      	ldr	r5, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x2c0>)
 800240a:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800240c:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d117      	bne.n	8002446 <HAL_RCC_OscConfig+0x10a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002416:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800241a:	2b02      	cmp	r3, #2
 800241c:	d115      	bne.n	800244a <HAL_RCC_OscConfig+0x10e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241e:	682b      	ldr	r3, [r5, #0]
 8002420:	055b      	lsls	r3, r3, #21
 8002422:	d502      	bpl.n	800242a <HAL_RCC_OscConfig+0xee>
 8002424:	68e3      	ldr	r3, [r4, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0b5      	beq.n	8002396 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	686b      	ldr	r3, [r5, #4]
 800242c:	6922      	ldr	r2, [r4, #16]
 800242e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002432:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002436:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002438:	4b71      	ldr	r3, [pc, #452]	; (8002600 <HAL_RCC_OscConfig+0x2c4>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	f7fe fc8c 	bl	8000d58 <HAL_InitTick>
 8002440:	2800      	cmp	r0, #0
 8002442:	d085      	beq.n	8002350 <HAL_RCC_OscConfig+0x14>
 8002444:	e7a7      	b.n	8002396 <HAL_RCC_OscConfig+0x5a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002446:	2b04      	cmp	r3, #4
 8002448:	e7e8      	b.n	800241c <HAL_RCC_OscConfig+0xe0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244a:	68e3      	ldr	r3, [r4, #12]
 800244c:	b1bb      	cbz	r3, 800247e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_ENABLE();
 800244e:	682b      	ldr	r3, [r5, #0]
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002456:	f7fe fcc1 	bl	8000ddc <HAL_GetTick>
 800245a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	055f      	lsls	r7, r3, #21
 8002460:	d507      	bpl.n	8002472 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	686b      	ldr	r3, [r5, #4]
 8002464:	6922      	ldr	r2, [r4, #16]
 8002466:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800246a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800246e:	606b      	str	r3, [r5, #4]
 8002470:	e76e      	b.n	8002350 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fcb3 	bl	8000ddc <HAL_GetTick>
 8002476:	1b80      	subs	r0, r0, r6
 8002478:	2802      	cmp	r0, #2
 800247a:	d9ef      	bls.n	800245c <HAL_RCC_OscConfig+0x120>
 800247c:	e7a2      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800247e:	682b      	ldr	r3, [r5, #0]
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002486:	f7fe fca9 	bl	8000ddc <HAL_GetTick>
 800248a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	0558      	lsls	r0, r3, #21
 8002490:	f57f af5e 	bpl.w	8002350 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fca2 	bl	8000ddc <HAL_GetTick>
 8002498:	1b80      	subs	r0, r0, r6
 800249a:	2802      	cmp	r0, #2
 800249c:	d9f6      	bls.n	800248c <HAL_RCC_OscConfig+0x150>
 800249e:	e791      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a0:	6963      	ldr	r3, [r4, #20]
 80024a2:	4d56      	ldr	r5, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x2c0>)
 80024a4:	b19b      	cbz	r3, 80024ce <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80024a6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024b2:	f7fe fc93 	bl	8000ddc <HAL_GetTick>
 80024b6:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80024bc:	079b      	lsls	r3, r3, #30
 80024be:	f53f af4b 	bmi.w	8002358 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c2:	f7fe fc8b 	bl	8000ddc <HAL_GetTick>
 80024c6:	1b80      	subs	r0, r0, r6
 80024c8:	2802      	cmp	r0, #2
 80024ca:	d9f5      	bls.n	80024b8 <HAL_RCC_OscConfig+0x17c>
 80024cc:	e77a      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80024ce:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024da:	f7fe fc7f 	bl	8000ddc <HAL_GetTick>
 80024de:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80024e4:	079f      	lsls	r7, r3, #30
 80024e6:	f57f af37 	bpl.w	8002358 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ea:	f7fe fc77 	bl	8000ddc <HAL_GetTick>
 80024ee:	1b80      	subs	r0, r0, r6
 80024f0:	2802      	cmp	r0, #2
 80024f2:	d9f5      	bls.n	80024e0 <HAL_RCC_OscConfig+0x1a4>
 80024f4:	e766      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024f6:	4d41      	ldr	r5, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x2c0>)
 80024f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80024fa:	00de      	lsls	r6, r3, #3
 80024fc:	d427      	bmi.n	800254e <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	65ab      	str	r3, [r5, #88]	; 0x58
 8002506:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002510:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002512:	4e3c      	ldr	r6, [pc, #240]	; (8002604 <HAL_RCC_OscConfig+0x2c8>)
 8002514:	6833      	ldr	r3, [r6, #0]
 8002516:	05d8      	lsls	r0, r3, #23
 8002518:	d51b      	bpl.n	8002552 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251a:	68a3      	ldr	r3, [r4, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d129      	bne.n	8002574 <HAL_RCC_OscConfig+0x238>
 8002520:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 800252c:	f7fe fc56 	bl	8000ddc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002534:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002536:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800253a:	079a      	lsls	r2, r3, #30
 800253c:	d540      	bpl.n	80025c0 <HAL_RCC_OscConfig+0x284>
    if (pwrclkchanged == SET)
 800253e:	2f00      	cmp	r7, #0
 8002540:	f43f af0e 	beq.w	8002360 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254a:	65ab      	str	r3, [r5, #88]	; 0x58
 800254c:	e708      	b.n	8002360 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2700      	movs	r7, #0
 8002550:	e7df      	b.n	8002512 <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002552:	6833      	ldr	r3, [r6, #0]
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800255a:	f7fe fc3f 	bl	8000ddc <HAL_GetTick>
 800255e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002560:	6833      	ldr	r3, [r6, #0]
 8002562:	05d9      	lsls	r1, r3, #23
 8002564:	d4d9      	bmi.n	800251a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe fc39 	bl	8000ddc <HAL_GetTick>
 800256a:	eba0 0008 	sub.w	r0, r0, r8
 800256e:	2802      	cmp	r0, #2
 8002570:	d9f6      	bls.n	8002560 <HAL_RCC_OscConfig+0x224>
 8002572:	e727      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	2b05      	cmp	r3, #5
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x24a>
 8002578:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002584:	e7cc      	b.n	8002520 <HAL_RCC_OscConfig+0x1e4>
 8002586:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8002592:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1c4      	bne.n	800252c <HAL_RCC_OscConfig+0x1f0>
      tickstart = HAL_GetTick();
 80025a2:	f7fe fc1b 	bl	8000ddc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025aa:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80025b0:	079b      	lsls	r3, r3, #30
 80025b2:	d5c4      	bpl.n	800253e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe fc12 	bl	8000ddc <HAL_GetTick>
 80025b8:	1b80      	subs	r0, r0, r6
 80025ba:	4540      	cmp	r0, r8
 80025bc:	d9f6      	bls.n	80025ac <HAL_RCC_OscConfig+0x270>
 80025be:	e701      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe fc0c 	bl	8000ddc <HAL_GetTick>
 80025c4:	1b80      	subs	r0, r0, r6
 80025c6:	4540      	cmp	r0, r8
 80025c8:	d9b5      	bls.n	8002536 <HAL_RCC_OscConfig+0x1fa>
 80025ca:	e6fb      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025cc:	69a3      	ldr	r3, [r4, #24]
 80025ce:	4d0b      	ldr	r5, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x2c0>)
 80025d0:	b1d3      	cbz	r3, 8002608 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 80025d2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80025de:	f7fe fbfd 	bl	8000ddc <HAL_GetTick>
 80025e2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80025e8:	0798      	lsls	r0, r3, #30
 80025ea:	f53f aebd 	bmi.w	8002368 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ee:	f7fe fbf5 	bl	8000ddc <HAL_GetTick>
 80025f2:	1b80      	subs	r0, r0, r6
 80025f4:	2802      	cmp	r0, #2
 80025f6:	d9f5      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2a8>
 80025f8:	e6e4      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	20000028 	.word	0x20000028
 8002604:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 8002608:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002614:	f7fe fbe2 	bl	8000ddc <HAL_GetTick>
 8002618:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800261a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800261e:	0799      	lsls	r1, r3, #30
 8002620:	f57f aea2 	bpl.w	8002368 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002624:	f7fe fbda 	bl	8000ddc <HAL_GetTick>
 8002628:	1b80      	subs	r0, r0, r6
 800262a:	2802      	cmp	r0, #2
 800262c:	d9f5      	bls.n	800261a <HAL_RCC_OscConfig+0x2de>
 800262e:	e6c9      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002630:	4d45      	ldr	r5, [pc, #276]	; (8002748 <HAL_RCC_OscConfig+0x40c>)
 8002632:	68ab      	ldr	r3, [r5, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d052      	beq.n	80026e2 <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_DISABLE();
 800263c:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800263e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002644:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002646:	d13a      	bne.n	80026be <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8002648:	f7fe fbc8 	bl	8000ddc <HAL_GetTick>
 800264c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264e:	682b      	ldr	r3, [r5, #0]
 8002650:	019a      	lsls	r2, r3, #6
 8002652:	d42e      	bmi.n	80026b2 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	68ea      	ldr	r2, [r5, #12]
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCC_OscConfig+0x410>)
 8002658:	4013      	ands	r3, r2
 800265a:	6a22      	ldr	r2, [r4, #32]
 800265c:	4313      	orrs	r3, r2
 800265e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002664:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002666:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800266a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800266c:	3a01      	subs	r2, #1
 800266e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002672:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002674:	0852      	lsrs	r2, r2, #1
 8002676:	3a01      	subs	r2, #1
 8002678:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800267c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800267e:	0852      	lsrs	r2, r2, #1
 8002680:	3a01      	subs	r2, #1
 8002682:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002686:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002690:	68eb      	ldr	r3, [r5, #12]
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002698:	f7fe fba0 	bl	8000ddc <HAL_GetTick>
 800269c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269e:	682b      	ldr	r3, [r5, #0]
 80026a0:	019b      	lsls	r3, r3, #6
 80026a2:	f53f ae65 	bmi.w	8002370 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fb99 	bl	8000ddc <HAL_GetTick>
 80026aa:	1b00      	subs	r0, r0, r4
 80026ac:	2802      	cmp	r0, #2
 80026ae:	d9f6      	bls.n	800269e <HAL_RCC_OscConfig+0x362>
 80026b0:	e688      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fe fb93 	bl	8000ddc <HAL_GetTick>
 80026b6:	1b80      	subs	r0, r0, r6
 80026b8:	2802      	cmp	r0, #2
 80026ba:	d9c8      	bls.n	800264e <HAL_RCC_OscConfig+0x312>
 80026bc:	e682      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80026be:	f7fe fb8d 	bl	8000ddc <HAL_GetTick>
 80026c2:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80026ca:	d104      	bne.n	80026d6 <HAL_RCC_OscConfig+0x39a>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026cc:	68e9      	ldr	r1, [r5, #12]
 80026ce:	4a20      	ldr	r2, [pc, #128]	; (8002750 <HAL_RCC_OscConfig+0x414>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	60ea      	str	r2, [r5, #12]
 80026d4:	e64c      	b.n	8002370 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fb81 	bl	8000ddc <HAL_GetTick>
 80026da:	1b00      	subs	r0, r0, r4
 80026dc:	2802      	cmp	r0, #2
 80026de:	d9f1      	bls.n	80026c4 <HAL_RCC_OscConfig+0x388>
 80026e0:	e670      	b.n	80023c4 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e2:	2801      	cmp	r0, #1
 80026e4:	f43f ae6f 	beq.w	80023c6 <HAL_RCC_OscConfig+0x8a>
      temp_pllckcfg = RCC->PLLCFGR;
 80026e8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	6a22      	ldr	r2, [r4, #32]
 80026ec:	f003 0103 	and.w	r1, r3, #3
 80026f0:	4291      	cmp	r1, r2
 80026f2:	f47f ae50 	bne.w	8002396 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026fc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002702:	f47f ae48 	bne.w	8002396 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002706:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002708:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002710:	f47f ae41 	bne.w	8002396 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002714:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002716:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800271a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800271e:	f47f ae3a 	bne.w	8002396 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002722:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002724:	0852      	lsrs	r2, r2, #1
 8002726:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800272a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800272c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002730:	f47f ae31 	bne.w	8002396 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002734:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002736:	0852      	lsrs	r2, r2, #1
 8002738:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800273c:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800273e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002742:	f43f ae15 	beq.w	8002370 <HAL_RCC_OscConfig+0x34>
 8002746:	e626      	b.n	8002396 <HAL_RCC_OscConfig+0x5a>
 8002748:	40021000 	.word	0x40021000
 800274c:	019f800c 	.word	0x019f800c
 8002750:	feeefffc 	.word	0xfeeefffc

08002754 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x60>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	f002 020c 	and.w	r2, r2, #12
 800275c:	2a04      	cmp	r2, #4
 800275e:	d023      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	f002 020c 	and.w	r2, r2, #12
 8002766:	2a08      	cmp	r2, #8
 8002768:	d020      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	f002 020c 	and.w	r2, r2, #12
 8002770:	2a0c      	cmp	r2, #12
 8002772:	d11d      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002774:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002776:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002778:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800277a:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277c:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002780:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 8002784:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002786:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800278a:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800278e:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002792:	bf0c      	ite	eq
 8002794:	4908      	ldreq	r1, [pc, #32]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002796:	4909      	ldrne	r1, [pc, #36]	; (80027bc <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002798:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800279a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800279c:	fbb1 f2f2 	udiv	r2, r1, r2
 80027a0:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 80027a2:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 80027a6:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80027a8:	4804      	ldr	r0, [pc, #16]	; (80027bc <HAL_RCC_GetSysClockFreq+0x68>)
 80027aa:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x64>)
 80027ae:	4770      	bx	lr
    sysclockfreq = 0U;
 80027b0:	2000      	movs	r0, #0
}
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000
 80027b8:	016e3600 	.word	0x016e3600
 80027bc:	00f42400 	.word	0x00f42400

080027c0 <HAL_RCC_ClockConfig>:
{
 80027c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027c4:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 80027c6:	4605      	mov	r5, r0
 80027c8:	b910      	cbnz	r0, 80027d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
}
 80027cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4a6d      	ldr	r2, [pc, #436]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	428b      	cmp	r3, r1
 80027da:	d345      	bcc.n	8002868 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027dc:	6829      	ldr	r1, [r5, #0]
 80027de:	f011 0801 	ands.w	r8, r1, #1
 80027e2:	d14c      	bne.n	800287e <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	682a      	ldr	r2, [r5, #0]
 80027e6:	0791      	lsls	r1, r2, #30
 80027e8:	f140 80a7 	bpl.w	800293a <HAL_RCC_ClockConfig+0x17a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	4b67      	ldr	r3, [pc, #412]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 80027ee:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f2:	bf1e      	ittt	ne
 80027f4:	6899      	ldrne	r1, [r3, #8]
 80027f6:	f441 61e0 	orrne.w	r1, r1, #1792	; 0x700
 80027fa:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027fe:	bf41      	itttt	mi
 8002800:	689a      	ldrmi	r2, [r3, #8]
 8002802:	f422 527c 	bicmi.w	r2, r2, #16128	; 0x3f00
 8002806:	f442 62e0 	orrmi.w	r2, r2, #1792	; 0x700
 800280a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	68a9      	ldr	r1, [r5, #8]
 8002810:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4c5b      	ldr	r4, [pc, #364]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	42b3      	cmp	r3, r6
 8002822:	f200 8093 	bhi.w	800294c <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002826:	682a      	ldr	r2, [r5, #0]
 8002828:	4c58      	ldr	r4, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 800282a:	f012 0f04 	tst.w	r2, #4
 800282e:	f040 80a3 	bne.w	8002978 <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	0713      	lsls	r3, r2, #28
 8002834:	d506      	bpl.n	8002844 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002836:	68a3      	ldr	r3, [r4, #8]
 8002838:	692a      	ldr	r2, [r5, #16]
 800283a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800283e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002842:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002844:	f7ff ff86 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002848:	68a3      	ldr	r3, [r4, #8]
 800284a:	4a51      	ldr	r2, [pc, #324]	; (8002990 <HAL_RCC_ClockConfig+0x1d0>)
 800284c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	40d8      	lsrs	r0, r3
 8002858:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <HAL_RCC_ClockConfig+0x1d4>)
 800285a:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800285c:	4b4e      	ldr	r3, [pc, #312]	; (8002998 <HAL_RCC_ClockConfig+0x1d8>)
 800285e:	6818      	ldr	r0, [r3, #0]
}
 8002860:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8002864:	f7fe ba78 	b.w	8000d58 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002868:	6813      	ldr	r3, [r2, #0]
 800286a:	f023 030f 	bic.w	r3, r3, #15
 800286e:	430b      	orrs	r3, r1
 8002870:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	428b      	cmp	r3, r1
 800287a:	d1a6      	bne.n	80027ca <HAL_RCC_ClockConfig+0xa>
 800287c:	e7ae      	b.n	80027dc <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	686f      	ldr	r7, [r5, #4]
 8002880:	4c42      	ldr	r4, [pc, #264]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 8002882:	2f03      	cmp	r7, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002884:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002886:	d149      	bne.n	800291c <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	d59e      	bpl.n	80027ca <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288c:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800288e:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002890:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8002894:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002896:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002898:	bf0c      	ite	eq
 800289a:	4840      	ldreq	r0, [pc, #256]	; (800299c <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800289c:	4840      	ldrne	r0, [pc, #256]	; (80029a0 <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800289e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028a2:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a6:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028a8:	fbb0 f2f2 	udiv	r2, r0, r2
 80028ac:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ae:	68e2      	ldr	r2, [r4, #12]
 80028b0:	f3c2 6241 	ubfx	r2, r2, #25, #2
 80028b4:	3201      	adds	r2, #1
 80028b6:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 80028b8:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 80028bc:	4a39      	ldr	r2, [pc, #228]	; (80029a4 <HAL_RCC_ClockConfig+0x1e4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d81a      	bhi.n	80028f8 <HAL_RCC_ClockConfig+0x138>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028c2:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	68a3      	ldr	r3, [r4, #8]
 80028c8:	f023 0303 	bic.w	r3, r3, #3
 80028cc:	433b      	orrs	r3, r7
 80028ce:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80028d0:	f7fe fa84 	bl	8000ddc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80028d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	68a3      	ldr	r3, [r4, #8]
 80028dc:	686a      	ldr	r2, [r5, #4]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028e6:	f43f af7d 	beq.w	80027e4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ea:	f7fe fa77 	bl	8000ddc <HAL_GetTick>
 80028ee:	1bc0      	subs	r0, r0, r7
 80028f0:	4548      	cmp	r0, r9
 80028f2:	d9f2      	bls.n	80028da <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 80028f4:	2003      	movs	r0, #3
 80028f6:	e769      	b.n	80027cc <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028f8:	68a3      	ldr	r3, [r4, #8]
 80028fa:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80028fe:	d004      	beq.n	800290a <HAL_RCC_ClockConfig+0x14a>
 8002900:	0788      	lsls	r0, r1, #30
 8002902:	d5de      	bpl.n	80028c2 <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002904:	68ab      	ldr	r3, [r5, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1db      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800290a:	68a3      	ldr	r3, [r4, #8]
 800290c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002916:	f04f 0880 	mov.w	r8, #128	; 0x80
 800291a:	e7d4      	b.n	80028c6 <HAL_RCC_ClockConfig+0x106>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291c:	2f02      	cmp	r7, #2
 800291e:	d109      	bne.n	8002934 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002920:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002924:	f43f af51 	beq.w	80027ca <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002928:	f7ff ff14 	bl	8002754 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCC_ClockConfig+0x1e4>)
 800292e:	4298      	cmp	r0, r3
 8002930:	d9c7      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x102>
 8002932:	e7ea      	b.n	800290a <HAL_RCC_ClockConfig+0x14a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002938:	e7f4      	b.n	8002924 <HAL_RCC_ClockConfig+0x164>
    if(hpre == RCC_SYSCLK_DIV2)
 800293a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800293e:	bf01      	itttt	eq
 8002940:	4a12      	ldreq	r2, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 8002942:	6893      	ldreq	r3, [r2, #8]
 8002944:	f023 03f0 	biceq.w	r3, r3, #240	; 0xf0
 8002948:	6093      	streq	r3, [r2, #8]
 800294a:	e765      	b.n	8002818 <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	f023 030f 	bic.w	r3, r3, #15
 8002952:	4333      	orrs	r3, r6
 8002954:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002956:	f7fe fa41 	bl	8000ddc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800295e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	42b3      	cmp	r3, r6
 8002968:	f43f af5d 	beq.w	8002826 <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7fe fa36 	bl	8000ddc <HAL_GetTick>
 8002970:	1bc0      	subs	r0, r0, r7
 8002972:	4540      	cmp	r0, r8
 8002974:	d9f4      	bls.n	8002960 <HAL_RCC_ClockConfig+0x1a0>
 8002976:	e7bd      	b.n	80028f4 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	68a3      	ldr	r3, [r4, #8]
 800297a:	68e9      	ldr	r1, [r5, #12]
 800297c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002980:	430b      	orrs	r3, r1
 8002982:	60a3      	str	r3, [r4, #8]
 8002984:	e755      	b.n	8002832 <HAL_RCC_ClockConfig+0x72>
 8002986:	bf00      	nop
 8002988:	40022000 	.word	0x40022000
 800298c:	40021000 	.word	0x40021000
 8002990:	080062b8 	.word	0x080062b8
 8002994:	20000000 	.word	0x20000000
 8002998:	20000028 	.word	0x20000028
 800299c:	016e3600 	.word	0x016e3600
 80029a0:	00f42400 	.word	0x00f42400
 80029a4:	04c4b400 	.word	0x04c4b400

080029a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029aa:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b6:	6810      	ldr	r0, [r2, #0]
 80029b8:	f003 031f 	and.w	r3, r3, #31
}
 80029bc:	40d8      	lsrs	r0, r3
 80029be:	4770      	bx	lr
 80029c0:	40021000 	.word	0x40021000
 80029c4:	080062c8 	.word	0x080062c8
 80029c8:	20000000 	.word	0x20000000

080029cc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80029ce:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80029d6:	5cd3      	ldrb	r3, [r2, r3]
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80029da:	6810      	ldr	r0, [r2, #0]
 80029dc:	f003 031f 	and.w	r3, r3, #31
}
 80029e0:	40d8      	lsrs	r0, r3
 80029e2:	4770      	bx	lr
 80029e4:	40021000 	.word	0x40021000
 80029e8:	080062c8 	.word	0x080062c8
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80029f4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029f6:	6800      	ldr	r0, [r0, #0]
 80029f8:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 80029fc:	d039      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x82>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4da3      	ldr	r5, [pc, #652]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a00:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a02:	00d8      	lsls	r0, r3, #3
 8002a04:	d427      	bmi.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8002a0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a18:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a1a:	4f9d      	ldr	r7, [pc, #628]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a22:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a24:	f7fe f9da 	bl	8000ddc <HAL_GetTick>
 8002a28:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	05d9      	lsls	r1, r3, #23
 8002a2e:	d514      	bpl.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a30:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a34:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002a36:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a3a:	d002      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	f040 8129 	bne.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a42:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002a46:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a52:	2000      	movs	r0, #0
 8002a54:	e008      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2600      	movs	r6, #0
 8002a58:	e7df      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe f9bf 	bl	8000ddc <HAL_GetTick>
 8002a5e:	eba0 0008 	sub.w	r0, r0, r8
 8002a62:	2802      	cmp	r0, #2
 8002a64:	d9e1      	bls.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a66:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a68:	b11e      	cbz	r6, 8002a72 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a70:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	07dd      	lsls	r5, r3, #31
 8002a76:	d508      	bpl.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a78:	4984      	ldr	r1, [pc, #528]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a7a:	6865      	ldr	r5, [r4, #4]
 8002a7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a80:	f022 0203 	bic.w	r2, r2, #3
 8002a84:	432a      	orrs	r2, r5
 8002a86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8a:	0799      	lsls	r1, r3, #30
 8002a8c:	d508      	bpl.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a8e:	497f      	ldr	r1, [pc, #508]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a90:	68a5      	ldr	r5, [r4, #8]
 8002a92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a96:	f022 020c 	bic.w	r2, r2, #12
 8002a9a:	432a      	orrs	r2, r5
 8002a9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa0:	075a      	lsls	r2, r3, #29
 8002aa2:	d508      	bpl.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aa4:	4979      	ldr	r1, [pc, #484]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002aa6:	68e5      	ldr	r5, [r4, #12]
 8002aa8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002aac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002ab0:	432a      	orrs	r2, r5
 8002ab2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab6:	071f      	lsls	r7, r3, #28
 8002ab8:	d508      	bpl.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aba:	4974      	ldr	r1, [pc, #464]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002abc:	6925      	ldr	r5, [r4, #16]
 8002abe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ac2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ac6:	432a      	orrs	r2, r5
 8002ac8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002acc:	06de      	lsls	r6, r3, #27
 8002ace:	d508      	bpl.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ad0:	496e      	ldr	r1, [pc, #440]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ad2:	6965      	ldr	r5, [r4, #20]
 8002ad4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ad8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002adc:	432a      	orrs	r2, r5
 8002ade:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ae2:	069d      	lsls	r5, r3, #26
 8002ae4:	d508      	bpl.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae6:	4969      	ldr	r1, [pc, #420]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ae8:	69a5      	ldr	r5, [r4, #24]
 8002aea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002aee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002af2:	432a      	orrs	r2, r5
 8002af4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	0659      	lsls	r1, r3, #25
 8002afa:	d508      	bpl.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afc:	4963      	ldr	r1, [pc, #396]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002afe:	69e5      	ldr	r5, [r4, #28]
 8002b00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b04:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b08:	432a      	orrs	r2, r5
 8002b0a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0e:	061a      	lsls	r2, r3, #24
 8002b10:	d508      	bpl.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b12:	495e      	ldr	r1, [pc, #376]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b14:	6a25      	ldr	r5, [r4, #32]
 8002b16:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b1e:	432a      	orrs	r2, r5
 8002b20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b24:	05df      	lsls	r7, r3, #23
 8002b26:	d508      	bpl.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b28:	4958      	ldr	r1, [pc, #352]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002b2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b30:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002b34:	432a      	orrs	r2, r5
 8002b36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b3a:	039e      	lsls	r6, r3, #14
 8002b3c:	d508      	bpl.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b3e:	4953      	ldr	r1, [pc, #332]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b40:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002b42:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002b46:	f022 0203 	bic.w	r2, r2, #3
 8002b4a:	432a      	orrs	r2, r5
 8002b4c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b50:	059d      	lsls	r5, r3, #22
 8002b52:	d508      	bpl.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b56:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002b58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b5c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002b60:	432a      	orrs	r2, r5
 8002b62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b66:	0559      	lsls	r1, r3, #21
 8002b68:	d50f      	bpl.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b6a:	4948      	ldr	r1, [pc, #288]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b6c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002b6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b72:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002b76:	432a      	orrs	r2, r5
 8002b78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b7c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b80:	bf02      	ittt	eq
 8002b82:	68ca      	ldreq	r2, [r1, #12]
 8002b84:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002b88:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b8a:	051a      	lsls	r2, r3, #20
 8002b8c:	d50f      	bpl.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b8e:	493f      	ldr	r1, [pc, #252]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002b90:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002b92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b96:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002b9a:	432a      	orrs	r2, r5
 8002b9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ba0:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	bf02      	ittt	eq
 8002ba6:	68ca      	ldreq	r2, [r1, #12]
 8002ba8:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002bac:	60ca      	streq	r2, [r1, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bae:	04df      	lsls	r7, r3, #19
 8002bb0:	d50f      	bpl.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bb2:	4936      	ldr	r1, [pc, #216]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bb4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002bb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bba:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bbe:	432a      	orrs	r2, r5
 8002bc0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bc4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	bf02      	ittt	eq
 8002bca:	68ca      	ldreq	r2, [r1, #12]
 8002bcc:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002bd0:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd2:	049e      	lsls	r6, r3, #18
 8002bd4:	d50f      	bpl.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bd6:	492d      	ldr	r1, [pc, #180]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bd8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002bda:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bde:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002be2:	432a      	orrs	r2, r5
 8002be4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be8:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	bf02      	ittt	eq
 8002bee:	68ca      	ldreq	r2, [r1, #12]
 8002bf0:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002bf4:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf6:	045d      	lsls	r5, r3, #17
 8002bf8:	d50f      	bpl.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bfa:	4924      	ldr	r1, [pc, #144]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002bfc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002bfe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c02:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002c06:	432a      	orrs	r2, r5
 8002c08:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c0c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c10:	bf02      	ittt	eq
 8002c12:	68ca      	ldreq	r2, [r1, #12]
 8002c14:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8002c18:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c1a:	0419      	lsls	r1, r3, #16
 8002c1c:	d50f      	bpl.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c1e:	491b      	ldr	r1, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c20:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002c22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c2a:	432a      	orrs	r2, r5
 8002c2c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c30:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c34:	bf02      	ittt	eq
 8002c36:	68ca      	ldreq	r2, [r1, #12]
 8002c38:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8002c3c:	60ca      	streq	r2, [r1, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c3e:	03da      	lsls	r2, r3, #15
 8002c40:	d50f      	bpl.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c42:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c44:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002c46:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c4a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002c4e:	432a      	orrs	r2, r5
 8002c50:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c54:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c58:	bf02      	ittt	eq
 8002c5a:	68ca      	ldreq	r2, [r1, #12]
 8002c5c:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8002c60:	60ca      	streq	r2, [r1, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c62:	035b      	lsls	r3, r3, #13
 8002c64:	d50f      	bpl.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c68:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002c6a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002c6e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002c72:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c7c:	d103      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x296>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7e:	68d3      	ldr	r3, [r2, #12]
 8002c80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c84:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 8002c86:	b002      	add	sp, #8
 8002c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c94:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c98:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca8:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cb0:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002cb6:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cba:	f57f aec2 	bpl.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f88d 	bl	8000ddc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002cc6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002ccc:	079b      	lsls	r3, r3, #30
 8002cce:	f53f aeb8 	bmi.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe f883 	bl	8000ddc <HAL_GetTick>
 8002cd6:	1bc0      	subs	r0, r0, r7
 8002cd8:	4540      	cmp	r0, r8
 8002cda:	d9f5      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002cdc:	e6c3      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cde:	bf00      	nop

08002ce0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ce0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002ce2:	6803      	ldr	r3, [r0, #0]
 8002ce4:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <HAL_RTC_WaitForSynchro+0x2c>)
 8002ce6:	60da      	str	r2, [r3, #12]
{
 8002ce8:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 8002cea:	f7fe f877 	bl	8000ddc <HAL_GetTick>
 8002cee:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	069b      	lsls	r3, r3, #26
 8002cf6:	d501      	bpl.n	8002cfc <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002cf8:	2000      	movs	r0, #0
}
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cfc:	f7fe f86e 	bl	8000ddc <HAL_GetTick>
 8002d00:	1b40      	subs	r0, r0, r5
 8002d02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d06:	d9f3      	bls.n	8002cf0 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8002d08:	2003      	movs	r0, #3
 8002d0a:	e7f6      	b.n	8002cfa <HAL_RTC_WaitForSynchro+0x1a>
 8002d0c:	0001005f 	.word	0x0001005f

08002d10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8002d12:	6803      	ldr	r3, [r0, #0]
 8002d14:	68dc      	ldr	r4, [r3, #12]
 8002d16:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8002d1a:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8002d1c:	d119      	bne.n	8002d52 <RTC_EnterInitMode+0x42>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d24:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d26:	f7fe f859 	bl	8000ddc <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d2a:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 8002d2c:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d2e:	682b      	ldr	r3, [r5, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	065b      	lsls	r3, r3, #25
 8002d34:	d401      	bmi.n	8002d3a <RTC_EnterInitMode+0x2a>
 8002d36:	2c03      	cmp	r4, #3
 8002d38:	d101      	bne.n	8002d3e <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002d3e:	f7fe f84d 	bl	8000ddc <HAL_GetTick>
 8002d42:	1b80      	subs	r0, r0, r6
 8002d44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d48:	bf84      	itt	hi
 8002d4a:	f885 7025 	strbhi.w	r7, [r5, #37]	; 0x25
        status = HAL_TIMEOUT;
 8002d4e:	2403      	movhi	r4, #3
 8002d50:	e7ed      	b.n	8002d2e <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2400      	movs	r4, #0
 8002d54:	e7f1      	b.n	8002d3a <RTC_EnterInitMode+0x2a>

08002d56 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002d56:	6803      	ldr	r3, [r0, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8002d5e:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002d60:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	0692      	lsls	r2, r2, #26
{
 8002d66:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d68:	d406      	bmi.n	8002d78 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d6a:	f7ff ffb9 	bl	8002ce0 <HAL_RTC_WaitForSynchro>
 8002d6e:	b110      	cbz	r0, 8002d76 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d70:	2003      	movs	r0, #3
 8002d72:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8002d76:	bd10      	pop	{r4, pc}
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	f022 0220 	bic.w	r2, r2, #32
 8002d7e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d80:	f7ff ffae 	bl	8002ce0 <HAL_RTC_WaitForSynchro>
 8002d84:	b110      	cbz	r0, 8002d8c <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d86:	2003      	movs	r0, #3
 8002d88:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	6993      	ldr	r3, [r2, #24]
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	6193      	str	r3, [r2, #24]
 8002d96:	e7ee      	b.n	8002d76 <RTC_ExitInitMode+0x20>

08002d98 <HAL_RTC_Init>:
{
 8002d98:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d045      	beq.n	8002e2c <HAL_RTC_Init+0x94>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002da0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002da4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002da8:	b91b      	cbnz	r3, 8002db2 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8002daa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
      HAL_RTC_MspInit(hrtc);
 8002dae:	f7fd fcff 	bl	80007b0 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	06d2      	lsls	r2, r2, #27
 8002dbe:	d504      	bpl.n	8002dca <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8002dc6:	2000      	movs	r0, #0
}
 8002dc8:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dca:	22ca      	movs	r2, #202	; 0xca
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8002dce:	2253      	movs	r2, #83	; 0x53
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7ff ff9c 	bl	8002d10 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8002dd8:	bb10      	cbnz	r0, 8002e20 <HAL_RTC_Init+0x88>
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002dda:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002ddc:	6920      	ldr	r0, [r4, #16]
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002dde:	6993      	ldr	r3, [r2, #24]
 8002de0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de8:	6193      	str	r3, [r2, #24]
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002dea:	6863      	ldr	r3, [r4, #4]
 8002dec:	6991      	ldr	r1, [r2, #24]
 8002dee:	4303      	orrs	r3, r0
 8002df0:	69a0      	ldr	r0, [r4, #24]
 8002df2:	4303      	orrs	r3, r0
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6193      	str	r3, [r2, #24]
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002df8:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8002dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002e00:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff ffa7 	bl	8002d56 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8002e08:	b950      	cbnz	r0, 8002e20 <HAL_RTC_Init+0x88>
        MODIFY_REG(hrtc->Instance->CR, \
 8002e0a:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
 8002e0e:	6821      	ldr	r1, [r4, #0]
 8002e10:	432b      	orrs	r3, r5
 8002e12:	698a      	ldr	r2, [r1, #24]
 8002e14:	6965      	ldr	r5, [r4, #20]
 8002e16:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002e1a:	432b      	orrs	r3, r5
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d0ca      	beq.n	8002dc0 <HAL_RTC_Init+0x28>
 8002e2a:	e7cd      	b.n	8002dc8 <HAL_RTC_Init+0x30>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	e7cb      	b.n	8002dc8 <HAL_RTC_Init+0x30>

08002e30 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8002e30:	0089      	lsls	r1, r1, #2
 8002e32:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002e36:	f501 5114 	add.w	r1, r1, #9472	; 0x2500

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002e3a:	600a      	str	r2, [r1, #0]
}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8002e3e:	0089      	lsls	r1, r1, #2
 8002e40:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002e44:	f501 5114 	add.w	r1, r1, #9472	; 0x2500

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002e48:	6808      	ldr	r0, [r1, #0]
}
 8002e4a:	4770      	bx	lr

08002e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e4c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e4e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e50:	e852 3f00 	ldrex	r3, [r2]
 8002e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002e5c:	6802      	ldr	r2, [r0, #0]
 8002e5e:	2900      	cmp	r1, #0
 8002e60:	d1f5      	bne.n	8002e4e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e62:	4c0f      	ldr	r4, [pc, #60]	; (8002ea0 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	f102 0308 	add.w	r3, r2, #8
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	f102 0c08 	add.w	ip, r2, #8
 8002e72:	e84c 3100 	strex	r1, r3, [ip]
 8002e76:	2900      	cmp	r1, #0
 8002e78:	d1f4      	bne.n	8002e64 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e84:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	e842 3100 	strex	r1, r3, [r2]
 8002e8c:	2900      	cmp	r1, #0
 8002e8e:	d1f7      	bne.n	8002e80 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e90:	2320      	movs	r3, #32
 8002e92:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e96:	2300      	movs	r3, #0
 8002e98:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e9a:	6743      	str	r3, [r0, #116]	; 0x74
}
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	bf00      	nop
 8002ea0:	effffffe 	.word	0xeffffffe

08002ea4 <HAL_UART_TxCpltCallback>:
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_UART_ErrorCallback>:
 8002ea6:	4770      	bx	lr

08002ea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002eaa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8002eb2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb6:	f7ff fff6 	bl	8002ea6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eba:	bd08      	pop	{r3, pc}

08002ebc <HAL_UARTEx_RxEventCallback>:
}
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ec4:	681a      	ldr	r2, [r3, #0]
{
 8002ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 8002eca:	f640 060f 	movw	r6, #2063	; 0x80f
 8002ece:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ed0:	689d      	ldr	r5, [r3, #8]
{
 8002ed2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8002ed4:	d110      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ed6:	068e      	lsls	r6, r1, #26
 8002ed8:	f140 8097 	bpl.w	800300a <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002edc:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ee0:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8002ee4:	433e      	orrs	r6, r7
 8002ee6:	f000 8090 	beq.w	800300a <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 8002eea:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8085 	beq.w	8002ffc <HAL_UART_IRQHandler+0x13c>
}
 8002ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ef6:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ef8:	4eab      	ldr	r6, [pc, #684]	; (80031a8 <HAL_UART_IRQHandler+0x2e8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002efa:	48ac      	ldr	r0, [pc, #688]	; (80031ac <HAL_UART_IRQHandler+0x2ec>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002efc:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002efe:	4010      	ands	r0, r2
 8002f00:	4330      	orrs	r0, r6
 8002f02:	f000 8082 	beq.w	800300a <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f06:	07cf      	lsls	r7, r1, #31
 8002f08:	d509      	bpl.n	8002f1e <HAL_UART_IRQHandler+0x5e>
 8002f0a:	05d0      	lsls	r0, r2, #23
 8002f0c:	d507      	bpl.n	8002f1e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f12:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002f16:	f040 0001 	orr.w	r0, r0, #1
 8002f1a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f1e:	078f      	lsls	r7, r1, #30
 8002f20:	d509      	bpl.n	8002f36 <HAL_UART_IRQHandler+0x76>
 8002f22:	07e8      	lsls	r0, r5, #31
 8002f24:	d507      	bpl.n	8002f36 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f26:	2002      	movs	r0, #2
 8002f28:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f2a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002f2e:	f040 0004 	orr.w	r0, r0, #4
 8002f32:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f36:	074f      	lsls	r7, r1, #29
 8002f38:	d509      	bpl.n	8002f4e <HAL_UART_IRQHandler+0x8e>
 8002f3a:	07e8      	lsls	r0, r5, #31
 8002f3c:	d507      	bpl.n	8002f4e <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f3e:	2004      	movs	r0, #4
 8002f40:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f42:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002f46:	f040 0002 	orr.w	r0, r0, #2
 8002f4a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f4e:	070f      	lsls	r7, r1, #28
 8002f50:	d50b      	bpl.n	8002f6a <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f52:	f002 0020 	and.w	r0, r2, #32
 8002f56:	4330      	orrs	r0, r6
 8002f58:	d007      	beq.n	8002f6a <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f5a:	2008      	movs	r0, #8
 8002f5c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f5e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002f62:	f040 0008 	orr.w	r0, r0, #8
 8002f66:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f6a:	050e      	lsls	r6, r1, #20
 8002f6c:	d50a      	bpl.n	8002f84 <HAL_UART_IRQHandler+0xc4>
 8002f6e:	0150      	lsls	r0, r2, #5
 8002f70:	d508      	bpl.n	8002f84 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f76:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f78:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f7c:	f043 0320 	orr.w	r3, r3, #32
 8002f80:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f84:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d037      	beq.n	8002ffc <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f8c:	068b      	lsls	r3, r1, #26
 8002f8e:	d509      	bpl.n	8002fa4 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f90:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f94:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8002f98:	432a      	orrs	r2, r5
 8002f9a:	d003      	beq.n	8002fa4 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8002f9c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002f9e:	b10b      	cbz	r3, 8002fa4 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fa4:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8002fa6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002faa:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fac:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8002fb8:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fba:	d021      	beq.n	8003000 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8002fbc:	f7ff ff46 	bl	8002e4c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	68b3      	ldr	r3, [r6, #8]
 8002fc2:	065f      	lsls	r7, r3, #25
 8002fc4:	d517      	bpl.n	8002ff6 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	f102 0308 	add.w	r3, r2, #8
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	3208      	adds	r2, #8
 8002fd6:	e842 3100 	strex	r1, r3, [r2]
 8002fda:	2900      	cmp	r1, #0
 8002fdc:	d1f3      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 8002fde:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002fe2:	b140      	cbz	r0, 8002ff6 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe4:	4b72      	ldr	r3, [pc, #456]	; (80031b0 <HAL_UART_IRQHandler+0x2f0>)
 8002fe6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe8:	f7fd ffab 	bl	8000f42 <HAL_DMA_Abort_IT>
 8002fec:	b130      	cbz	r0, 8002ffc <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fee:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002ff2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ff4:	e77d      	b.n	8002ef2 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f7ff ff55 	bl	8002ea6 <HAL_UART_ErrorCallback>
}
 8002ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 8003000:	f7ff ff51 	bl	8002ea6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8003008:	e7f8      	b.n	8002ffc <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800300c:	2801      	cmp	r0, #1
 800300e:	f040 8089 	bne.w	8003124 <HAL_UART_IRQHandler+0x264>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003012:	06ce      	lsls	r6, r1, #27
 8003014:	f140 8086 	bpl.w	8003124 <HAL_UART_IRQHandler+0x264>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003018:	06d0      	lsls	r0, r2, #27
 800301a:	f140 8083 	bpl.w	8003124 <HAL_UART_IRQHandler+0x264>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800301e:	2210      	movs	r2, #16
 8003020:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	0651      	lsls	r1, r2, #25
 8003026:	d54b      	bpl.n	80030c0 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003028:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800302c:	6811      	ldr	r1, [r2, #0]
 800302e:	684a      	ldr	r2, [r1, #4]
 8003030:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003032:	2a00      	cmp	r2, #0
 8003034:	d0e2      	beq.n	8002ffc <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003036:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800303a:	4290      	cmp	r0, r2
 800303c:	d9de      	bls.n	8002ffc <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 800303e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003042:	680a      	ldr	r2, [r1, #0]
 8003044:	0692      	lsls	r2, r2, #26
 8003046:	d42f      	bmi.n	80030a8 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800304c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	e843 2100 	strex	r1, r2, [r3]
 8003054:	2900      	cmp	r1, #0
 8003056:	d1f7      	bne.n	8003048 <HAL_UART_IRQHandler+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	f103 0208 	add.w	r2, r3, #8
 800305c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003060:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	f103 0008 	add.w	r0, r3, #8
 8003068:	e840 2100 	strex	r1, r2, [r0]
 800306c:	2900      	cmp	r1, #0
 800306e:	d1f3      	bne.n	8003058 <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	f103 0208 	add.w	r2, r3, #8
 8003074:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	f103 0008 	add.w	r0, r3, #8
 8003080:	e840 2100 	strex	r1, r2, [r0]
 8003084:	2900      	cmp	r1, #0
 8003086:	d1f3      	bne.n	8003070 <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8003088:	2220      	movs	r2, #32
 800308a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308e:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003094:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	e843 2100 	strex	r1, r2, [r3]
 800309c:	2900      	cmp	r1, #0
 800309e:	d1f7      	bne.n	8003090 <HAL_UART_IRQHandler+0x1d0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80030a4:	f7fd ff1a 	bl	8000edc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030a8:	2302      	movs	r3, #2
 80030aa:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ac:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80030b0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80030b4:	1ac9      	subs	r1, r1, r3
 80030b6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff feff 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
 80030be:	e79d      	b.n	8002ffc <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 80030c4:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 80030cc:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030ce:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d093      	beq.n	8002ffc <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030d4:	1a89      	subs	r1, r1, r2
 80030d6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80030d8:	2900      	cmp	r1, #0
 80030da:	d08f      	beq.n	8002ffc <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	e843 2000 	strex	r0, r2, [r3]
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d1f7      	bne.n	80030dc <HAL_UART_IRQHandler+0x21c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030ec:	4d31      	ldr	r5, [pc, #196]	; (80031b4 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	f103 0208 	add.w	r2, r3, #8
 80030f2:	e852 2f00 	ldrex	r2, [r2]
 80030f6:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	f103 0608 	add.w	r6, r3, #8
 80030fc:	e846 2000 	strex	r0, r2, [r6]
 8003100:	2800      	cmp	r0, #0
 8003102:	d1f4      	bne.n	80030ee <HAL_UART_IRQHandler+0x22e>
        huart->RxState = HAL_UART_STATE_READY;
 8003104:	2220      	movs	r2, #32
 8003106:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800310a:	6760      	str	r0, [r4, #116]	; 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310c:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003112:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	e843 2000 	strex	r0, r2, [r3]
 800311a:	2800      	cmp	r0, #0
 800311c:	d1f7      	bne.n	800310e <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800311e:	2302      	movs	r3, #2
 8003120:	6723      	str	r3, [r4, #112]	; 0x70
 8003122:	e7c9      	b.n	80030b8 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003124:	02cf      	lsls	r7, r1, #11
 8003126:	d509      	bpl.n	800313c <HAL_UART_IRQHandler+0x27c>
 8003128:	026e      	lsls	r6, r5, #9
 800312a:	d507      	bpl.n	800313c <HAL_UART_IRQHandler+0x27c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800312c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003130:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003132:	621a      	str	r2, [r3, #32]
}
 8003134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003138:	f000 bdfa 	b.w	8003d30 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800313c:	0608      	lsls	r0, r1, #24
 800313e:	d50b      	bpl.n	8003158 <HAL_UART_IRQHandler+0x298>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003140:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003144:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8003148:	4328      	orrs	r0, r5
 800314a:	d005      	beq.n	8003158 <HAL_UART_IRQHandler+0x298>
    if (huart->TxISR != NULL)
 800314c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800314e:	2b00      	cmp	r3, #0
 8003150:	f43f af54 	beq.w	8002ffc <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 8003154:	4620      	mov	r0, r4
 8003156:	e6cc      	b.n	8002ef2 <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003158:	064f      	lsls	r7, r1, #25
 800315a:	d511      	bpl.n	8003180 <HAL_UART_IRQHandler+0x2c0>
 800315c:	0656      	lsls	r6, r2, #25
 800315e:	d50f      	bpl.n	8003180 <HAL_UART_IRQHandler+0x2c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	e843 2100 	strex	r1, r2, [r3]
 800316c:	2900      	cmp	r1, #0
 800316e:	d1f7      	bne.n	8003160 <HAL_UART_IRQHandler+0x2a0>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003170:	2320      	movs	r3, #32
 8003172:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003176:	67a1      	str	r1, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003178:	4620      	mov	r0, r4
 800317a:	f7ff fe93 	bl	8002ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800317e:	e73d      	b.n	8002ffc <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003180:	020d      	lsls	r5, r1, #8
 8003182:	d506      	bpl.n	8003192 <HAL_UART_IRQHandler+0x2d2>
 8003184:	0050      	lsls	r0, r2, #1
 8003186:	d504      	bpl.n	8003192 <HAL_UART_IRQHandler+0x2d2>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003188:	4620      	mov	r0, r4
}
 800318a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800318e:	f000 bdd1 	b.w	8003d34 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003192:	01cb      	lsls	r3, r1, #7
 8003194:	f57f af32 	bpl.w	8002ffc <HAL_UART_IRQHandler+0x13c>
 8003198:	2a00      	cmp	r2, #0
 800319a:	f6bf af2f 	bge.w	8002ffc <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800319e:	4620      	mov	r0, r4
}
 80031a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80031a4:	f000 bdc5 	b.w	8003d32 <HAL_UARTEx_RxFifoFullCallback>
 80031a8:	10000001 	.word	0x10000001
 80031ac:	04000120 	.word	0x04000120
 80031b0:	08002ea9 	.word	0x08002ea9
 80031b4:	effffffe 	.word	0xeffffffe

080031b8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 80031bc:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031c0:	2a22      	cmp	r2, #34	; 0x22
{
 80031c2:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031c4:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031c6:	d155      	bne.n	8003274 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031ca:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80031cc:	400b      	ands	r3, r1
 80031ce:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80031d0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80031d2:	3301      	adds	r3, #1
 80031d4:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80031d6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80031e2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d142      	bne.n	8003272 <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	e852 3f00 	ldrex	r3, [r2]
 80031f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80031fa:	6803      	ldr	r3, [r0, #0]
 80031fc:	2900      	cmp	r1, #0
 80031fe:	d1f5      	bne.n	80031ec <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	f103 0208 	add.w	r2, r3, #8
 8003204:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003208:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	f103 0c08 	add.w	ip, r3, #8
 8003210:	e84c 2100 	strex	r1, r2, [ip]
 8003214:	2900      	cmp	r1, #0
 8003216:	d1f3      	bne.n	8003200 <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003218:	2220      	movs	r2, #32
 800321a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800321e:	4a18      	ldr	r2, [pc, #96]	; (8003280 <UART_RxISR_8BIT+0xc8>)
      huart->RxISR = NULL;
 8003220:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003222:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003224:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003226:	d105      	bne.n	8003234 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003228:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800322a:	2a01      	cmp	r2, #1
 800322c:	d00e      	beq.n	800324c <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800322e:	f7fd fd5b 	bl	8000ce8 <HAL_UART_RxCpltCallback>
 8003232:	e01e      	b.n	8003272 <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	0211      	lsls	r1, r2, #8
 8003238:	d5f6      	bpl.n	8003228 <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800323e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	e843 2100 	strex	r1, r2, [r3]
 8003246:	2900      	cmp	r1, #0
 8003248:	d1f7      	bne.n	800323a <UART_RxISR_8BIT+0x82>
 800324a:	e7ed      	b.n	8003228 <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324c:	2200      	movs	r2, #0
 800324e:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003254:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	e843 2100 	strex	r1, r2, [r3]
 800325c:	2900      	cmp	r1, #0
 800325e:	d1f7      	bne.n	8003250 <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003260:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003262:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003266:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003268:	bf44      	itt	mi
 800326a:	2210      	movmi	r2, #16
 800326c:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800326e:	f7ff fe25 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003272:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	619a      	str	r2, [r3, #24]
}
 800327c:	e7f9      	b.n	8003272 <UART_RxISR_8BIT+0xba>
 800327e:	bf00      	nop
 8003280:	40008000 	.word	0x40008000

08003284 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003284:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 8003288:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800328c:	2a22      	cmp	r2, #34	; 0x22
{
 800328e:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003290:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003292:	d152      	bne.n	800333a <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8003296:	4011      	ands	r1, r2
 8003298:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800329a:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 800329e:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80032a0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80032a4:	3a01      	subs	r2, #1
 80032a6:	b292      	uxth	r2, r2
 80032a8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80032ac:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80032b0:	b292      	uxth	r2, r2
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d140      	bne.n	8003338 <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	e843 2100 	strex	r1, r2, [r3]
 80032c2:	2900      	cmp	r1, #0
 80032c4:	d1f7      	bne.n	80032b6 <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c6:	f103 0208 	add.w	r2, r3, #8
 80032ca:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	f103 0c08 	add.w	ip, r3, #8
 80032d6:	e84c 2100 	strex	r1, r2, [ip]
 80032da:	2900      	cmp	r1, #0
 80032dc:	d1f3      	bne.n	80032c6 <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032de:	2220      	movs	r2, #32
 80032e0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <UART_RxISR_16BIT+0xc0>)
      huart->RxISR = NULL;
 80032e6:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80032e8:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ea:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80032ec:	d105      	bne.n	80032fa <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ee:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80032f0:	2a01      	cmp	r2, #1
 80032f2:	d00e      	beq.n	8003312 <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032f4:	f7fd fcf8 	bl	8000ce8 <HAL_UART_RxCpltCallback>
 80032f8:	e01e      	b.n	8003338 <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	d5f6      	bpl.n	80032ee <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003304:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	e843 2100 	strex	r1, r2, [r3]
 800330c:	2900      	cmp	r1, #0
 800330e:	d1f7      	bne.n	8003300 <UART_RxISR_16BIT+0x7c>
 8003310:	e7ed      	b.n	80032ee <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	2200      	movs	r2, #0
 8003314:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	e843 2100 	strex	r1, r2, [r3]
 8003322:	2900      	cmp	r1, #0
 8003324:	d1f7      	bne.n	8003316 <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003326:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003328:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800332c:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800332e:	bf44      	itt	mi
 8003330:	2210      	movmi	r2, #16
 8003332:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003334:	f7ff fdc2 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003338:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	f042 0208 	orr.w	r2, r2, #8
 8003340:	619a      	str	r2, [r3, #24]
}
 8003342:	e7f9      	b.n	8003338 <UART_RxISR_16BIT+0xb4>
 8003344:	40008000 	.word	0x40008000

08003348 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800334c:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 800334e:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003352:	69df      	ldr	r7, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003354:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003356:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003358:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800335c:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800335e:	2922      	cmp	r1, #34	; 0x22
{
 8003360:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003362:	f040 80b4 	bne.w	80034ce <UART_RxISR_8BIT_FIFOEN+0x186>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003366:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800336a:	f8df a170 	ldr.w	sl, [pc, #368]	; 80034dc <UART_RxISR_8BIT_FIFOEN+0x194>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800336e:	f8df b170 	ldr.w	fp, [pc, #368]	; 80034e0 <UART_RxISR_8BIT_FIFOEN+0x198>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	2600      	movs	r6, #0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003374:	f1b9 0f00 	cmp.w	r9, #0
 8003378:	d001      	beq.n	800337e <UART_RxISR_8BIT_FIFOEN+0x36>
 800337a:	06bb      	lsls	r3, r7, #26
 800337c:	d421      	bmi.n	80033c2 <UART_RxISR_8BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800337e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003382:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003384:	b1d3      	cbz	r3, 80033bc <UART_RxISR_8BIT_FIFOEN+0x74>
 8003386:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800338a:	429a      	cmp	r2, r3
 800338c:	d916      	bls.n	80033bc <UART_RxISR_8BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800338e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	f102 0308 	add.w	r3, r2, #8
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	3208      	adds	r2, #8
 800339e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	2900      	cmp	r1, #0
 80033a6:	d1f2      	bne.n	800338e <UART_RxISR_8BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <UART_RxISR_8BIT_FIFOEN+0x190>)
 80033aa:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80033b0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	e842 3100 	strex	r1, r3, [r2]
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d1f7      	bne.n	80033ac <UART_RxISR_8BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033bc:	b003      	add	sp, #12
 80033be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033c2:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033c4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033c8:	ea03 0308 	and.w	r3, r3, r8
 80033cc:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80033ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033d0:	3301      	adds	r3, #1
 80033d2:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80033d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80033e4:	0778      	lsls	r0, r7, #29
 80033e6:	d02c      	beq.n	8003442 <UART_RxISR_8BIT_FIFOEN+0xfa>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033e8:	07f9      	lsls	r1, r7, #31
 80033ea:	d50a      	bpl.n	8003402 <UART_RxISR_8BIT_FIFOEN+0xba>
 80033ec:	9a01      	ldr	r2, [sp, #4]
 80033ee:	05d2      	lsls	r2, r2, #23
 80033f0:	d507      	bpl.n	8003402 <UART_RxISR_8BIT_FIFOEN+0xba>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033f2:	2101      	movs	r1, #1
 80033f4:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80033fa:	f041 0101 	orr.w	r1, r1, #1
 80033fe:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003402:	07b8      	lsls	r0, r7, #30
 8003404:	d509      	bpl.n	800341a <UART_RxISR_8BIT_FIFOEN+0xd2>
 8003406:	07e9      	lsls	r1, r5, #31
 8003408:	d507      	bpl.n	800341a <UART_RxISR_8BIT_FIFOEN+0xd2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800340a:	2102      	movs	r1, #2
 800340c:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800340e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003412:	f041 0104 	orr.w	r1, r1, #4
 8003416:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800341a:	077a      	lsls	r2, r7, #29
 800341c:	d509      	bpl.n	8003432 <UART_RxISR_8BIT_FIFOEN+0xea>
 800341e:	07e8      	lsls	r0, r5, #31
 8003420:	d507      	bpl.n	8003432 <UART_RxISR_8BIT_FIFOEN+0xea>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003422:	2104      	movs	r1, #4
 8003424:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003426:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800342a:	f043 0302 	orr.w	r3, r3, #2
 800342e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003432:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003436:	b123      	cbz	r3, 8003442 <UART_RxISR_8BIT_FIFOEN+0xfa>
          HAL_UART_ErrorCallback(huart);
 8003438:	4620      	mov	r0, r4
 800343a:	f7ff fd34 	bl	8002ea6 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343e:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 8003442:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d193      	bne.n	8003374 <UART_RxISR_8BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344c:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	e851 3f00 	ldrex	r3, [r1]
 8003452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	2800      	cmp	r0, #0
 800345e:	d1f5      	bne.n	800344c <UART_RxISR_8BIT_FIFOEN+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	f103 0208 	add.w	r2, r3, #8
 8003464:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003468:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	e842 1000 	strex	r0, r1, [r2]
 8003470:	2800      	cmp	r0, #0
 8003472:	d1f5      	bne.n	8003460 <UART_RxISR_8BIT_FIFOEN+0x118>
        huart->RxState = HAL_UART_STATE_READY;
 8003474:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003476:	455b      	cmp	r3, fp
        huart->RxState = HAL_UART_STATE_READY;
 8003478:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800347c:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347e:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003480:	d00a      	beq.n	8003498 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	0209      	lsls	r1, r1, #8
 8003486:	d507      	bpl.n	8003498 <UART_RxISR_8BIT_FIFOEN+0x150>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800348c:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	e843 1000 	strex	r0, r1, [r3]
 8003494:	2800      	cmp	r0, #0
 8003496:	d1f7      	bne.n	8003488 <UART_RxISR_8BIT_FIFOEN+0x140>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003498:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800349a:	2901      	cmp	r1, #1
 800349c:	d113      	bne.n	80034c6 <UART_RxISR_8BIT_FIFOEN+0x17e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349e:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a4:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	e843 1000 	strex	r0, r1, [r3]
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d1f7      	bne.n	80034a0 <UART_RxISR_8BIT_FIFOEN+0x158>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034b0:	69d9      	ldr	r1, [r3, #28]
 80034b2:	06ca      	lsls	r2, r1, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034b4:	bf44      	itt	mi
 80034b6:	2110      	movmi	r1, #16
 80034b8:	6219      	strmi	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ba:	4620      	mov	r0, r4
 80034bc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80034c0:	f7ff fcfc 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
 80034c4:	e756      	b.n	8003374 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7fd fc0e 	bl	8000ce8 <HAL_UART_RxCpltCallback>
 80034cc:	e752      	b.n	8003374 <UART_RxISR_8BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	f042 0208 	orr.w	r2, r2, #8
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	e771      	b.n	80033bc <UART_RxISR_8BIT_FIFOEN+0x74>
 80034d8:	080031b9 	.word	0x080031b9
 80034dc:	effffffe 	.word	0xeffffffe
 80034e0:	40008000 	.word	0x40008000

080034e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80034e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80034e8:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 80034ea:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80034ee:	69df      	ldr	r7, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80034f0:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80034f2:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80034f8:	9201      	str	r2, [sp, #4]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034fa:	2922      	cmp	r1, #34	; 0x22
{
 80034fc:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034fe:	f040 80b2 	bne.w	8003666 <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003502:	f8b0 9068 	ldrh.w	r9, [r0, #104]	; 0x68
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003506:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8003674 <UART_RxISR_16BIT_FIFOEN+0x190>
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800350a:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8003678 <UART_RxISR_16BIT_FIFOEN+0x194>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	2600      	movs	r6, #0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003510:	f1b9 0f00 	cmp.w	r9, #0
 8003514:	d001      	beq.n	800351a <UART_RxISR_16BIT_FIFOEN+0x36>
 8003516:	06bb      	lsls	r3, r7, #26
 8003518:	d421      	bmi.n	800355e <UART_RxISR_16BIT_FIFOEN+0x7a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800351a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800351e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003520:	b1d3      	cbz	r3, 8003558 <UART_RxISR_16BIT_FIFOEN+0x74>
 8003522:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8003526:	429a      	cmp	r2, r3
 8003528:	d916      	bls.n	8003558 <UART_RxISR_16BIT_FIFOEN+0x74>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800352a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	f102 0308 	add.w	r3, r2, #8
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	3208      	adds	r2, #8
 800353a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	2900      	cmp	r1, #0
 8003542:	d1f2      	bne.n	800352a <UART_RxISR_16BIT_FIFOEN+0x46>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003544:	4b4a      	ldr	r3, [pc, #296]	; (8003670 <UART_RxISR_16BIT_FIFOEN+0x18c>)
 8003546:	6763      	str	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800354c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	e842 3100 	strex	r1, r3, [r2]
 8003554:	2900      	cmp	r1, #0
 8003556:	d1f7      	bne.n	8003548 <UART_RxISR_16BIT_FIFOEN+0x64>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003558:	b003      	add	sp, #12
 800355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800355e:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003560:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003562:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8003564:	ea08 0101 	and.w	r1, r8, r1
 8003568:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800356c:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800356e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003572:	3a01      	subs	r2, #1
 8003574:	b292      	uxth	r2, r2
 8003576:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800357a:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800357c:	0778      	lsls	r0, r7, #29
 800357e:	d02c      	beq.n	80035da <UART_RxISR_16BIT_FIFOEN+0xf6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003580:	07f9      	lsls	r1, r7, #31
 8003582:	d50a      	bpl.n	800359a <UART_RxISR_16BIT_FIFOEN+0xb6>
 8003584:	9a01      	ldr	r2, [sp, #4]
 8003586:	05d2      	lsls	r2, r2, #23
 8003588:	d507      	bpl.n	800359a <UART_RxISR_16BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800358a:	2101      	movs	r1, #1
 800358c:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800358e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003592:	f041 0101 	orr.w	r1, r1, #1
 8003596:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800359a:	07b8      	lsls	r0, r7, #30
 800359c:	d509      	bpl.n	80035b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800359e:	07e9      	lsls	r1, r5, #31
 80035a0:	d507      	bpl.n	80035b2 <UART_RxISR_16BIT_FIFOEN+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035a2:	2102      	movs	r1, #2
 80035a4:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80035aa:	f041 0104 	orr.w	r1, r1, #4
 80035ae:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b2:	077a      	lsls	r2, r7, #29
 80035b4:	d509      	bpl.n	80035ca <UART_RxISR_16BIT_FIFOEN+0xe6>
 80035b6:	07e8      	lsls	r0, r5, #31
 80035b8:	d507      	bpl.n	80035ca <UART_RxISR_16BIT_FIFOEN+0xe6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035ba:	2104      	movs	r1, #4
 80035bc:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80035ce:	b123      	cbz	r3, 80035da <UART_RxISR_16BIT_FIFOEN+0xf6>
          HAL_UART_ErrorCallback(huart);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7ff fc68 	bl	8002ea6 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d6:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 80035da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d195      	bne.n	8003510 <UART_RxISR_16BIT_FIFOEN+0x2c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e4:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	e851 3f00 	ldrex	r3, [r1]
 80035ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	e841 3000 	strex	r0, r3, [r1]
   return(result);
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d1f5      	bne.n	80035e4 <UART_RxISR_16BIT_FIFOEN+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	f103 0208 	add.w	r2, r3, #8
 80035fc:	e852 1f00 	ldrex	r1, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003600:	ea01 010a 	and.w	r1, r1, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	e842 1000 	strex	r0, r1, [r2]
 8003608:	2800      	cmp	r0, #0
 800360a:	d1f5      	bne.n	80035f8 <UART_RxISR_16BIT_FIFOEN+0x114>
        huart->RxState = HAL_UART_STATE_READY;
 800360c:	2120      	movs	r1, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800360e:	455b      	cmp	r3, fp
        huart->RxState = HAL_UART_STATE_READY;
 8003610:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8003614:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003616:	6720      	str	r0, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003618:	d00a      	beq.n	8003630 <UART_RxISR_16BIT_FIFOEN+0x14c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	0209      	lsls	r1, r1, #8
 800361e:	d507      	bpl.n	8003630 <UART_RxISR_16BIT_FIFOEN+0x14c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	e853 1f00 	ldrex	r1, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003624:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	e843 1000 	strex	r0, r1, [r3]
 800362c:	2800      	cmp	r0, #0
 800362e:	d1f7      	bne.n	8003620 <UART_RxISR_16BIT_FIFOEN+0x13c>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003630:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003632:	2901      	cmp	r1, #1
 8003634:	d113      	bne.n	800365e <UART_RxISR_16BIT_FIFOEN+0x17a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	66e6      	str	r6, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363c:	f021 0110 	bic.w	r1, r1, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	e843 1000 	strex	r0, r1, [r3]
 8003644:	2800      	cmp	r0, #0
 8003646:	d1f7      	bne.n	8003638 <UART_RxISR_16BIT_FIFOEN+0x154>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003648:	69d9      	ldr	r1, [r3, #28]
 800364a:	06ca      	lsls	r2, r1, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800364c:	bf44      	itt	mi
 800364e:	2110      	movmi	r1, #16
 8003650:	6219      	strmi	r1, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003652:	4620      	mov	r0, r4
 8003654:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003658:	f7ff fc30 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
 800365c:	e758      	b.n	8003510 <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 800365e:	4620      	mov	r0, r4
 8003660:	f7fd fb42 	bl	8000ce8 <HAL_UART_RxCpltCallback>
 8003664:	e754      	b.n	8003510 <UART_RxISR_16BIT_FIFOEN+0x2c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	f042 0208 	orr.w	r2, r2, #8
 800366c:	619a      	str	r2, [r3, #24]
}
 800366e:	e773      	b.n	8003558 <UART_RxISR_16BIT_FIFOEN+0x74>
 8003670:	08003285 	.word	0x08003285
 8003674:	effffffe 	.word	0xeffffffe
 8003678:	40008000 	.word	0x40008000

0800367c <UART_SetConfig>:
{
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003680:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003682:	6921      	ldr	r1, [r4, #16]
 8003684:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003686:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003688:	69c0      	ldr	r0, [r0, #28]
 800368a:	430a      	orrs	r2, r1
 800368c:	6961      	ldr	r1, [r4, #20]
 800368e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003690:	49a0      	ldr	r1, [pc, #640]	; (8003914 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003692:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003694:	4029      	ands	r1, r5
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68e1      	ldr	r1, [r4, #12]
 800369e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036a6:	4a9c      	ldr	r2, [pc, #624]	; (8003918 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036a8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036aa:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80036ac:	bf1c      	itt	ne
 80036ae:	6a22      	ldrne	r2, [r4, #32]
 80036b0:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 80036b8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80036c4:	f022 020f 	bic.w	r2, r2, #15
 80036c8:	430a      	orrs	r2, r1
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036cc:	4a93      	ldr	r2, [pc, #588]	; (800391c <UART_SetConfig+0x2a0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d11b      	bne.n	800370a <UART_SetConfig+0x8e>
 80036d2:	4b93      	ldr	r3, [pc, #588]	; (8003920 <UART_SetConfig+0x2a4>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	3b01      	subs	r3, #1
 80036de:	2b02      	cmp	r3, #2
 80036e0:	f200 80e4 	bhi.w	80038ac <UART_SetConfig+0x230>
 80036e4:	4a8f      	ldr	r2, [pc, #572]	; (8003924 <UART_SetConfig+0x2a8>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80036ec:	f040 80ab 	bne.w	8003846 <UART_SetConfig+0x1ca>
    switch (clocksource)
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d826      	bhi.n	8003742 <UART_SetConfig+0xc6>
 80036f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036f8:	00dd00ee 	.word	0x00dd00ee
 80036fc:	002500a5 	.word	0x002500a5
 8003700:	002500e3 	.word	0x002500e3
 8003704:	00250025 	.word	0x00250025
 8003708:	00f2      	.short	0x00f2
  UART_GETCLOCKSOURCE(huart, clocksource);
 800370a:	4a87      	ldr	r2, [pc, #540]	; (8003928 <UART_SetConfig+0x2ac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d106      	bne.n	800371e <UART_SetConfig+0xa2>
 8003710:	4b83      	ldr	r3, [pc, #524]	; (8003920 <UART_SetConfig+0x2a4>)
 8003712:	4a86      	ldr	r2, [pc, #536]	; (800392c <UART_SetConfig+0x2b0>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	e7e3      	b.n	80036e6 <UART_SetConfig+0x6a>
 800371e:	4a84      	ldr	r2, [pc, #528]	; (8003930 <UART_SetConfig+0x2b4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d119      	bne.n	8003758 <UART_SetConfig+0xdc>
 8003724:	4b7e      	ldr	r3, [pc, #504]	; (8003920 <UART_SetConfig+0x2a4>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800372e:	2b20      	cmp	r3, #32
 8003730:	f000 80c8 	beq.w	80038c4 <UART_SetConfig+0x248>
 8003734:	d807      	bhi.n	8003746 <UART_SetConfig+0xca>
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80c9 	beq.w	80038ce <UART_SetConfig+0x252>
 800373c:	2b10      	cmp	r3, #16
 800373e:	f000 80bb 	beq.w	80038b8 <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003742:	2001      	movs	r0, #1
 8003744:	e04e      	b.n	80037e4 <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003746:	2b30      	cmp	r3, #48	; 0x30
 8003748:	d1fb      	bne.n	8003742 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800374e:	f000 80c5 	beq.w	80038dc <UART_SetConfig+0x260>
 8003752:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003756:	e093      	b.n	8003880 <UART_SetConfig+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003758:	4a76      	ldr	r2, [pc, #472]	; (8003934 <UART_SetConfig+0x2b8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10f      	bne.n	800377e <UART_SetConfig+0x102>
 800375e:	4b70      	ldr	r3, [pc, #448]	; (8003920 <UART_SetConfig+0x2a4>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	f000 80ab 	beq.w	80038c4 <UART_SetConfig+0x248>
 800376e:	d804      	bhi.n	800377a <UART_SetConfig+0xfe>
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80ac 	beq.w	80038ce <UART_SetConfig+0x252>
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	e7e1      	b.n	800373e <UART_SetConfig+0xc2>
 800377a:	2bc0      	cmp	r3, #192	; 0xc0
 800377c:	e7e4      	b.n	8003748 <UART_SetConfig+0xcc>
 800377e:	4a6e      	ldr	r2, [pc, #440]	; (8003938 <UART_SetConfig+0x2bc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d112      	bne.n	80037aa <UART_SetConfig+0x12e>
 8003784:	4b66      	ldr	r3, [pc, #408]	; (8003920 <UART_SetConfig+0x2a4>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003792:	f000 8097 	beq.w	80038c4 <UART_SetConfig+0x248>
 8003796:	d805      	bhi.n	80037a4 <UART_SetConfig+0x128>
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8098 	beq.w	80038ce <UART_SetConfig+0x252>
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	e7cc      	b.n	800373e <UART_SetConfig+0xc2>
 80037a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037a8:	e7ce      	b.n	8003748 <UART_SetConfig+0xcc>
 80037aa:	4a5b      	ldr	r2, [pc, #364]	; (8003918 <UART_SetConfig+0x29c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d1c8      	bne.n	8003742 <UART_SetConfig+0xc6>
 80037b0:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <UART_SetConfig+0x2a4>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037be:	d018      	beq.n	80037f2 <UART_SetConfig+0x176>
 80037c0:	d806      	bhi.n	80037d0 <UART_SetConfig+0x154>
 80037c2:	b15b      	cbz	r3, 80037dc <UART_SetConfig+0x160>
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d1bb      	bne.n	8003742 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7fe ffc3 	bl	8002754 <HAL_RCC_GetSysClockFreq>
        break;
 80037ce:	e007      	b.n	80037e0 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d4:	d1b5      	bne.n	8003742 <UART_SetConfig+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80037da:	e00b      	b.n	80037f4 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7ff f8e4 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80037e0:	b940      	cbnz	r0, 80037f4 <UART_SetConfig+0x178>
 80037e2:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80037e4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80037e8:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80037ea:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80037ec:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 80037f0:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 80037f2:	4852      	ldr	r0, [pc, #328]	; (800393c <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037f4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037f6:	4b52      	ldr	r3, [pc, #328]	; (8003940 <UART_SetConfig+0x2c4>)
 80037f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037fa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037fe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003802:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003806:	4299      	cmp	r1, r3
 8003808:	d89b      	bhi.n	8003742 <UART_SetConfig+0xc6>
 800380a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800380e:	d898      	bhi.n	8003742 <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003810:	2300      	movs	r3, #0
 8003812:	4619      	mov	r1, r3
 8003814:	f7fc fd54 	bl	80002c0 <__aeabi_uldivmod>
 8003818:	0209      	lsls	r1, r1, #8
 800381a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800381e:	086b      	lsrs	r3, r5, #1
 8003820:	0200      	lsls	r0, r0, #8
 8003822:	18c0      	adds	r0, r0, r3
 8003824:	462a      	mov	r2, r5
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	f141 0100 	adc.w	r1, r1, #0
 800382e:	f7fc fd47 	bl	80002c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003832:	4b44      	ldr	r3, [pc, #272]	; (8003944 <UART_SetConfig+0x2c8>)
 8003834:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003838:	429a      	cmp	r2, r3
 800383a:	d882      	bhi.n	8003742 <UART_SetConfig+0xc6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	60d8      	str	r0, [r3, #12]
 8003840:	e7cf      	b.n	80037e2 <UART_SetConfig+0x166>
        pclk = (uint32_t) HSI_VALUE;
 8003842:	483e      	ldr	r0, [pc, #248]	; (800393c <UART_SetConfig+0x2c0>)
 8003844:	e04a      	b.n	80038dc <UART_SetConfig+0x260>
    switch (clocksource)
 8003846:	2b08      	cmp	r3, #8
 8003848:	f63f af7b 	bhi.w	8003742 <UART_SetConfig+0xc6>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0x1d8>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003879 	.word	0x08003879
 8003858:	080038a1 	.word	0x080038a1
 800385c:	080038cb 	.word	0x080038cb
 8003860:	08003743 	.word	0x08003743
 8003864:	080038a7 	.word	0x080038a7
 8003868:	08003743 	.word	0x08003743
 800386c:	08003743 	.word	0x08003743
 8003870:	08003743 	.word	0x08003743
 8003874:	08003753 	.word	0x08003753
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7ff f896 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800387c:	2800      	cmp	r0, #0
 800387e:	d0b0      	beq.n	80037e2 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003884:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <UART_SetConfig+0x2c4>)
 8003886:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800388a:	fbb0 f0f2 	udiv	r0, r0, r2
 800388e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003892:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003896:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800389a:	f1a0 0210 	sub.w	r2, r0, #16
 800389e:	e7cb      	b.n	8003838 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a0:	f7ff f894 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
        break;
 80038a4:	e7ea      	b.n	800387c <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 80038a6:	f7fe ff55 	bl	8002754 <HAL_RCC_GetSysClockFreq>
        break;
 80038aa:	e7e7      	b.n	800387c <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80038b0:	d1f6      	bne.n	80038a0 <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b2:	f7ff f88b 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
        break;
 80038b6:	e00f      	b.n	80038d8 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80038bc:	d1f3      	bne.n	80038a6 <UART_SetConfig+0x22a>
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7fe ff49 	bl	8002754 <HAL_RCC_GetSysClockFreq>
        break;
 80038c2:	e009      	b.n	80038d8 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80038c8:	d0bb      	beq.n	8003842 <UART_SetConfig+0x1c6>
        pclk = (uint32_t) HSI_VALUE;
 80038ca:	481c      	ldr	r0, [pc, #112]	; (800393c <UART_SetConfig+0x2c0>)
 80038cc:	e7d8      	b.n	8003880 <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80038d2:	d1d1      	bne.n	8003878 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d4:	f7ff f868 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80038d8:	2800      	cmp	r0, #0
 80038da:	d082      	beq.n	80037e2 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038dc:	6861      	ldr	r1, [r4, #4]
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <UART_SetConfig+0x2c4>)
 80038e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80038e2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80038e6:	fbb0 f2f2 	udiv	r2, r0, r2
 80038ea:	084b      	lsrs	r3, r1, #1
 80038ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038f4:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f8:	f1a3 0110 	sub.w	r1, r3, #16
 80038fc:	4291      	cmp	r1, r2
 80038fe:	f63f af20 	bhi.w	8003742 <UART_SetConfig+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003902:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003906:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003908:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800390a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800390e:	4313      	orrs	r3, r2
 8003910:	60cb      	str	r3, [r1, #12]
 8003912:	e766      	b.n	80037e2 <UART_SetConfig+0x166>
 8003914:	cfff69f3 	.word	0xcfff69f3
 8003918:	40008000 	.word	0x40008000
 800391c:	40013800 	.word	0x40013800
 8003920:	40021000 	.word	0x40021000
 8003924:	080063cf 	.word	0x080063cf
 8003928:	40004400 	.word	0x40004400
 800392c:	080063d2 	.word	0x080063d2
 8003930:	40004800 	.word	0x40004800
 8003934:	40004c00 	.word	0x40004c00
 8003938:	40005000 	.word	0x40005000
 800393c:	00f42400 	.word	0x00f42400
 8003940:	080063e0 	.word	0x080063e0
 8003944:	000ffcff 	.word	0x000ffcff

08003948 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003948:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800394a:	071a      	lsls	r2, r3, #28
{
 800394c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394e:	d506      	bpl.n	800395e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003950:	6801      	ldr	r1, [r0, #0]
 8003952:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003954:	684a      	ldr	r2, [r1, #4]
 8003956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800395a:	4322      	orrs	r2, r4
 800395c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800395e:	07dc      	lsls	r4, r3, #31
 8003960:	d506      	bpl.n	8003970 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003962:	6801      	ldr	r1, [r0, #0]
 8003964:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003966:	684a      	ldr	r2, [r1, #4]
 8003968:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800396c:	4322      	orrs	r2, r4
 800396e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003970:	0799      	lsls	r1, r3, #30
 8003972:	d506      	bpl.n	8003982 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003974:	6801      	ldr	r1, [r0, #0]
 8003976:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003978:	684a      	ldr	r2, [r1, #4]
 800397a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800397e:	4322      	orrs	r2, r4
 8003980:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003982:	075a      	lsls	r2, r3, #29
 8003984:	d506      	bpl.n	8003994 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003986:	6801      	ldr	r1, [r0, #0]
 8003988:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800398a:	684a      	ldr	r2, [r1, #4]
 800398c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003990:	4322      	orrs	r2, r4
 8003992:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003994:	06dc      	lsls	r4, r3, #27
 8003996:	d506      	bpl.n	80039a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003998:	6801      	ldr	r1, [r0, #0]
 800399a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800399c:	688a      	ldr	r2, [r1, #8]
 800399e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039a2:	4322      	orrs	r2, r4
 80039a4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039a6:	0699      	lsls	r1, r3, #26
 80039a8:	d506      	bpl.n	80039b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039aa:	6801      	ldr	r1, [r0, #0]
 80039ac:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80039ae:	688a      	ldr	r2, [r1, #8]
 80039b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b4:	4322      	orrs	r2, r4
 80039b6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b8:	065a      	lsls	r2, r3, #25
 80039ba:	d50f      	bpl.n	80039dc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039bc:	6801      	ldr	r1, [r0, #0]
 80039be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80039c0:	684a      	ldr	r2, [r1, #4]
 80039c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80039c6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039cc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ce:	d105      	bne.n	80039dc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d0:	684a      	ldr	r2, [r1, #4]
 80039d2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80039d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80039d8:	4322      	orrs	r2, r4
 80039da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	d506      	bpl.n	80039ee <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e0:	6802      	ldr	r2, [r0, #0]
 80039e2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80039e4:	6853      	ldr	r3, [r2, #4]
 80039e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6053      	str	r3, [r2, #4]
}
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <UART_WaitOnFlagUntilTimeout>:
{
 80039f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
 80039fc:	4617      	mov	r7, r2
 80039fe:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	69d3      	ldr	r3, [r2, #28]
 8003a04:	ea35 0303 	bics.w	r3, r5, r3
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	42bb      	cmp	r3, r7
 8003a10:	d001      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003a12:	2000      	movs	r0, #0
 8003a14:	e022      	b.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003a16:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a1a:	d0f2      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7fd f9de 	bl	8000ddc <HAL_GetTick>
 8003a20:	eba0 0008 	sub.w	r0, r0, r8
 8003a24:	4548      	cmp	r0, r9
 8003a26:	d829      	bhi.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x8c>
 8003a28:	f1b9 0f00 	cmp.w	r9, #0
 8003a2c:	d026      	beq.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a2e:	6821      	ldr	r1, [r4, #0]
 8003a30:	680b      	ldr	r3, [r1, #0]
 8003a32:	075a      	lsls	r2, r3, #29
 8003a34:	d5e4      	bpl.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x10>
 8003a36:	2d80      	cmp	r5, #128	; 0x80
 8003a38:	d0e2      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x10>
 8003a3a:	2d40      	cmp	r5, #64	; 0x40
 8003a3c:	d0e0      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a3e:	69ce      	ldr	r6, [r1, #28]
 8003a40:	f016 0608 	ands.w	r6, r6, #8
 8003a44:	d00c      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a46:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8003a48:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a4a:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8003a4c:	f7ff f9fe 	bl	8002e4c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003a50:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a52:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8003a56:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
          return HAL_ERROR;
 8003a5a:	2001      	movs	r0, #1
}
 8003a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a60:	69cb      	ldr	r3, [r1, #28]
 8003a62:	051b      	lsls	r3, r3, #20
 8003a64:	d5cc      	bpl.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a6a:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff f9ed 	bl	8002e4c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a72:	2320      	movs	r3, #32
 8003a74:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8003a78:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	e7ed      	b.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x6c>

08003a80 <UART_CheckIdleState>:
{
 8003a80:	b530      	push	{r4, r5, lr}
 8003a82:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	2500      	movs	r5, #0
{
 8003a86:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8003a8c:	f7fd f9a6 	bl	8000ddc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8003a96:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a98:	d51d      	bpl.n	8003ad6 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003a9e:	9200      	str	r2, [sp, #0]
 8003aa0:	9003      	str	r0, [sp, #12]
 8003aa2:	462a      	mov	r2, r5
 8003aa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff ffa1 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 8003aae:	9b03      	ldr	r3, [sp, #12]
 8003ab0:	b188      	cbz	r0, 8003ad6 <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ab2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	e852 3f00 	ldrex	r3, [r2]
 8003ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	e842 3100 	strex	r1, r3, [r2]
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	d1f6      	bne.n	8003ab2 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8003aca:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003acc:	2300      	movs	r3, #0
 8003ace:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8003ad2:	b005      	add	sp, #20
 8003ad4:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	0752      	lsls	r2, r2, #29
 8003adc:	d523      	bpl.n	8003b26 <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ade:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003ae2:	9200      	str	r2, [sp, #0]
 8003ae4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7ff ff80 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 8003af0:	b1c8      	cbz	r0, 8003b26 <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003af2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	e852 3f00 	ldrex	r3, [r2]
 8003af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	2900      	cmp	r1, #0
 8003b04:	d1f5      	bne.n	8003af2 <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	f102 0308 	add.w	r3, r2, #8
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	f102 0008 	add.w	r0, r2, #8
 8003b16:	e840 3100 	strex	r1, r3, [r0]
 8003b1a:	2900      	cmp	r1, #0
 8003b1c:	d1f3      	bne.n	8003b06 <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003b24:	e7d1      	b.n	8003aca <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8003b26:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003b2a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b32:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b34:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8003b36:	e7c9      	b.n	8003acc <UART_CheckIdleState+0x4c>

08003b38 <HAL_UART_Init>:
{
 8003b38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	b350      	cbz	r0, 8003b94 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003b42:	b91b      	cbnz	r3, 8003b4c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003b44:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8003b48:	f7fc fe60 	bl	800080c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003b4c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b4e:	2324      	movs	r3, #36	; 0x24
 8003b50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b5e:	b113      	cbz	r3, 8003b66 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff fef1 	bl	8003948 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7ff fd88 	bl	800367c <UART_SetConfig>
 8003b6c:	2801      	cmp	r0, #1
 8003b6e:	d011      	beq.n	8003b94 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b80:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003b88:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003b8a:	601a      	str	r2, [r3, #0]
}
 8003b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003b90:	f7ff bf76 	b.w	8003a80 <UART_CheckIdleState>
}
 8003b94:	2001      	movs	r0, #1
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <UART_Start_Receive_IT>:
{
 8003b98:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 8003b9a:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 8003b9c:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8003b9e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxISR       = NULL;
 8003ba2:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8003ba4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 8003ba8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003bac:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8003bae:	d135      	bne.n	8003c1c <UART_Start_Receive_IT+0x84>
 8003bb0:	6903      	ldr	r3, [r0, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003bb8:	bf18      	it	ne
 8003bba:	23ff      	movne	r3, #255	; 0xff
 8003bbc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bc6:	2322      	movs	r3, #34	; 0x22
 8003bc8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bcc:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	f101 0308 	add.w	r3, r1, #8
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	3108      	adds	r1, #8
 8003bdc:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 8003be0:	6803      	ldr	r3, [r0, #0]
 8003be2:	2c00      	cmp	r4, #0
 8003be4:	d1f2      	bne.n	8003bcc <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003be6:	6e45      	ldr	r5, [r0, #100]	; 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	6884      	ldr	r4, [r0, #8]
 8003bea:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003bec:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8003bf0:	d134      	bne.n	8003c5c <UART_Start_Receive_IT+0xc4>
 8003bf2:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8003bf6:	4295      	cmp	r5, r2
 8003bf8:	d830      	bhi.n	8003c5c <UART_Start_Receive_IT+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003bfe:	d11d      	bne.n	8003c3c <UART_Start_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003c00:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <UART_Start_Receive_IT+0x100>)
 8003c02:	4c26      	ldr	r4, [pc, #152]	; (8003c9c <UART_Start_Receive_IT+0x104>)
 8003c04:	2900      	cmp	r1, #0
 8003c06:	bf18      	it	ne
 8003c08:	4622      	movne	r2, r4
 8003c0a:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003c0c:	b1c1      	cbz	r1, 8003c40 <UART_Start_Receive_IT+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 8003c1a:	e7f7      	b.n	8003c0c <UART_Start_Receive_IT+0x74>
  UART_MASK_COMPUTATION(huart);
 8003c1c:	b929      	cbnz	r1, 8003c2a <UART_Start_Receive_IT+0x92>
 8003c1e:	6903      	ldr	r3, [r0, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf14      	ite	ne
 8003c24:	237f      	movne	r3, #127	; 0x7f
 8003c26:	23ff      	moveq	r3, #255	; 0xff
 8003c28:	e7c8      	b.n	8003bbc <UART_Start_Receive_IT+0x24>
 8003c2a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003c2e:	d1c5      	bne.n	8003bbc <UART_Start_Receive_IT+0x24>
 8003c30:	6903      	ldr	r3, [r0, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf0c      	ite	eq
 8003c36:	237f      	moveq	r3, #127	; 0x7f
 8003c38:	233f      	movne	r3, #63	; 0x3f
 8003c3a:	e7bf      	b.n	8003bbc <UART_Start_Receive_IT+0x24>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <UART_Start_Receive_IT+0x104>)
 8003c3e:	e7e4      	b.n	8003c0a <UART_Start_Receive_IT+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	f103 0208 	add.w	r2, r3, #8
 8003c44:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003c48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	f103 0008 	add.w	r0, r3, #8
 8003c50:	e840 2100 	strex	r1, r2, [r0]
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d1f3      	bne.n	8003c40 <UART_Start_Receive_IT+0xa8>
}
 8003c58:	2000      	movs	r0, #0
 8003c5a:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003c60:	d10f      	bne.n	8003c82 <UART_Start_Receive_IT+0xea>
      huart->RxISR = UART_RxISR_8BIT;
 8003c62:	4a0f      	ldr	r2, [pc, #60]	; (8003ca0 <UART_Start_Receive_IT+0x108>)
 8003c64:	4c0f      	ldr	r4, [pc, #60]	; (8003ca4 <UART_Start_Receive_IT+0x10c>)
 8003c66:	2900      	cmp	r1, #0
 8003c68:	bf18      	it	ne
 8003c6a:	4622      	movne	r2, r4
 8003c6c:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003c6e:	b151      	cbz	r1, 8003c86 <UART_Start_Receive_IT+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003c74:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	e843 2100 	strex	r1, r2, [r3]
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d1f7      	bne.n	8003c70 <UART_Start_Receive_IT+0xd8>
 8003c80:	e7ea      	b.n	8003c58 <UART_Start_Receive_IT+0xc0>
      huart->RxISR = UART_RxISR_8BIT;
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <UART_Start_Receive_IT+0x10c>)
 8003c84:	e7f2      	b.n	8003c6c <UART_Start_Receive_IT+0xd4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c8a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	e843 2100 	strex	r1, r2, [r3]
 8003c92:	2900      	cmp	r1, #0
 8003c94:	d1f7      	bne.n	8003c86 <UART_Start_Receive_IT+0xee>
 8003c96:	e7df      	b.n	8003c58 <UART_Start_Receive_IT+0xc0>
 8003c98:	080034e5 	.word	0x080034e5
 8003c9c:	08003349 	.word	0x08003349
 8003ca0:	08003285 	.word	0x08003285
 8003ca4:	080031b9 	.word	0x080031b9

08003ca8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ca8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003cac:	2b20      	cmp	r3, #32
{
 8003cae:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cb0:	d115      	bne.n	8003cde <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 8003cb2:	b1b9      	cbz	r1, 8003ce4 <HAL_UART_Receive_IT+0x3c>
 8003cb4:	b1b2      	cbz	r2, 8003ce4 <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb6:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cb8:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_UART_Receive_IT+0x40>)
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cc2:	6863      	ldr	r3, [r4, #4]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	d507      	bpl.n	8003cd8 <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	e844 3500 	strex	r5, r3, [r4]
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	d1f7      	bne.n	8003cc8 <HAL_UART_Receive_IT+0x20>
}
 8003cd8:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cda:	f7ff bf5d 	b.w	8003b98 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8003cde:	2002      	movs	r0, #2
}
 8003ce0:	bc30      	pop	{r4, r5}
 8003ce2:	4770      	bx	lr
      return HAL_ERROR;
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e7fb      	b.n	8003ce0 <HAL_UART_Receive_IT+0x38>
 8003ce8:	40008000 	.word	0x40008000

08003cec <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cec:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003cee:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cf0:	b92b      	cbnz	r3, 8003cfe <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003cf8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cfc:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cfe:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d00:	4d09      	ldr	r5, [pc, #36]	; (8003d28 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d02:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d04:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d06:	4c09      	ldr	r4, [pc, #36]	; (8003d2c <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d08:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d0a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d0e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d10:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d18:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d1c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d1e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003d26:	e7e7      	b.n	8003cf8 <UARTEx_SetNbDataToProcess+0xc>
 8003d28:	08006400 	.word	0x08006400
 8003d2c:	080063f8 	.word	0x080063f8

08003d30 <HAL_UARTEx_WakeupCallback>:
}
 8003d30:	4770      	bx	lr

08003d32 <HAL_UARTEx_RxFifoFullCallback>:
 8003d32:	4770      	bx	lr

08003d34 <HAL_UARTEx_TxFifoEmptyCallback>:
 8003d34:	4770      	bx	lr

08003d36 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003d36:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d014      	beq.n	8003d68 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d3e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	2324      	movs	r3, #36	; 0x24
 8003d42:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d46:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d50:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d58:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8003d60:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8003d64:	4618      	mov	r0, r3
 8003d66:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003d68:	2002      	movs	r0, #2
}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003d6c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003d6e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8003d72:	2b01      	cmp	r3, #1
{
 8003d74:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003d76:	d017      	beq.n	8003da8 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d78:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d7a:	2324      	movs	r3, #36	; 0x24
 8003d7c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d80:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003d82:	682b      	ldr	r3, [r5, #0]
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d8a:	68ab      	ldr	r3, [r5, #8]
 8003d8c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003d90:	4319      	orrs	r1, r3
 8003d92:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003d94:	f7ff ffaa 	bl	8003cec <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8003d98:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d9a:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003da8:	2002      	movs	r0, #2
 8003daa:	e7fc      	b.n	8003da6 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08003dac <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003dac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003dae:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8003db2:	2b01      	cmp	r3, #1
{
 8003db4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003db6:	d017      	beq.n	8003de8 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003db8:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003dba:	2324      	movs	r3, #36	; 0x24
 8003dbc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dc0:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003dca:	68ab      	ldr	r3, [r5, #8]
 8003dcc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8003dd0:	4319      	orrs	r1, r3
 8003dd2:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003dd4:	f7ff ff8a 	bl	8003cec <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dda:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003ddc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8003de0:	2000      	movs	r0, #0
 8003de2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003de8:	2002      	movs	r0, #2
 8003dea:	e7fc      	b.n	8003de6 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08003dec <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dec:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003dee:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8003df2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003df6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	4770      	bx	lr

08003dfe <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003dfe:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003e02:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003e06:	045b      	lsls	r3, r3, #17
 8003e08:	0c5b      	lsrs	r3, r3, #17
 8003e0a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003e0e:	2000      	movs	r0, #0
 8003e10:	4770      	bx	lr

08003e12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e12:	b082      	sub	sp, #8
 8003e14:	ab02      	add	r3, sp, #8
 8003e16:	e903 0006 	stmdb	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e26:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e2a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50

  return HAL_OK;
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	b002      	add	sp, #8
 8003e32:	4770      	bx	lr

08003e34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e34:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e36:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003e38:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e3a:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8003e3e:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8003e42:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8003e46:	0424      	lsls	r4, r4, #16
{
 8003e48:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e4a:	462a      	mov	r2, r5
 8003e4c:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8003e4e:	2e03      	cmp	r6, #3
 8003e50:	d853      	bhi.n	8003efa <USB_ActivateEndpoint+0xc6>
 8003e52:	e8df f006 	tbb	[pc, r6]
 8003e56:	4f02      	.short	0x4f02
 8003e58:	4b4d      	.short	0x4b4d
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e5a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003e5e:	4630      	mov	r0, r6
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e60:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003e64:	ea44 040c 	orr.w	r4, r4, ip
 8003e68:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e6c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003e70:	f8df e284 	ldr.w	lr, [pc, #644]	; 80040f8 <USB_ActivateEndpoint+0x2c4>
 8003e74:	b2a4      	uxth	r4, r4
 8003e76:	ea04 040e 	and.w	r4, r4, lr
 8003e7a:	432c      	orrs	r4, r5
 8003e7c:	ea4c 0404 	orr.w	r4, ip, r4
 8003e80:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8003e84:	7b0c      	ldrb	r4, [r1, #12]
 8003e86:	eb03 07c5 	add.w	r7, r3, r5, lsl #3
 8003e8a:	2c00      	cmp	r4, #0
 8003e8c:	f040 8087 	bne.w	8003f9e <USB_ActivateEndpoint+0x16a>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e90:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8003e92:	f891 c001 	ldrb.w	ip, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e96:	0864      	lsrs	r4, r4, #1
 8003e98:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8003e9a:	f1bc 0f00 	cmp.w	ip, #0
 8003e9e:	d02e      	beq.n	8003efe <USB_ActivateEndpoint+0xca>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ea0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003ea4:	fa17 f181 	uxtah	r1, r7, r1
 8003ea8:	f8a1 4400 	strh.w	r4, [r1, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003eb0:	0649      	lsls	r1, r1, #25
 8003eb2:	d50a      	bpl.n	8003eca <USB_ActivateEndpoint+0x96>
 8003eb4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003eb8:	b289      	uxth	r1, r1
 8003eba:	ea01 010e 	and.w	r1, r1, lr
 8003ebe:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003ec2:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003ec6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003eca:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003ece:	4c88      	ldr	r4, [pc, #544]	; (80040f0 <USB_ActivateEndpoint+0x2bc>)
 8003ed0:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003ed2:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ed4:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8003ed8:	d001      	beq.n	8003ede <USB_ActivateEndpoint+0xaa>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003eda:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ede:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003ee2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003ee6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8003eea:	e0b8      	b.n	800405e <USB_ActivateEndpoint+0x22a>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003eec:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003ef0:	2000      	movs	r0, #0
      break;
 8003ef2:	e7b5      	b.n	8003e60 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ef4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8003ef8:	e7fa      	b.n	8003ef0 <USB_ActivateEndpoint+0xbc>
  switch (ep->type)
 8003efa:	2001      	movs	r0, #1
 8003efc:	e7b0      	b.n	8003e60 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003efe:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f02:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f04:	fa17 f686 	uxtah	r6, r7, r6
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f08:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f0a:	f8a6 4404 	strh.w	r4, [r6, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f0e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003f12:	fa17 f484 	uxtah	r4, r7, r4
 8003f16:	f8b4 6406 	ldrh.w	r6, [r4, #1030]	; 0x406
 8003f1a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003f1e:	f8a4 6406 	strh.w	r6, [r4, #1030]	; 0x406
 8003f22:	d92b      	bls.n	8003f7c <USB_ActivateEndpoint+0x148>
 8003f24:	094e      	lsrs	r6, r1, #5
 8003f26:	06cf      	lsls	r7, r1, #27
 8003f28:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 8003f2c:	bf08      	it	eq
 8003f2e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003f32:	b289      	uxth	r1, r1
 8003f34:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003f38:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003f3c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003f40:	b289      	uxth	r1, r1
 8003f42:	f8a4 1406 	strh.w	r1, [r4, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f46:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f4a:	044f      	lsls	r7, r1, #17
 8003f4c:	d50d      	bpl.n	8003f6a <USB_ActivateEndpoint+0x136>
 8003f4e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f52:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003f56:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003f5a:	0409      	lsls	r1, r1, #16
 8003f5c:	0c09      	lsrs	r1, r1, #16
 8003f5e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003f62:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003f66:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f6a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003f6e:	4c61      	ldr	r4, [pc, #388]	; (80040f4 <USB_ActivateEndpoint+0x2c0>)
 8003f70:	b289      	uxth	r1, r1
 8003f72:	4021      	ands	r1, r4
      if (ep->num == 0U)
 8003f74:	b985      	cbnz	r5, 8003f98 <USB_ActivateEndpoint+0x164>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f76:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8003f7a:	e7b0      	b.n	8003ede <USB_ActivateEndpoint+0xaa>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f7c:	b911      	cbnz	r1, 8003f84 <USB_ActivateEndpoint+0x150>
 8003f7e:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 8003f82:	e7d9      	b.n	8003f38 <USB_ActivateEndpoint+0x104>
 8003f84:	084e      	lsrs	r6, r1, #1
 8003f86:	07c9      	lsls	r1, r1, #31
 8003f88:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 8003f8c:	bf48      	it	mi
 8003f8e:	3601      	addmi	r6, #1
 8003f90:	b289      	uxth	r1, r1
 8003f92:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003f96:	e7d3      	b.n	8003f40 <USB_ActivateEndpoint+0x10c>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003f98:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8003f9c:	e79f      	b.n	8003ede <USB_ActivateEndpoint+0xaa>
    if (ep->type == EP_TYPE_BULK)
 8003f9e:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003fa0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8003fa4:	d15c      	bne.n	8004060 <USB_ActivateEndpoint+0x22c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003fa6:	b2a4      	uxth	r4, r4
 8003fa8:	ea04 040e 	and.w	r4, r4, lr
 8003fac:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8003fb0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003fb4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003fb8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003fbc:	890c      	ldrh	r4, [r1, #8]
 8003fbe:	fa17 f585 	uxtah	r5, r7, r5
 8003fc2:	0864      	lsrs	r4, r4, #1
 8003fc4:	0064      	lsls	r4, r4, #1
 8003fc6:	f8a5 4400 	strh.w	r4, [r5, #1024]	; 0x400
 8003fca:	894c      	ldrh	r4, [r1, #10]
 8003fcc:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003fd0:	0864      	lsrs	r4, r4, #1
 8003fd2:	fa17 f585 	uxtah	r5, r7, r5
 8003fd6:	0064      	lsls	r4, r4, #1
 8003fd8:	f8a5 4404 	strh.w	r4, [r5, #1028]	; 0x404
    if (ep->is_in == 0U)
 8003fdc:	7849      	ldrb	r1, [r1, #1]
 8003fde:	2900      	cmp	r1, #0
 8003fe0:	d149      	bne.n	8004076 <USB_ActivateEndpoint+0x242>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fe2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003fe6:	044e      	lsls	r6, r1, #17
 8003fe8:	d50d      	bpl.n	8004006 <USB_ActivateEndpoint+0x1d2>
 8003fea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003fee:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003ff2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003ff6:	0409      	lsls	r1, r1, #16
 8003ff8:	0c09      	lsrs	r1, r1, #16
 8003ffa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003ffe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004002:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004006:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800400a:	064d      	lsls	r5, r1, #25
 800400c:	d50d      	bpl.n	800402a <USB_ActivateEndpoint+0x1f6>
 800400e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004012:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004016:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800401a:	0409      	lsls	r1, r1, #16
 800401c:	0c09      	lsrs	r1, r1, #16
 800401e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004022:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004026:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800402a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800402e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004032:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004036:	0409      	lsls	r1, r1, #16
 8004038:	0c09      	lsrs	r1, r1, #16
 800403a:	f248 0480 	movw	r4, #32896	; 0x8080
 800403e:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8004042:	4321      	orrs	r1, r4
 8004044:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004048:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800404c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004050:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004054:	0409      	lsls	r1, r1, #16
 8004056:	0c09      	lsrs	r1, r1, #16
 8004058:	430c      	orrs	r4, r1
 800405a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004060:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 8004064:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004068:	0424      	lsls	r4, r4, #16
 800406a:	0c24      	lsrs	r4, r4, #16
 800406c:	ea4c 0c04 	orr.w	ip, ip, r4
 8004070:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
 8004074:	e7a0      	b.n	8003fb8 <USB_ActivateEndpoint+0x184>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004076:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800407a:	044c      	lsls	r4, r1, #17
 800407c:	d50d      	bpl.n	800409a <USB_ActivateEndpoint+0x266>
 800407e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004082:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004086:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800408a:	0409      	lsls	r1, r1, #16
 800408c:	0c09      	lsrs	r1, r1, #16
 800408e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004092:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004096:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800409a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800409e:	0649      	lsls	r1, r1, #25
 80040a0:	d50d      	bpl.n	80040be <USB_ActivateEndpoint+0x28a>
 80040a2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80040a6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80040aa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80040ae:	0409      	lsls	r1, r1, #16
 80040b0:	0c09      	lsrs	r1, r1, #16
 80040b2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80040b6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80040ba:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80040c2:	4c0b      	ldr	r4, [pc, #44]	; (80040f0 <USB_ActivateEndpoint+0x2bc>)
 80040c4:	b289      	uxth	r1, r1
 80040c6:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80040c8:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040ca:	bf18      	it	ne
 80040cc:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040d0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80040d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80040d8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040dc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80040e0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80040e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80040e8:	0409      	lsls	r1, r1, #16
 80040ea:	0c09      	lsrs	r1, r1, #16
 80040ec:	e6f7      	b.n	8003ede <USB_ActivateEndpoint+0xaa>
 80040ee:	bf00      	nop
 80040f0:	ffff8fbf 	.word	0xffff8fbf
 80040f4:	ffffbf8f 	.word	0xffffbf8f
 80040f8:	ffff8f8f 	.word	0xffff8f8f

080040fc <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80040fc:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040fe:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004100:	7b09      	ldrb	r1, [r1, #12]
 8004102:	bbd9      	cbnz	r1, 800417c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004104:	b30a      	cbz	r2, 800414a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004106:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800410a:	0651      	lsls	r1, r2, #25
 800410c:	d50d      	bpl.n	800412a <USB_DeactivateEndpoint+0x2e>
 800410e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004112:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004116:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800411a:	0412      	lsls	r2, r2, #16
 800411c:	0c12      	lsrs	r2, r2, #16
 800411e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004122:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004126:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800412a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800412e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004136:	0412      	lsls	r2, r2, #16
 8004138:	0c12      	lsrs	r2, r2, #16
 800413a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004142:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004146:	2000      	movs	r0, #0
 8004148:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800414a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800414e:	0452      	lsls	r2, r2, #17
 8004150:	d50d      	bpl.n	800416e <USB_DeactivateEndpoint+0x72>
 8004152:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004156:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800415a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800415e:	0412      	lsls	r2, r2, #16
 8004160:	0c12      	lsrs	r2, r2, #16
 8004162:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800416a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800416e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004176:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800417a:	e7dc      	b.n	8004136 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800417c:	2a00      	cmp	r2, #0
 800417e:	d14a      	bne.n	8004216 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004180:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004184:	0451      	lsls	r1, r2, #17
 8004186:	d50d      	bpl.n	80041a4 <USB_DeactivateEndpoint+0xa8>
 8004188:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800418c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004190:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004194:	0412      	lsls	r2, r2, #16
 8004196:	0c12      	lsrs	r2, r2, #16
 8004198:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800419c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041a0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041a4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041a8:	0652      	lsls	r2, r2, #25
 80041aa:	d50d      	bpl.n	80041c8 <USB_DeactivateEndpoint+0xcc>
 80041ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041b8:	0412      	lsls	r2, r2, #16
 80041ba:	0c12      	lsrs	r2, r2, #16
 80041bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80041c4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80041c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041d4:	0412      	lsls	r2, r2, #16
 80041d6:	0c12      	lsrs	r2, r2, #16
 80041d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80041e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041f0:	0412      	lsls	r2, r2, #16
 80041f2:	0c12      	lsrs	r2, r2, #16
 80041f4:	f248 0180 	movw	r1, #32896	; 0x8080
 80041f8:	430a      	orrs	r2, r1
 80041fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004202:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800420a:	0412      	lsls	r2, r2, #16
 800420c:	0c12      	lsrs	r2, r2, #16
 800420e:	4311      	orrs	r1, r2
 8004210:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8004214:	e797      	b.n	8004146 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004216:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800421a:	0451      	lsls	r1, r2, #17
 800421c:	d50d      	bpl.n	800423a <USB_DeactivateEndpoint+0x13e>
 800421e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004222:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004226:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800422a:	0412      	lsls	r2, r2, #16
 800422c:	0c12      	lsrs	r2, r2, #16
 800422e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004236:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800423a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800423e:	0652      	lsls	r2, r2, #25
 8004240:	d50d      	bpl.n	800425e <USB_DeactivateEndpoint+0x162>
 8004242:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004246:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800424a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800424e:	0412      	lsls	r2, r2, #16
 8004250:	0c12      	lsrs	r2, r2, #16
 8004252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004256:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800425a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800425e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004262:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004266:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800426a:	0412      	lsls	r2, r2, #16
 800426c:	0c12      	lsrs	r2, r2, #16
 800426e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004272:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004276:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800427a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800427e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004286:	0412      	lsls	r2, r2, #16
 8004288:	0c12      	lsrs	r2, r2, #16
 800428a:	f248 0180 	movw	r1, #32896	; 0x8080
 800428e:	430a      	orrs	r2, r1
 8004290:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004294:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004298:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800429c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042a0:	e7b3      	b.n	800420a <USB_DeactivateEndpoint+0x10e>

080042a2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80042a2:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80042a4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80042a6:	b18b      	cbz	r3, 80042cc <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80042a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	0c1b      	lsrs	r3, r3, #16
 80042b8:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80042bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80042c8:	2000      	movs	r0, #0
 80042ca:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80042cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042e0:	e7ec      	b.n	80042bc <USB_EPSetStall+0x1a>

080042e2 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80042e2:	7b0b      	ldrb	r3, [r1, #12]
 80042e4:	bb3b      	cbnz	r3, 8004336 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80042e6:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042e8:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80042ea:	b333      	cbz	r3, 800433a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042f0:	065b      	lsls	r3, r3, #25
 80042f2:	d50d      	bpl.n	8004310 <USB_EPClearStall+0x2e>
 80042f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	0c1b      	lsrs	r3, r3, #16
 8004304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800430c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004310:	78cb      	ldrb	r3, [r1, #3]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d00f      	beq.n	8004336 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004316:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800432a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004332:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004336:	2000      	movs	r0, #0
 8004338:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800433a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800433e:	045b      	lsls	r3, r3, #17
 8004340:	d50d      	bpl.n	800435e <USB_EPClearStall+0x7c>
 8004342:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800435e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004372:	e7da      	b.n	800432a <USB_EPClearStall+0x48>

08004374 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004374:	b911      	cbnz	r1, 800437c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800437c:	2000      	movs	r0, #0
 800437e:	4770      	bx	lr

08004380 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004380:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8004384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438c:	b29b      	uxth	r3, r3
 800438e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8004392:	2000      	movs	r0, #0
 8004394:	4770      	bx	lr

08004396 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004396:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800439a:	b280      	uxth	r0, r0
 800439c:	4770      	bx	lr

0800439e <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800439e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80043a2:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80043a4:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80043ac:	1a40      	subs	r0, r0, r1

  for (count = n; count != 0U; count--)
 80043ae:	428b      	cmp	r3, r1
 80043b0:	d100      	bne.n	80043b4 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 80043b2:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 80043b4:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80043b6:	520a      	strh	r2, [r1, r0]
    pBuf++;
 80043b8:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80043ba:	e7f8      	b.n	80043ae <USB_WritePMA+0x10>

080043bc <USB_EPStartXfer>:
{
 80043bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 80043c0:	784a      	ldrb	r2, [r1, #1]
    if (ep->doublebuffer == 0U)
 80043c2:	7b0e      	ldrb	r6, [r1, #12]
  if (ep->is_in == 1U)
 80043c4:	2a01      	cmp	r2, #1
{
 80043c6:	4605      	mov	r5, r0
 80043c8:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80043ca:	f040 811c 	bne.w	8004606 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 80043ce:	f8d1 a010 	ldr.w	sl, [r1, #16]
 80043d2:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043d4:	6949      	ldr	r1, [r1, #20]
 80043d6:	4557      	cmp	r7, sl
 80043d8:	bf28      	it	cs
 80043da:	4657      	movcs	r7, sl
    if (ep->doublebuffer == 0U)
 80043dc:	bb16      	cbnz	r6, 8004424 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043de:	b2bf      	uxth	r7, r7
 80043e0:	88e2      	ldrh	r2, [r4, #6]
 80043e2:	463b      	mov	r3, r7
 80043e4:	f7ff ffdb 	bl	800439e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043e8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80043ec:	7823      	ldrb	r3, [r4, #0]
 80043ee:	f205 4102 	addw	r1, r5, #1026	; 0x402
 80043f2:	fa11 f282 	uxtah	r2, r1, r2
 80043f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80043fa:	8017      	strh	r7, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80043fc:	7822      	ldrb	r2, [r4, #0]
 80043fe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800441e:	2000      	movs	r0, #0
}
 8004420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8004424:	78e3      	ldrb	r3, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 8004426:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004428:	f894 c000 	ldrb.w	ip, [r4]
      if (ep->type == EP_TYPE_BULK)
 800442c:	2b02      	cmp	r3, #2
 800442e:	f040 80d3 	bne.w	80045d8 <USB_EPStartXfer+0x21c>
        if (ep->xfer_len_db > ep->maxpacket)
 8004432:	45b2      	cmp	sl, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004434:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8004438:	f080 80b7 	bcs.w	80045aa <USB_EPStartXfer+0x1ee>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800443c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004440:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004444:	0412      	lsls	r2, r2, #16
 8004446:	0c12      	lsrs	r2, r2, #16
 8004448:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800444c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004450:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004454:	f830 802c 	ldrh.w	r8, [r0, ip, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004458:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 800445c:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800445e:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8004462:	6226      	str	r6, [r4, #32]
            ep->xfer_buff += len;
 8004464:	eb01 0907 	add.w	r9, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004468:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800446a:	d051      	beq.n	8004510 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800446c:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8004470:	fa1e f282 	uxtah	r2, lr, r2
 8004474:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004478:	8962      	ldrh	r2, [r4, #10]
 800447a:	f7ff ff90 	bl	800439e <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800447e:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004480:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8004482:	f8c4 9014 	str.w	r9, [r4, #20]
              ep->xfer_len_db -= len;
 8004486:	bf36      	itet	cc
 8004488:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800448a:	2300      	movcs	r3, #0
 800448c:	463e      	movcc	r6, r7
 800448e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004490:	b2b3      	uxth	r3, r6
 8004492:	bb82      	cbnz	r2, 80044f6 <USB_EPStartXfer+0x13a>
 8004494:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004498:	7821      	ldrb	r1, [r4, #0]
 800449a:	f205 4002 	addw	r0, r5, #1026	; 0x402
 800449e:	fa10 f282 	uxtah	r2, r0, r2
 80044a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80044a6:	2e3e      	cmp	r6, #62	; 0x3e
 80044a8:	8811      	ldrh	r1, [r2, #0]
 80044aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80044ae:	8011      	strh	r1, [r2, #0]
 80044b0:	d914      	bls.n	80044dc <USB_EPStartXfer+0x120>
 80044b2:	8811      	ldrh	r1, [r2, #0]
 80044b4:	0970      	lsrs	r0, r6, #5
 80044b6:	06f6      	lsls	r6, r6, #27
 80044b8:	bf08      	it	eq
 80044ba:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80044be:	b289      	uxth	r1, r1
 80044c0:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80044c4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80044c8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80044cc:	b289      	uxth	r1, r1
 80044ce:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044d0:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044d2:	4649      	mov	r1, r9
 80044d4:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044d6:	f7ff ff62 	bl	800439e <USB_WritePMA>
 80044da:	e78f      	b.n	80043fc <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044dc:	b90e      	cbnz	r6, 80044e2 <USB_EPStartXfer+0x126>
 80044de:	8811      	ldrh	r1, [r2, #0]
 80044e0:	e7f0      	b.n	80044c4 <USB_EPStartXfer+0x108>
 80044e2:	07f1      	lsls	r1, r6, #31
 80044e4:	8811      	ldrh	r1, [r2, #0]
 80044e6:	ea4f 0056 	mov.w	r0, r6, lsr #1
 80044ea:	bf48      	it	mi
 80044ec:	3001      	addmi	r0, #1
 80044ee:	b289      	uxth	r1, r1
 80044f0:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80044f4:	e7ea      	b.n	80044cc <USB_EPStartXfer+0x110>
 80044f6:	2a01      	cmp	r2, #1
 80044f8:	d1ea      	bne.n	80044d0 <USB_EPStartXfer+0x114>
 80044fa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80044fe:	7821      	ldrb	r1, [r4, #0]
 8004500:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8004504:	fa10 f282 	uxtah	r2, r0, r2
 8004508:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800450c:	8013      	strh	r3, [r2, #0]
 800450e:	e7df      	b.n	80044d0 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004510:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 8004514:	fa1e f282 	uxtah	r2, lr, r2
 8004518:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800451c:	8922      	ldrh	r2, [r4, #8]
 800451e:	f7ff ff3e 	bl	800439e <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004522:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004524:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8004526:	f8c4 9014 	str.w	r9, [r4, #20]
              ep->xfer_len_db -= len;
 800452a:	bf36      	itet	cc
 800452c:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800452e:	4643      	movcs	r3, r8
 8004530:	463e      	movcc	r6, r7
 8004532:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004534:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004536:	bb5a      	cbnz	r2, 8004590 <USB_EPStartXfer+0x1d4>
 8004538:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800453c:	7821      	ldrb	r1, [r4, #0]
 800453e:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8004542:	fa10 f282 	uxtah	r2, r0, r2
 8004546:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800454a:	2e3e      	cmp	r6, #62	; 0x3e
 800454c:	8811      	ldrh	r1, [r2, #0]
 800454e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004552:	8011      	strh	r1, [r2, #0]
 8004554:	d910      	bls.n	8004578 <USB_EPStartXfer+0x1bc>
 8004556:	8811      	ldrh	r1, [r2, #0]
 8004558:	0970      	lsrs	r0, r6, #5
 800455a:	06f7      	lsls	r7, r6, #27
 800455c:	bf08      	it	eq
 800455e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004562:	b289      	uxth	r1, r1
 8004564:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004568:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800456c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004570:	b289      	uxth	r1, r1
 8004572:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004574:	8962      	ldrh	r2, [r4, #10]
 8004576:	e7ac      	b.n	80044d2 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004578:	b90e      	cbnz	r6, 800457e <USB_EPStartXfer+0x1c2>
 800457a:	8811      	ldrh	r1, [r2, #0]
 800457c:	e7f4      	b.n	8004568 <USB_EPStartXfer+0x1ac>
 800457e:	8811      	ldrh	r1, [r2, #0]
 8004580:	0870      	lsrs	r0, r6, #1
 8004582:	07f6      	lsls	r6, r6, #31
 8004584:	bf48      	it	mi
 8004586:	3001      	addmi	r0, #1
 8004588:	b289      	uxth	r1, r1
 800458a:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800458e:	e7ef      	b.n	8004570 <USB_EPStartXfer+0x1b4>
 8004590:	2a01      	cmp	r2, #1
 8004592:	d1ef      	bne.n	8004574 <USB_EPStartXfer+0x1b8>
 8004594:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004598:	7821      	ldrb	r1, [r4, #0]
 800459a:	f205 4006 	addw	r0, r5, #1030	; 0x406
 800459e:	fa10 f282 	uxtah	r2, r0, r2
 80045a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80045a6:	8013      	strh	r3, [r2, #0]
 80045a8:	e7e4      	b.n	8004574 <USB_EPStartXfer+0x1b8>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80045aa:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80045ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045b2:	0412      	lsls	r2, r2, #16
 80045b4:	0c12      	lsrs	r2, r2, #16
 80045b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045be:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045c2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80045c6:	f200 4302 	addw	r3, r0, #1026	; 0x402
 80045ca:	fa13 f282 	uxtah	r2, r3, r2
 80045ce:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045d0:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045d4:	8922      	ldrh	r2, [r4, #8]
 80045d6:	e77e      	b.n	80044d6 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045d8:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        ep->xfer_len_db -= len;
 80045dc:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045de:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 80045e2:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045e8:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045ea:	d007      	beq.n	80045fc <USB_EPStartXfer+0x240>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045ec:	f200 4606 	addw	r6, r0, #1030	; 0x406
 80045f0:	fa16 f282 	uxtah	r2, r6, r2
 80045f4:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045f8:	8962      	ldrh	r2, [r4, #10]
 80045fa:	e76c      	b.n	80044d6 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045fc:	f200 4602 	addw	r6, r0, #1026	; 0x402
 8004600:	fa16 f282 	uxtah	r2, r6, r2
 8004604:	e7e4      	b.n	80045d0 <USB_EPStartXfer+0x214>
    if (ep->doublebuffer == 0U)
 8004606:	2e00      	cmp	r6, #0
 8004608:	d13c      	bne.n	8004684 <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 800460a:	698a      	ldr	r2, [r1, #24]
 800460c:	690b      	ldr	r3, [r1, #16]
 800460e:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8004610:	bf84      	itt	hi
 8004612:	1ad6      	subhi	r6, r2, r3
 8004614:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004616:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800461a:	618e      	str	r6, [r1, #24]
 800461c:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8004620:	7809      	ldrb	r1, [r1, #0]
 8004622:	fa10 f383 	uxtah	r3, r0, r3
 8004626:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800462a:	2a3e      	cmp	r2, #62	; 0x3e
 800462c:	8819      	ldrh	r1, [r3, #0]
 800462e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004632:	8019      	strh	r1, [r3, #0]
 8004634:	d91a      	bls.n	800466c <USB_EPStartXfer+0x2b0>
 8004636:	0951      	lsrs	r1, r2, #5
 8004638:	06d0      	lsls	r0, r2, #27
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	bf08      	it	eq
 800463e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8004642:	b292      	uxth	r2, r2
 8004644:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004648:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800464c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004650:	b292      	uxth	r2, r2
 8004652:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004654:	7822      	ldrb	r2, [r4, #0]
 8004656:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800465a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800466a:	e6d2      	b.n	8004412 <USB_EPStartXfer+0x56>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800466c:	b90a      	cbnz	r2, 8004672 <USB_EPStartXfer+0x2b6>
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	e7ea      	b.n	8004648 <USB_EPStartXfer+0x28c>
 8004672:	0851      	lsrs	r1, r2, #1
 8004674:	07d2      	lsls	r2, r2, #31
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	bf48      	it	mi
 800467a:	3101      	addmi	r1, #1
 800467c:	b292      	uxth	r2, r2
 800467e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004682:	e7e5      	b.n	8004650 <USB_EPStartXfer+0x294>
      if (ep->type == EP_TYPE_BULK)
 8004684:	78cb      	ldrb	r3, [r1, #3]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d174      	bne.n	8004774 <USB_EPStartXfer+0x3b8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800468a:	2a00      	cmp	r2, #0
 800468c:	d14c      	bne.n	8004728 <USB_EPStartXfer+0x36c>
 800468e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004692:	780b      	ldrb	r3, [r1, #0]
 8004694:	f200 4102 	addw	r1, r0, #1026	; 0x402
 8004698:	fa11 f282 	uxtah	r2, r1, r2
 800469c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80046a0:	8813      	ldrh	r3, [r2, #0]
 80046a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a6:	8013      	strh	r3, [r2, #0]
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	2b3e      	cmp	r3, #62	; 0x3e
 80046ac:	d921      	bls.n	80046f2 <USB_EPStartXfer+0x336>
 80046ae:	8811      	ldrh	r1, [r2, #0]
 80046b0:	0958      	lsrs	r0, r3, #5
 80046b2:	06df      	lsls	r7, r3, #27
 80046b4:	bf08      	it	eq
 80046b6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80046ba:	b289      	uxth	r1, r1
 80046bc:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80046c0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80046c4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80046c8:	b289      	uxth	r1, r1
 80046ca:	8011      	strh	r1, [r2, #0]
 80046cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80046d0:	7821      	ldrb	r1, [r4, #0]
 80046d2:	f205 4006 	addw	r0, r5, #1030	; 0x406
 80046d6:	fa10 f282 	uxtah	r2, r0, r2
 80046da:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80046de:	2b3e      	cmp	r3, #62	; 0x3e
 80046e0:	8811      	ldrh	r1, [r2, #0]
 80046e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80046e6:	8011      	strh	r1, [r2, #0]
 80046e8:	d80f      	bhi.n	800470a <USB_EPStartXfer+0x34e>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d139      	bne.n	8004762 <USB_EPStartXfer+0x3a6>
 80046ee:	8813      	ldrh	r3, [r2, #0]
 80046f0:	e014      	b.n	800471c <USB_EPStartXfer+0x360>
 80046f2:	b90b      	cbnz	r3, 80046f8 <USB_EPStartXfer+0x33c>
 80046f4:	8811      	ldrh	r1, [r2, #0]
 80046f6:	e7e3      	b.n	80046c0 <USB_EPStartXfer+0x304>
 80046f8:	8811      	ldrh	r1, [r2, #0]
 80046fa:	0858      	lsrs	r0, r3, #1
 80046fc:	07de      	lsls	r6, r3, #31
 80046fe:	bf48      	it	mi
 8004700:	3001      	addmi	r0, #1
 8004702:	b289      	uxth	r1, r1
 8004704:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004708:	e7de      	b.n	80046c8 <USB_EPStartXfer+0x30c>
 800470a:	0959      	lsrs	r1, r3, #5
 800470c:	06d8      	lsls	r0, r3, #27
 800470e:	8813      	ldrh	r3, [r2, #0]
 8004710:	bf08      	it	eq
 8004712:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8004716:	b29b      	uxth	r3, r3
 8004718:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800471c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 8004728:	69e3      	ldr	r3, [r4, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d092      	beq.n	8004654 <USB_EPStartXfer+0x298>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800472e:	7822      	ldrb	r2, [r4, #0]
 8004730:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004734:	f244 0340 	movw	r3, #16448	; 0x4040
 8004738:	ea03 0001 	and.w	r0, r3, r1
 800473c:	438b      	bics	r3, r1
 800473e:	d001      	beq.n	8004744 <USB_EPStartXfer+0x388>
 8004740:	2800      	cmp	r0, #0
 8004742:	d187      	bne.n	8004654 <USB_EPStartXfer+0x298>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004744:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800475c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8004760:	e778      	b.n	8004654 <USB_EPStartXfer+0x298>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004762:	0859      	lsrs	r1, r3, #1
 8004764:	07db      	lsls	r3, r3, #31
 8004766:	8813      	ldrh	r3, [r2, #0]
 8004768:	bf48      	it	mi
 800476a:	3101      	addmi	r1, #1
 800476c:	b29b      	uxth	r3, r3
 800476e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004772:	e7d7      	b.n	8004724 <USB_EPStartXfer+0x368>
      else if (ep->type == EP_TYPE_ISOC)
 8004774:	2b01      	cmp	r3, #1
 8004776:	d15f      	bne.n	8004838 <USB_EPStartXfer+0x47c>
        if (ep->xfer_len > ep->maxpacket)
 8004778:	698b      	ldr	r3, [r1, #24]
 800477a:	6909      	ldr	r1, [r1, #16]
 800477c:	428b      	cmp	r3, r1
          ep->xfer_len -= len;
 800477e:	bf8a      	itet	hi
 8004780:	1a58      	subhi	r0, r3, r1
          ep->xfer_len = 0U;
 8004782:	2000      	movls	r0, #0
 8004784:	460b      	movhi	r3, r1
 8004786:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004788:	2a00      	cmp	r2, #0
 800478a:	f47f af63 	bne.w	8004654 <USB_EPStartXfer+0x298>
 800478e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004792:	7821      	ldrb	r1, [r4, #0]
 8004794:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8004798:	fa10 f282 	uxtah	r2, r0, r2
 800479c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80047a0:	2b3e      	cmp	r3, #62	; 0x3e
 80047a2:	8811      	ldrh	r1, [r2, #0]
 80047a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80047a8:	8011      	strh	r1, [r2, #0]
 80047aa:	d920      	bls.n	80047ee <USB_EPStartXfer+0x432>
 80047ac:	8811      	ldrh	r1, [r2, #0]
 80047ae:	0958      	lsrs	r0, r3, #5
 80047b0:	06df      	lsls	r7, r3, #27
 80047b2:	bf08      	it	eq
 80047b4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80047b8:	b289      	uxth	r1, r1
 80047ba:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80047be:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80047c2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80047c6:	b289      	uxth	r1, r1
 80047c8:	8011      	strh	r1, [r2, #0]
 80047ca:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80047ce:	7821      	ldrb	r1, [r4, #0]
 80047d0:	f205 4006 	addw	r0, r5, #1030	; 0x406
 80047d4:	fa10 f282 	uxtah	r2, r0, r2
 80047d8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80047dc:	2b3e      	cmp	r3, #62	; 0x3e
 80047de:	8811      	ldrh	r1, [r2, #0]
 80047e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80047e4:	8011      	strh	r1, [r2, #0]
 80047e6:	d80e      	bhi.n	8004806 <USB_EPStartXfer+0x44a>
 80047e8:	b9eb      	cbnz	r3, 8004826 <USB_EPStartXfer+0x46a>
 80047ea:	8813      	ldrh	r3, [r2, #0]
 80047ec:	e014      	b.n	8004818 <USB_EPStartXfer+0x45c>
 80047ee:	b90b      	cbnz	r3, 80047f4 <USB_EPStartXfer+0x438>
 80047f0:	8811      	ldrh	r1, [r2, #0]
 80047f2:	e7e4      	b.n	80047be <USB_EPStartXfer+0x402>
 80047f4:	8811      	ldrh	r1, [r2, #0]
 80047f6:	0858      	lsrs	r0, r3, #1
 80047f8:	07de      	lsls	r6, r3, #31
 80047fa:	bf48      	it	mi
 80047fc:	3001      	addmi	r0, #1
 80047fe:	b289      	uxth	r1, r1
 8004800:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004804:	e7df      	b.n	80047c6 <USB_EPStartXfer+0x40a>
 8004806:	0959      	lsrs	r1, r3, #5
 8004808:	06d8      	lsls	r0, r3, #27
 800480a:	8813      	ldrh	r3, [r2, #0]
 800480c:	bf08      	it	eq
 800480e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8004812:	b29b      	uxth	r3, r3
 8004814:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]
 8004824:	e716      	b.n	8004654 <USB_EPStartXfer+0x298>
 8004826:	0859      	lsrs	r1, r3, #1
 8004828:	07db      	lsls	r3, r3, #31
 800482a:	8813      	ldrh	r3, [r2, #0]
 800482c:	bf48      	it	mi
 800482e:	3101      	addmi	r1, #1
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004836:	e7f3      	b.n	8004820 <USB_EPStartXfer+0x464>
        return HAL_ERROR;
 8004838:	2001      	movs	r0, #1
 800483a:	e5f1      	b.n	8004420 <USB_EPStartXfer+0x64>

0800483c <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800483c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004842:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004844:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8004846:	460c      	mov	r4, r1
 8004848:	462e      	mov	r6, r5
 800484a:	1a47      	subs	r7, r0, r1
 800484c:	193a      	adds	r2, r7, r4
 800484e:	3402      	adds	r4, #2
 8004850:	b936      	cbnz	r6, 8004860 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004852:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8004854:	bf44      	itt	mi
 8004856:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800485a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8004860:	8812      	ldrh	r2, [r2, #0]
 8004862:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004864:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004868:	0a12      	lsrs	r2, r2, #8
 800486a:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800486e:	3e01      	subs	r6, #1
 8004870:	e7ec      	b.n	800484c <USB_ReadPMA+0x10>

08004872 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004872:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004874:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004878:	b184      	cbz	r4, 800489c <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800487a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800487e:	b15b      	cbz	r3, 8004898 <USBD_CDC_EP0_RxReady+0x26>
 8004880:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004884:	28ff      	cmp	r0, #255	; 0xff
 8004886:	d007      	beq.n	8004898 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800488e:	4621      	mov	r1, r4
 8004890:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004892:	23ff      	movs	r3, #255	; 0xff
 8004894:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004898:	2000      	movs	r0, #0
 800489a:	e000      	b.n	800489e <USBD_CDC_EP0_RxReady+0x2c>
    return (uint8_t)USBD_FAIL;
 800489c:	2003      	movs	r0, #3
}
 800489e:	bd10      	pop	{r4, pc}

080048a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80048a0:	2343      	movs	r3, #67	; 0x43
 80048a2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80048a4:	4800      	ldr	r0, [pc, #0]	; (80048a8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80048a6:	4770      	bx	lr
 80048a8:	20000084 	.word	0x20000084

080048ac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80048ac:	2343      	movs	r3, #67	; 0x43
 80048ae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80048b0:	4800      	ldr	r0, [pc, #0]	; (80048b4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80048b2:	4770      	bx	lr
 80048b4:	200000c8 	.word	0x200000c8

080048b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80048b8:	2343      	movs	r3, #67	; 0x43
 80048ba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80048bc:	4800      	ldr	r0, [pc, #0]	; (80048c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80048be:	4770      	bx	lr
 80048c0:	20000118 	.word	0x20000118

080048c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80048c4:	230a      	movs	r3, #10
 80048c6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80048c8:	4800      	ldr	r0, [pc, #0]	; (80048cc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80048ca:	4770      	bx	lr
 80048cc:	2000010c 	.word	0x2000010c

080048d0 <USBD_CDC_DataOut>:
{
 80048d0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048d2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 80048d6:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 80048d8:	b16c      	cbz	r4, 80048f6 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048da:	f000 fffc 	bl	80058d6 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048de:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048e2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80048ec:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80048f0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80048f2:	2000      	movs	r0, #0
}
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80048f6:	2003      	movs	r0, #3
 80048f8:	e7fc      	b.n	80048f4 <USBD_CDC_DataOut+0x24>

080048fa <USBD_CDC_DataIn>:
{
 80048fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80048fc:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004900:	f8d0 72c4 	ldr.w	r7, [r0, #708]	; 0x2c4
{
 8004904:	4603      	mov	r3, r0
 8004906:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 8004908:	b325      	cbz	r5, 8004954 <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800490a:	2614      	movs	r6, #20
 800490c:	fb06 0601 	mla	r6, r6, r1, r0
 8004910:	69b4      	ldr	r4, [r6, #24]
 8004912:	b184      	cbz	r4, 8004936 <USBD_CDC_DataIn+0x3c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004914:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8004918:	fb0c 7701 	mla	r7, ip, r1, r7
 800491c:	6a3f      	ldr	r7, [r7, #32]
 800491e:	fbb4 fcf7 	udiv	ip, r4, r7
 8004922:	fb07 441c 	mls	r4, r7, ip, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004926:	b934      	cbnz	r4, 8004936 <USBD_CDC_DataIn+0x3c>
    pdev->ep_in[epnum].total_length = 0U;
 8004928:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800492a:	4623      	mov	r3, r4
 800492c:	4622      	mov	r2, r4
 800492e:	f000 ffc0 	bl	80058b2 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004932:	4620      	mov	r0, r4
 8004934:	e00d      	b.n	8004952 <USBD_CDC_DataIn+0x58>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800493a:	691c      	ldr	r4, [r3, #16]
    hcdc->TxState = 0U;
 800493c:	2600      	movs	r6, #0
 800493e:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004942:	2c00      	cmp	r4, #0
 8004944:	d0f5      	beq.n	8004932 <USBD_CDC_DataIn+0x38>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004946:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800494a:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800494e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8004950:	4630      	mov	r0, r6
}
 8004952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8004954:	2003      	movs	r0, #3
 8004956:	e7fc      	b.n	8004952 <USBD_CDC_DataIn+0x58>

08004958 <USBD_CDC_Setup>:
{
 8004958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800495c:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8004960:	f04f 0800 	mov.w	r8, #0
{
 8004964:	4605      	mov	r5, r0
 8004966:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8004968:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800496c:	f8ad 8006 	strh.w	r8, [sp, #6]
  if (hcdc == NULL)
 8004970:	2f00      	cmp	r7, #0
 8004972:	d06a      	beq.n	8004a4a <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004974:	780a      	ldrb	r2, [r1, #0]
 8004976:	f012 0460 	ands.w	r4, r2, #96	; 0x60
 800497a:	d02b      	beq.n	80049d4 <USBD_CDC_Setup+0x7c>
 800497c:	2c20      	cmp	r4, #32
 800497e:	d160      	bne.n	8004a42 <USBD_CDC_Setup+0xea>
      if (req->wLength != 0U)
 8004980:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004982:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength != 0U)
 8004984:	b1fc      	cbz	r4, 80049c6 <USBD_CDC_Setup+0x6e>
        if ((req->bmRequest & 0x80U) != 0U)
 8004986:	0612      	lsls	r2, r2, #24
 8004988:	d514      	bpl.n	80049b4 <USBD_CDC_Setup+0x5c>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800498a:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800498e:	4639      	mov	r1, r7
 8004990:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	4622      	mov	r2, r4
 8004998:	47c8      	blx	r9
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800499a:	88f2      	ldrh	r2, [r6, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800499c:	2a07      	cmp	r2, #7
 800499e:	bf28      	it	cs
 80049a0:	2207      	movcs	r2, #7
 80049a2:	4639      	mov	r1, r7
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 fc79 	bl	800529c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80049aa:	4644      	mov	r4, r8
}
 80049ac:	4620      	mov	r0, r4
 80049ae:	b003      	add	sp, #12
 80049b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 80049b4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80049b8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80049bc:	4622      	mov	r2, r4
 80049be:	4639      	mov	r1, r7
 80049c0:	f000 fc81 	bl	80052c6 <USBD_CtlPrepareRx>
 80049c4:	e7f1      	b.n	80049aa <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049c6:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80049ca:	4618      	mov	r0, r3
 80049cc:	6895      	ldr	r5, [r2, #8]
 80049ce:	4622      	mov	r2, r4
 80049d0:	47a8      	blx	r5
 80049d2:	e7eb      	b.n	80049ac <USBD_CDC_Setup+0x54>
      switch (req->bRequest)
 80049d4:	784f      	ldrb	r7, [r1, #1]
 80049d6:	2f0b      	cmp	r7, #11
 80049d8:	d833      	bhi.n	8004a42 <USBD_CDC_Setup+0xea>
 80049da:	a301      	add	r3, pc, #4	; (adr r3, 80049e0 <USBD_CDC_Setup+0x88>)
 80049dc:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80049e0:	08004a11 	.word	0x08004a11
 80049e4:	080049ad 	.word	0x080049ad
 80049e8:	08004a43 	.word	0x08004a43
 80049ec:	08004a43 	.word	0x08004a43
 80049f0:	08004a43 	.word	0x08004a43
 80049f4:	08004a43 	.word	0x08004a43
 80049f8:	08004a43 	.word	0x08004a43
 80049fc:	08004a43 	.word	0x08004a43
 8004a00:	08004a43 	.word	0x08004a43
 8004a04:	08004a43 	.word	0x08004a43
 8004a08:	08004a27 	.word	0x08004a27
 8004a0c:	08004a3b 	.word	0x08004a3b
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a10:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d114      	bne.n	8004a42 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f10d 0106 	add.w	r1, sp, #6
 8004a1e:	f000 fc3d 	bl	800529c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a22:	463c      	mov	r4, r7
 8004a24:	e7c2      	b.n	80049ac <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d109      	bne.n	8004a42 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f10d 0105 	add.w	r1, sp, #5
 8004a34:	f000 fc32 	bl	800529c <USBD_CtlSendData>
 8004a38:	e7b8      	b.n	80049ac <USBD_CDC_Setup+0x54>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d0b4      	beq.n	80049ac <USBD_CDC_Setup+0x54>
          USBD_CtlError(pdev, req);
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	f000 fc02 	bl	800524e <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8004a4a:	2403      	movs	r4, #3
 8004a4c:	e7ae      	b.n	80049ac <USBD_CDC_Setup+0x54>
 8004a4e:	bf00      	nop

08004a50 <USBD_CDC_DeInit>:
{
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004a54:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004a56:	2181      	movs	r1, #129	; 0x81
 8004a58:	f000 fef5 	bl	8005846 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004a5c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004a5e:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 fef0 	bl	8005846 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004a66:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004a6a:	2182      	movs	r1, #130	; 0x82
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f000 feea 	bl	8005846 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004a72:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004a76:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8004a78:	b14b      	cbz	r3, 8004a8e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004a7a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004a82:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8004a86:	f000 ff53 	bl	8005930 <USBD_static_free>
    pdev->pClassData = NULL;
 8004a8a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8004a8e:	2000      	movs	r0, #0
 8004a90:	bd38      	pop	{r3, r4, r5, pc}

08004a92 <USBD_CDC_Init>:
{
 8004a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a96:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a9c:	f000 ff44 	bl	8005928 <USBD_static_malloc>
  if (hcdc == NULL)
 8004aa0:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 8004aa2:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 8004aa6:	b918      	cbnz	r0, 8004ab0 <USBD_CDC_Init+0x1e>
    return (uint8_t)USBD_EMEM;
 8004aa8:	2602      	movs	r6, #2
}
 8004aaa:	4630      	mov	r0, r6
 8004aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ab0:	7c23      	ldrb	r3, [r4, #16]
 8004ab2:	bb8b      	cbnz	r3, 8004b18 <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ab8:	2181      	movs	r1, #129	; 0x81
 8004aba:	2202      	movs	r2, #2
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 feb6 	bl	800582e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004aca:	2202      	movs	r2, #2
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 feae 	bl	800582e <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ad2:	2701      	movs	r7, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ada:	2203      	movs	r2, #3
 8004adc:	2308      	movs	r3, #8
 8004ade:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ae0:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f000 fea2 	bl	800582e <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004aea:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004aee:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 8004af2:	f04f 0800 	mov.w	r8, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4798      	blx	r3
  hcdc->TxState = 0U;
 8004afa:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8004afe:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b02:	7c26      	ldrb	r6, [r4, #16]
 8004b04:	b996      	cbnz	r6, 8004b2c <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b06:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b0e:	4639      	mov	r1, r7
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 fed7 	bl	80058c4 <USBD_LL_PrepareReceive>
 8004b16:	e7c8      	b.n	8004aaa <USBD_CDC_Init+0x18>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	2181      	movs	r1, #129	; 0x81
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 fe85 	bl	800582e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b24:	2101      	movs	r1, #1
 8004b26:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b28:	2340      	movs	r3, #64	; 0x40
 8004b2a:	e7ce      	b.n	8004aca <USBD_CDC_Init+0x38>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b2c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004b30:	2340      	movs	r3, #64	; 0x40
 8004b32:	4639      	mov	r1, r7
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fec5 	bl	80058c4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004b3a:	4646      	mov	r6, r8
 8004b3c:	e7b5      	b.n	8004aaa <USBD_CDC_Init+0x18>

08004b3e <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8004b3e:	b119      	cbz	r1, 8004b48 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8004b40:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004b44:	2000      	movs	r0, #0
 8004b46:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004b48:	2003      	movs	r0, #3
}
 8004b4a:	4770      	bx	lr

08004b4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b4c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004b50:	b12b      	cbz	r3, 8004b5e <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8004b52:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004b56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004b5e:	2003      	movs	r0, #3
}
 8004b60:	4770      	bx	lr

08004b62 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b62:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004b66:	b11b      	cbz	r3, 8004b70 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8004b68:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004b70:	2003      	movs	r0, #3
}
 8004b72:	4770      	bx	lr

08004b74 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b74:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8004b78:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8004b7a:	b182      	cbz	r2, 8004b9e <USBD_CDC_ReceivePacket+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b7c:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b7e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b82:	b934      	cbnz	r4, 8004b92 <USBD_CDC_ReceivePacket+0x1e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b88:	2101      	movs	r1, #1
 8004b8a:	f000 fe9b 	bl	80058c4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8004b8e:	4620      	mov	r0, r4
 8004b90:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b92:	2340      	movs	r3, #64	; 0x40
 8004b94:	2101      	movs	r1, #1
 8004b96:	f000 fe95 	bl	80058c4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004b9a:	2400      	movs	r4, #0
 8004b9c:	e7f7      	b.n	8004b8e <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8004b9e:	2403      	movs	r4, #3
 8004ba0:	e7f5      	b.n	8004b8e <USBD_CDC_ReceivePacket+0x1a>

08004ba2 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ba2:	b178      	cbz	r0, 8004bc4 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004baa:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004bae:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004bb2:	b109      	cbz	r1, 8004bb8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004bb4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004bbe:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004bc0:	f000 bdec 	b.w	800579c <USBD_LL_Init>

  return ret;
}
 8004bc4:	2003      	movs	r0, #3
 8004bc6:	4770      	bx	lr

08004bc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 8004bca:	2500      	movs	r5, #0
{
 8004bcc:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8004bce:	f8ad 5006 	strh.w	r5, [sp, #6]

  if (pclass == NULL)
 8004bd2:	b159      	cbz	r1, 8004bec <USBD_RegisterClass+0x24>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004bd4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 8004bd6:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004bda:	b14b      	cbz	r3, 8004bf0 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004bdc:	f10d 0006 	add.w	r0, sp, #6
 8004be0:	4798      	blx	r3
 8004be2:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004be6:	4628      	mov	r0, r5
}
 8004be8:	b003      	add	sp, #12
 8004bea:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8004bec:	2003      	movs	r0, #3
 8004bee:	e7fb      	b.n	8004be8 <USBD_RegisterClass+0x20>
  return USBD_OK;
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	e7f9      	b.n	8004be8 <USBD_RegisterClass+0x20>

08004bf4 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004bf4:	f000 be12 	b.w	800581c <USBD_LL_Start>

08004bf8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004bf8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004bfc:	b10b      	cbz	r3, 8004c02 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4718      	bx	r3
  }

  return ret;
}
 8004c02:	2003      	movs	r0, #3
 8004c04:	4770      	bx	lr

08004c06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c06:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004c08:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004c0c:	b10b      	cbz	r3, 8004c12 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004c12:	2000      	movs	r0, #0
 8004c14:	bd08      	pop	{r3, pc}

08004c16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c16:	b538      	push	{r3, r4, r5, lr}
 8004c18:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c1a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 fb0a 	bl	8005238 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c24:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004c26:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8004c2a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004c2e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004c32:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004c36:	f001 031f 	and.w	r3, r1, #31
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d008      	beq.n	8004c50 <USBD_LL_SetupStage+0x3a>
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d00c      	beq.n	8004c5c <USBD_LL_SetupStage+0x46>
 8004c42:	b98b      	cbnz	r3, 8004c68 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c44:	4629      	mov	r1, r5
 8004c46:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c4c:	f000 b8f6 	b.w	8004e3c <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c50:	4629      	mov	r1, r5
 8004c52:	4620      	mov	r0, r4
}
 8004c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c58:	f000 ba3a 	b.w	80050d0 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4620      	mov	r0, r4
}
 8004c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c64:	f000 ba5a 	b.w	800511c <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8004c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c72:	f000 bdf1 	b.w	8005858 <USBD_LL_StallEP>

08004c76 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c76:	b570      	push	{r4, r5, r6, lr}
 8004c78:	4604      	mov	r4, r0
 8004c7a:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c7c:	b9f9      	cbnz	r1, 8004cbe <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c7e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d10c      	bne.n	8004ca0 <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c86:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d90a      	bls.n	8004ca4 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8004c8e:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c90:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004c92:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c96:	bf28      	it	cs
 8004c98:	461a      	movcs	r2, r3
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f000 fb20 	bl	80052e0 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ca4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d104      	bne.n	8004cb6 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 8004cac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	b103      	cbz	r3, 8004cb6 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 8004cb4:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 fb1a 	bl	80052f0 <USBD_CtlSendStatus>
 8004cbc:	e7f0      	b.n	8004ca0 <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cbe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d1ec      	bne.n	8004ca0 <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 8004cc6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0e7      	beq.n	8004ca0 <USBD_LL_DataOutStage+0x2a>
}
 8004cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004cd4:	4718      	bx	r3

08004cd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cd8:	4604      	mov	r4, r0
 8004cda:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	d13f      	bne.n	8004d60 <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ce0:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004ce4:	2a02      	cmp	r2, #2
 8004ce6:	d10f      	bne.n	8004d08 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ce8:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8004cec:	4295      	cmp	r5, r2
 8004cee:	d915      	bls.n	8004d1c <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8004cf0:	1aaa      	subs	r2, r5, r2
 8004cf2:	9101      	str	r1, [sp, #4]
 8004cf4:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	f000 fadd 	bl	80052b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cfc:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 fdde 	bl	80058c4 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004d08:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d102      	bne.n	8004d16 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004d16:	2000      	movs	r0, #0
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8004d1c:	d10e      	bne.n	8004d3c <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004d1e:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d20:	4295      	cmp	r5, r2
 8004d22:	d80b      	bhi.n	8004d3c <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004d24:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8004d28:	42aa      	cmp	r2, r5
 8004d2a:	d207      	bcs.n	8004d3c <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	9101      	str	r1, [sp, #4]
 8004d30:	f000 fac1 	bl	80052b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d34:	9b01      	ldr	r3, [sp, #4]
 8004d36:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004d3a:	e7e0      	b.n	8004cfe <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d3c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d105      	bne.n	8004d50 <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 8004d44:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	b10b      	cbz	r3, 8004d50 <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 fd80 	bl	8005858 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 fad4 	bl	8005306 <USBD_CtlReceiveStatus>
 8004d5e:	e7d3      	b.n	8004d08 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d1d6      	bne.n	8004d16 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 8004d68:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0d1      	beq.n	8004d16 <USBD_LL_DataInStage+0x40>
}
 8004d72:	b002      	add	sp, #8
 8004d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004d78:	4718      	bx	r3

08004d7a <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d7a:	2301      	movs	r3, #1
{
 8004d7c:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d7e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 8004d82:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d86:	2100      	movs	r1, #0
{
 8004d88:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d8a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004d8e:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d90:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 8004d94:	b1db      	cbz	r3, 8004dce <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8004d96:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004d9a:	b112      	cbz	r2, 8004da2 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b103      	cbz	r3, 8004da2 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004da0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004da2:	2200      	movs	r2, #0
 8004da4:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004da6:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004da8:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004daa:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 fd3e 	bl	800582e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004db2:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004db6:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dba:	462b      	mov	r3, r5
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 fd34 	bl	800582e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004dc6:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dc8:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8004dca:	2000      	movs	r0, #0
}
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004dce:	2003      	movs	r0, #3
 8004dd0:	e7fc      	b.n	8004dcc <USBD_LL_Reset+0x52>

08004dd2 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004dd2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	4770      	bx	lr

08004dd8 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004dd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004de2:	2304      	movs	r3, #4
 8004de4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004de8:	2000      	movs	r0, #0
 8004dea:	4770      	bx	lr

08004dec <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004dec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004df0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004df2:	bf02      	ittt	eq
 8004df4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004df8:	b2db      	uxtbeq	r3, r3
 8004dfa:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004dfe:	2000      	movs	r0, #0
 8004e00:	4770      	bx	lr

08004e02 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8004e02:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004e06:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004e08:	b142      	cbz	r2, 8004e1c <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e0a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d102      	bne.n	8004e18 <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 8004e12:	69d3      	ldr	r3, [r2, #28]
 8004e14:	b123      	cbz	r3, 8004e20 <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 8004e16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e000      	b.n	8004e1e <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 8004e1c:	2003      	movs	r0, #3
}
 8004e1e:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8004e20:	4618      	mov	r0, r3
 8004e22:	e7fc      	b.n	8004e1e <USBD_LL_SOF+0x1c>

08004e24 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004e24:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e26:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004e28:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e2a:	f000 fd15 	bl	8005858 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e2e:	4620      	mov	r0, r4
 8004e30:	2100      	movs	r1, #0
}
 8004e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e36:	f000 bd0f 	b.w	8005858 <USBD_LL_StallEP>
	...

08004e3c <USBD_StdDevReq>:
{
 8004e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3e:	780d      	ldrb	r5, [r1, #0]
 8004e40:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e44:	2d20      	cmp	r5, #32
{
 8004e46:	4604      	mov	r4, r0
 8004e48:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e4a:	d014      	beq.n	8004e76 <USBD_StdDevReq+0x3a>
 8004e4c:	2d40      	cmp	r5, #64	; 0x40
 8004e4e:	d012      	beq.n	8004e76 <USBD_StdDevReq+0x3a>
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	f040 8109 	bne.w	8005068 <USBD_StdDevReq+0x22c>
      switch (req->bRequest)
 8004e56:	784f      	ldrb	r7, [r1, #1]
 8004e58:	2f09      	cmp	r7, #9
 8004e5a:	f200 8105 	bhi.w	8005068 <USBD_StdDevReq+0x22c>
 8004e5e:	e8df f017 	tbh	[pc, r7, lsl #1]
 8004e62:	010a      	.short	0x010a
 8004e64:	0103012a 	.word	0x0103012a
 8004e68:	01030120 	.word	0x01030120
 8004e6c:	0013008a 	.word	0x0013008a
 8004e70:	00f20103 	.word	0x00f20103
 8004e74:	00a6      	.short	0x00a6
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e76:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4620      	mov	r0, r4
}
 8004e80:	b003      	add	sp, #12
 8004e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e86:	4718      	bx	r3
  uint16_t len = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004e8e:	884b      	ldrh	r3, [r1, #2]
 8004e90:	0a1a      	lsrs	r2, r3, #8
 8004e92:	3a01      	subs	r2, #1
 8004e94:	2a0e      	cmp	r2, #14
 8004e96:	d80d      	bhi.n	8004eb4 <USBD_StdDevReq+0x78>
 8004e98:	e8df f002 	tbb	[pc, r2]
 8004e9c:	0c382b12 	.word	0x0c382b12
 8004ea0:	0c62580c 	.word	0x0c62580c
 8004ea4:	0c0c0c0c 	.word	0x0c0c0c0c
 8004ea8:	0c0c      	.short	0x0c0c
 8004eaa:	08          	.byte	0x08
 8004eab:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004eac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004eb0:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004eb2:	b943      	cbnz	r3, 8004ec6 <USBD_StdDevReq+0x8a>
      USBD_CtlError(pdev, req);
 8004eb4:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 8004eb6:	f7ff ffb5 	bl	8004e24 <USBD_CtlError.constprop.0>
}
 8004eba:	4628      	mov	r0, r5
 8004ebc:	b003      	add	sp, #12
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ec0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	7c20      	ldrb	r0, [r4, #16]
 8004ec8:	f10d 0106 	add.w	r1, sp, #6
 8004ecc:	4798      	blx	r3
  if (req->wLength != 0U)
 8004ece:	88f2      	ldrh	r2, [r6, #6]
 8004ed0:	2a00      	cmp	r2, #0
 8004ed2:	f000 80ec 	beq.w	80050ae <USBD_StdDevReq+0x272>
    if (len != 0U)
 8004ed6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ea      	beq.n	8004eb4 <USBD_StdDevReq+0x78>
      len = MIN(len, req->wLength);
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	bf28      	it	cs
 8004ee2:	461a      	movcs	r2, r3
 8004ee4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ee8:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004eea:	4620      	mov	r0, r4
 8004eec:	f000 f9d6 	bl	800529c <USBD_CtlSendData>
        break;
 8004ef0:	e7e3      	b.n	8004eba <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ef2:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ef4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ef8:	b932      	cbnz	r2, 8004f08 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004efc:	f10d 0006 	add.w	r0, sp, #6
 8004f00:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f02:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f04:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004f06:	e7e2      	b.n	8004ece <USBD_StdDevReq+0x92>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	e7f7      	b.n	8004efc <USBD_StdDevReq+0xc0>
      switch ((uint8_t)(req->wValue))
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b05      	cmp	r3, #5
 8004f10:	d8d0      	bhi.n	8004eb4 <USBD_StdDevReq+0x78>
 8004f12:	e8df f003 	tbb	[pc, r3]
 8004f16:	0703      	.short	0x0703
 8004f18:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004f1c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	e7c6      	b.n	8004eb2 <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004f24:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	e7c2      	b.n	8004eb2 <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004f2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	e7be      	b.n	8004eb2 <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004f34:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	e7ba      	b.n	8004eb2 <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004f3c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	e7b6      	b.n	8004eb2 <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	e7b2      	b.n	8004eb2 <USBD_StdDevReq+0x76>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f4c:	7c03      	ldrb	r3, [r0, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1b0      	bne.n	8004eb4 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004f52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f56:	f10d 0006 	add.w	r0, sp, #6
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	4798      	blx	r3
  if (err != 0U)
 8004f5e:	e7b6      	b.n	8004ece <USBD_StdDevReq+0x92>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f60:	7c03      	ldrb	r3, [r0, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1a6      	bne.n	8004eb4 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004f66:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004f6a:	f10d 0006 	add.w	r0, sp, #6
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f72:	2307      	movs	r3, #7
 8004f74:	e7c6      	b.n	8004f04 <USBD_StdDevReq+0xc8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f76:	888b      	ldrh	r3, [r1, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d19b      	bne.n	8004eb4 <USBD_StdDevReq+0x78>
 8004f7c:	88cb      	ldrh	r3, [r1, #6]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d198      	bne.n	8004eb4 <USBD_StdDevReq+0x78>
 8004f82:	884e      	ldrh	r6, [r1, #2]
 8004f84:	2e7f      	cmp	r6, #127	; 0x7f
 8004f86:	d895      	bhi.n	8004eb4 <USBD_StdDevReq+0x78>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d091      	beq.n	8004eb4 <USBD_StdDevReq+0x78>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f90:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8004f92:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004f96:	f000 fc83 	bl	80058a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 f9a8 	bl	80052f0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004fa0:	b11e      	cbz	r6, 8004faa <USBD_StdDevReq+0x16e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fa2:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004fa4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004fa8:	e787      	b.n	8004eba <USBD_StdDevReq+0x7e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e7fa      	b.n	8004fa4 <USBD_StdDevReq+0x168>
  cfgidx = (uint8_t)(req->wValue);
 8004fae:	788e      	ldrb	r6, [r1, #2]
 8004fb0:	4f46      	ldr	r7, [pc, #280]	; (80050cc <USBD_StdDevReq+0x290>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004fb2:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8004fb4:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004fb6:	d903      	bls.n	8004fc0 <USBD_StdDevReq+0x184>
    USBD_CtlError(pdev, req);
 8004fb8:	f7ff ff34 	bl	8004e24 <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8004fbc:	2503      	movs	r5, #3
      break;
 8004fbe:	e77c      	b.n	8004eba <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 8004fc0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	d008      	beq.n	8004fdc <USBD_StdDevReq+0x1a0>
 8004fca:	2a03      	cmp	r2, #3
 8004fcc:	d015      	beq.n	8004ffa <USBD_StdDevReq+0x1be>
      USBD_CtlError(pdev, req);
 8004fce:	f7ff ff29 	bl	8004e24 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004fd2:	7839      	ldrb	r1, [r7, #0]
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff fe16 	bl	8004c06 <USBD_ClrClassConfig>
 8004fda:	e7ef      	b.n	8004fbc <USBD_StdDevReq+0x180>
      if (cfgidx != 0U)
 8004fdc:	2e00      	cmp	r6, #0
 8004fde:	d066      	beq.n	80050ae <USBD_StdDevReq+0x272>
        pdev->dev_config = cfgidx;
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004fe4:	f7ff fe08 	bl	8004bf8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004fe8:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 8004fea:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 8004fec:	2d00      	cmp	r5, #0
 8004fee:	f47f af62 	bne.w	8004eb6 <USBD_StdDevReq+0x7a>
          (void)USBD_CtlSendStatus(pdev);
 8004ff2:	f000 f97d 	bl	80052f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e7d4      	b.n	8004fa4 <USBD_StdDevReq+0x168>
      if (cfgidx == 0U)
 8004ffa:	b95e      	cbnz	r6, 8005014 <USBD_StdDevReq+0x1d8>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005002:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005004:	4631      	mov	r1, r6
 8005006:	f7ff fdfe 	bl	8004c06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f970 	bl	80052f0 <USBD_CtlSendStatus>
 8005010:	4635      	mov	r5, r6
 8005012:	e752      	b.n	8004eba <USBD_StdDevReq+0x7e>
      else if (cfgidx != pdev->dev_config)
 8005014:	6841      	ldr	r1, [r0, #4]
 8005016:	2901      	cmp	r1, #1
 8005018:	d049      	beq.n	80050ae <USBD_StdDevReq+0x272>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800501a:	b2c9      	uxtb	r1, r1
 800501c:	f7ff fdf3 	bl	8004c06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005020:	7839      	ldrb	r1, [r7, #0]
 8005022:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005024:	4620      	mov	r0, r4
 8005026:	f7ff fde7 	bl	8004bf8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800502a:	4606      	mov	r6, r0
 800502c:	2800      	cmp	r0, #0
 800502e:	d03e      	beq.n	80050ae <USBD_StdDevReq+0x272>
          USBD_CtlError(pdev, req);
 8005030:	4620      	mov	r0, r4
 8005032:	f7ff fef7 	bl	8004e24 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005036:	7921      	ldrb	r1, [r4, #4]
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff fde4 	bl	8004c06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800503e:	2302      	movs	r3, #2
 8005040:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005044:	e7e4      	b.n	8005010 <USBD_StdDevReq+0x1d4>
  if (req->wLength != 1U)
 8005046:	88ca      	ldrh	r2, [r1, #6]
 8005048:	2a01      	cmp	r2, #1
 800504a:	f47f af33 	bne.w	8004eb4 <USBD_StdDevReq+0x78>
    switch (pdev->dev_state)
 800504e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8005052:	2902      	cmp	r1, #2
 8005054:	b2cb      	uxtb	r3, r1
 8005056:	d805      	bhi.n	8005064 <USBD_StdDevReq+0x228>
 8005058:	b133      	cbz	r3, 8005068 <USBD_StdDevReq+0x22c>
        pdev->dev_default_config = 0U;
 800505a:	4601      	mov	r1, r0
 800505c:	2300      	movs	r3, #0
 800505e:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005062:	e742      	b.n	8004eea <USBD_StdDevReq+0xae>
    switch (pdev->dev_state)
 8005064:	2b03      	cmp	r3, #3
 8005066:	d004      	beq.n	8005072 <USBD_StdDevReq+0x236>
        USBD_CtlError(pdev, req);
 8005068:	4620      	mov	r0, r4
 800506a:	f7ff fedb 	bl	8004e24 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800506e:	2500      	movs	r5, #0
        break;
 8005070:	e723      	b.n	8004eba <USBD_StdDevReq+0x7e>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005072:	1d01      	adds	r1, r0, #4
 8005074:	e739      	b.n	8004eea <USBD_StdDevReq+0xae>
  switch (pdev->dev_state)
 8005076:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800507a:	3b01      	subs	r3, #1
 800507c:	2b02      	cmp	r3, #2
 800507e:	d8f3      	bhi.n	8005068 <USBD_StdDevReq+0x22c>
      if (req->wLength != 0x2U)
 8005080:	88ca      	ldrh	r2, [r1, #6]
 8005082:	2a02      	cmp	r2, #2
 8005084:	f47f af16 	bne.w	8004eb4 <USBD_StdDevReq+0x78>
      if (pdev->dev_remote_wakeup != 0U)
 8005088:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800508c:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf14      	ite	ne
 8005092:	2303      	movne	r3, #3
 8005094:	2301      	moveq	r3, #1
 8005096:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800509a:	f000 f8ff 	bl	800529c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800509e:	463d      	mov	r5, r7
      break;
 80050a0:	e70b      	b.n	8004eba <USBD_StdDevReq+0x7e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050a2:	884b      	ldrh	r3, [r1, #2]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f47f af08 	bne.w	8004eba <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 80050aa:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80050ae:	4620      	mov	r0, r4
 80050b0:	f000 f91e 	bl	80052f0 <USBD_CtlSendStatus>
 80050b4:	e701      	b.n	8004eba <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 80050b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050ba:	3b01      	subs	r3, #1
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d8d3      	bhi.n	8005068 <USBD_StdDevReq+0x22c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050c0:	884b      	ldrh	r3, [r1, #2]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	f47f aef9 	bne.w	8004eba <USBD_StdDevReq+0x7e>
        pdev->dev_remote_wakeup = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e7ee      	b.n	80050aa <USBD_StdDevReq+0x26e>
 80050cc:	2000050c 	.word	0x2000050c

080050d0 <USBD_StdItfReq>:
{
 80050d0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050d2:	780b      	ldrb	r3, [r1, #0]
 80050d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80050d8:	2a40      	cmp	r2, #64	; 0x40
{
 80050da:	4604      	mov	r4, r0
 80050dc:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050de:	d001      	beq.n	80050e4 <USBD_StdItfReq+0x14>
 80050e0:	065b      	lsls	r3, r3, #25
 80050e2:	d416      	bmi.n	8005112 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 80050e4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80050e8:	3b01      	subs	r3, #1
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d811      	bhi.n	8005112 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050ee:	7933      	ldrb	r3, [r6, #4]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d80e      	bhi.n	8005112 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050f4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80050f8:	4631      	mov	r1, r6
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4620      	mov	r0, r4
 80050fe:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005100:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005102:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005104:	b91b      	cbnz	r3, 800510e <USBD_StdItfReq+0x3e>
 8005106:	b910      	cbnz	r0, 800510e <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 8005108:	4620      	mov	r0, r4
 800510a:	f000 f8f1 	bl	80052f0 <USBD_CtlSendStatus>
}
 800510e:	4628      	mov	r0, r5
 8005110:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8005112:	4620      	mov	r0, r4
 8005114:	f7ff fe86 	bl	8004e24 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8005118:	2500      	movs	r5, #0
          break;
 800511a:	e7f8      	b.n	800510e <USBD_StdItfReq+0x3e>

0800511c <USBD_StdEPReq>:
{
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8005120:	888a      	ldrh	r2, [r1, #4]
 8005122:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005126:	2b20      	cmp	r3, #32
{
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800512c:	d058      	beq.n	80051e0 <USBD_StdEPReq+0xc4>
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d056      	beq.n	80051e0 <USBD_StdEPReq+0xc4>
 8005132:	bb9b      	cbnz	r3, 800519c <USBD_StdEPReq+0x80>
      switch (req->bRequest)
 8005134:	786b      	ldrb	r3, [r5, #1]
 8005136:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8005138:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800513a:	d040      	beq.n	80051be <USBD_StdEPReq+0xa2>
 800513c:	2b03      	cmp	r3, #3
 800513e:	d026      	beq.n	800518e <USBD_StdEPReq+0x72>
 8005140:	bb63      	cbnz	r3, 800519c <USBD_StdEPReq+0x80>
          switch (pdev->dev_state)
 8005142:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005146:	2b02      	cmp	r3, #2
 8005148:	b2d8      	uxtb	r0, r3
 800514a:	d05a      	beq.n	8005202 <USBD_StdEPReq+0xe6>
 800514c:	2803      	cmp	r0, #3
 800514e:	d125      	bne.n	800519c <USBD_StdEPReq+0x80>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005150:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005154:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005158:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800515c:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 8005160:	d05e      	beq.n	8005220 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005162:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005164:	b1d3      	cbz	r3, 800519c <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005166:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800516a:	3501      	adds	r5, #1
 800516c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005170:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005174:	f011 007f 	ands.w	r0, r1, #127	; 0x7f
 8005178:	d005      	beq.n	8005186 <USBD_StdEPReq+0x6a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800517a:	4620      	mov	r0, r4
 800517c:	f000 fb7e 	bl	800587c <USBD_LL_IsStallEP>
 8005180:	3800      	subs	r0, #0
 8005182:	bf18      	it	ne
 8005184:	2001      	movne	r0, #1
                pep->status = 0x0000U;
 8005186:	6028      	str	r0, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005188:	2202      	movs	r2, #2
 800518a:	4629      	mov	r1, r5
 800518c:	e044      	b.n	8005218 <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 800518e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005192:	2b02      	cmp	r3, #2
 8005194:	b2da      	uxtb	r2, r3
 8005196:	d02b      	beq.n	80051f0 <USBD_StdEPReq+0xd4>
 8005198:	2a03      	cmp	r2, #3
 800519a:	d003      	beq.n	80051a4 <USBD_StdEPReq+0x88>
              USBD_CtlError(pdev, req);
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff fe41 	bl	8004e24 <USBD_CtlError.constprop.0>
              break;
 80051a2:	e00a      	b.n	80051ba <USBD_StdEPReq+0x9e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051a4:	886b      	ldrh	r3, [r5, #2]
 80051a6:	b92b      	cbnz	r3, 80051b4 <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80051a8:	064a      	lsls	r2, r1, #25
 80051aa:	d003      	beq.n	80051b4 <USBD_StdEPReq+0x98>
 80051ac:	88eb      	ldrh	r3, [r5, #6]
 80051ae:	b90b      	cbnz	r3, 80051b4 <USBD_StdEPReq+0x98>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80051b0:	f000 fb52 	bl	8005858 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 f89b 	bl	80052f0 <USBD_CtlSendStatus>
}
 80051ba:	2000      	movs	r0, #0
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 80051be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	d013      	beq.n	80051f0 <USBD_StdEPReq+0xd4>
 80051c8:	2a03      	cmp	r2, #3
 80051ca:	d1e7      	bne.n	800519c <USBD_StdEPReq+0x80>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051cc:	886b      	ldrh	r3, [r5, #2]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f3      	bne.n	80051ba <USBD_StdEPReq+0x9e>
                if ((ep_addr & 0x7FU) != 0x00U)
 80051d2:	064e      	lsls	r6, r1, #25
 80051d4:	d001      	beq.n	80051da <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80051d6:	f000 fb48 	bl	800586a <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 80051da:	4620      	mov	r0, r4
 80051dc:	f000 f888 	bl	80052f0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051e0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80051e4:	4629      	mov	r1, r5
 80051e6:	4620      	mov	r0, r4
 80051e8:	689b      	ldr	r3, [r3, #8]
}
 80051ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051ee:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051f0:	064b      	lsls	r3, r1, #25
 80051f2:	d0d3      	beq.n	800519c <USBD_StdEPReq+0x80>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80051f4:	f000 fb30 	bl	8005858 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80051f8:	2180      	movs	r1, #128	; 0x80
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 fb2c 	bl	8005858 <USBD_LL_StallEP>
 8005200:	e7db      	b.n	80051ba <USBD_StdEPReq+0x9e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005202:	0649      	lsls	r1, r1, #25
 8005204:	d1ca      	bne.n	800519c <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005206:	0613      	lsls	r3, r2, #24
 8005208:	bf4c      	ite	mi
 800520a:	f104 0114 	addmi.w	r1, r4, #20
 800520e:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8005212:	2300      	movs	r3, #0
 8005214:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005216:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f83f 	bl	800529c <USBD_CtlSendData>
              break;
 800521e:	e7cc      	b.n	80051ba <USBD_StdEPReq+0x9e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005220:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0b9      	beq.n	800519c <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005228:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800522c:	2314      	movs	r3, #20
 800522e:	fb03 4505 	mla	r5, r3, r5, r4
 8005232:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005236:	e79d      	b.n	8005174 <USBD_StdEPReq+0x58>

08005238 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005238:	780b      	ldrb	r3, [r1, #0]
 800523a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800523c:	784b      	ldrb	r3, [r1, #1]
 800523e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8005240:	884b      	ldrh	r3, [r1, #2]
 8005242:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8005244:	888b      	ldrh	r3, [r1, #4]
 8005246:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8005248:	88cb      	ldrh	r3, [r1, #6]
 800524a:	80c3      	strh	r3, [r0, #6]
}
 800524c:	4770      	bx	lr

0800524e <USBD_CtlError>:
{
 800524e:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005250:	2180      	movs	r1, #128	; 0x80
{
 8005252:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005254:	f000 fb00 	bl	8005858 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005258:	4620      	mov	r0, r4
 800525a:	2100      	movs	r1, #0
}
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8005260:	f000 bafa 	b.w	8005858 <USBD_LL_StallEP>

08005264 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005264:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8005266:	b188      	cbz	r0, 800528c <USBD_GetString+0x28>
 8005268:	2400      	movs	r4, #0
 800526a:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800526c:	4623      	mov	r3, r4
 800526e:	3401      	adds	r4, #1
 8005270:	5d05      	ldrb	r5, [r0, r4]
 8005272:	2d00      	cmp	r5, #0
 8005274:	d1fa      	bne.n	800526c <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005276:	b2db      	uxtb	r3, r3
 8005278:	3301      	adds	r3, #1
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800527e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005280:	2303      	movs	r3, #3
 8005282:	704b      	strb	r3, [r1, #1]
  idx++;
 8005284:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005286:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800528a:	b902      	cbnz	r2, 800528e <USBD_GetString+0x2a>
}
 800528c:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800528e:	54ca      	strb	r2, [r1, r3]
    idx++;
 8005290:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8005292:	b2d2      	uxtb	r2, r2
    idx++;
 8005294:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8005296:	548d      	strb	r5, [r1, r2]
    idx++;
 8005298:	b2db      	uxtb	r3, r3
 800529a:	e7f4      	b.n	8005286 <USBD_GetString+0x22>

0800529c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800529c:	b510      	push	{r4, lr}
 800529e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80052a0:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80052a2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80052a6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80052aa:	460a      	mov	r2, r1
 80052ac:	2100      	movs	r1, #0
 80052ae:	f000 fb00 	bl	80058b2 <USBD_LL_Transmit>

  return USBD_OK;
}
 80052b2:	2000      	movs	r0, #0
 80052b4:	bd10      	pop	{r4, pc}

080052b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80052b6:	b508      	push	{r3, lr}
 80052b8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80052ba:	460a      	mov	r2, r1
 80052bc:	2100      	movs	r1, #0
 80052be:	f000 faf8 	bl	80058b2 <USBD_LL_Transmit>

  return USBD_OK;
}
 80052c2:	2000      	movs	r0, #0
 80052c4:	bd08      	pop	{r3, pc}

080052c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80052ca:	2203      	movs	r2, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80052cc:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80052d0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80052d4:	460a      	mov	r2, r1
 80052d6:	2100      	movs	r1, #0
 80052d8:	f000 faf4 	bl	80058c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80052dc:	2000      	movs	r0, #0
 80052de:	bd10      	pop	{r4, pc}

080052e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80052e0:	b508      	push	{r3, lr}
 80052e2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80052e4:	460a      	mov	r2, r1
 80052e6:	2100      	movs	r1, #0
 80052e8:	f000 faec 	bl	80058c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80052ec:	2000      	movs	r0, #0
 80052ee:	bd08      	pop	{r3, pc}

080052f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80052f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80052f2:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80052f4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80052f6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80052fa:	4619      	mov	r1, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	f000 fad8 	bl	80058b2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005302:	2000      	movs	r0, #0
 8005304:	bd08      	pop	{r3, pc}

08005306 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005306:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005308:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800530a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800530c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005310:	4619      	mov	r1, r3
 8005312:	461a      	mov	r2, r3
 8005314:	f000 fad6 	bl	80058c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005318:	2000      	movs	r0, #0
 800531a:	bd08      	pop	{r3, pc}

0800531c <svCLI_Printf>:
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}

static int svCLI_Printf(char* fmt,...)
{
 800531c:	b40f      	push	{r0, r1, r2, r3}
 800531e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005320:	aa08      	add	r2, sp, #32
static char msg[256];
	va_list ap;
	int len;

	va_start(ap, fmt);
	len = vsprintf(msg, fmt, ap);
 8005322:	480c      	ldr	r0, [pc, #48]	; (8005354 <svCLI_Printf+0x38>)
{
 8005324:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 8005328:	9201      	str	r2, [sp, #4]
	len = vsprintf(msg, fmt, ap);
 800532a:	f000 fbc5 	bl	8005ab8 <vsiprintf>
 800532e:	4e09      	ldr	r6, [pc, #36]	; (8005354 <svCLI_Printf+0x38>)
	va_end(ap);
	for (int i=0;i<len;i++) {
		svPutChar(msg[i]);
 8005330:	4f09      	ldr	r7, [pc, #36]	; (8005358 <svCLI_Printf+0x3c>)
	len = vsprintf(msg, fmt, ap);
 8005332:	4604      	mov	r4, r0
	for (int i=0;i<len;i++) {
 8005334:	2500      	movs	r5, #0
 8005336:	42a5      	cmp	r5, r4
 8005338:	db05      	blt.n	8005346 <svCLI_Printf+0x2a>
	}
	return len;
}
 800533a:	4620      	mov	r0, r4
 800533c:	b003      	add	sp, #12
 800533e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005342:	b004      	add	sp, #16
 8005344:	4770      	bx	lr
		svPutChar(msg[i]);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f816 0b01 	ldrb.w	r0, [r6], #1
 800534c:	4798      	blx	r3
	for (int i=0;i<len;i++) {
 800534e:	3501      	adds	r5, #1
 8005350:	e7f1      	b.n	8005336 <svCLI_Printf+0x1a>
 8005352:	bf00      	nop
 8005354:	2000050d 	.word	0x2000050d
 8005358:	2000061c 	.word	0x2000061c

0800535c <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (svPutChar) {
 8005360:	4d1f      	ldr	r5, [pc, #124]	; (80053e0 <svCLI_ShowHelp+0x84>)
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	b313      	cbz	r3, 80053ac <svCLI_ShowHelp+0x50>
		if (sCLITableBegin != sCLITablEnd) {
 8005366:	4f1f      	ldr	r7, [pc, #124]	; (80053e4 <svCLI_ShowHelp+0x88>)
 8005368:	4e1f      	ldr	r6, [pc, #124]	; (80053e8 <svCLI_ShowHelp+0x8c>)
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	6833      	ldr	r3, [r6, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d02f      	beq.n	80053d2 <svCLI_ShowHelp+0x76>
 8005372:	2450      	movs	r4, #80	; 0x50
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	203d      	movs	r0, #61	; 0x3d
 8005378:	4798      	blx	r3
 800537a:	3c01      	subs	r4, #1
 800537c:	d1fa      	bne.n	8005374 <svCLI_ShowHelp+0x18>
			svCLI_Printf("\r\n");
 800537e:	481b      	ldr	r0, [pc, #108]	; (80053ec <svCLI_ShowHelp+0x90>)
			SVCLI_t* pCLIEntry;
			int nCount = 1;
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 8005380:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005400 <svCLI_ShowHelp+0xa4>
			svCLI_Printf("\r\n");
 8005384:	f7ff ffca 	bl	800531c <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 8005388:	683c      	ldr	r4, [r7, #0]
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800538a:	4f19      	ldr	r7, [pc, #100]	; (80053f0 <svCLI_ShowHelp+0x94>)
			int nCount = 1;
 800538c:	2101      	movs	r1, #1
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800538e:	6833      	ldr	r3, [r6, #0]
 8005390:	42a3      	cmp	r3, r4
 8005392:	d811      	bhi.n	80053b8 <svCLI_ShowHelp+0x5c>
			}
			svCLI_Printf(AES_RESET);
 8005394:	4817      	ldr	r0, [pc, #92]	; (80053f4 <svCLI_ShowHelp+0x98>)
 8005396:	f7ff ffc1 	bl	800531c <svCLI_Printf>
 800539a:	2450      	movs	r4, #80	; 0x50
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	203d      	movs	r0, #61	; 0x3d
 80053a0:	4798      	blx	r3
 80053a2:	3c01      	subs	r4, #1
 80053a4:	d1fa      	bne.n	800539c <svCLI_ShowHelp+0x40>
		}
		else {	// No CLI Entry
			svCLI_Printf("No CLI Entries !!!");
		}
		svCLI_Printf("\r\n");
 80053a6:	4811      	ldr	r0, [pc, #68]	; (80053ec <svCLI_ShowHelp+0x90>)
 80053a8:	f7ff ffb8 	bl	800531c <svCLI_Printf>
	}
	if (svCommit) {
 80053ac:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <svCLI_ShowHelp+0x9c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	b19b      	cbz	r3, 80053da <svCLI_ShowHelp+0x7e>
		svCommit();
	}
}
 80053b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		svCommit();
 80053b6:	4718      	bx	r3
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	f101 0901 	add.w	r9, r1, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf08      	it	eq
 80053c4:	463b      	moveq	r3, r7
 80053c6:	4640      	mov	r0, r8
 80053c8:	f7ff ffa8 	bl	800531c <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80053cc:	340c      	adds	r4, #12
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 80053ce:	4649      	mov	r1, r9
 80053d0:	e7dd      	b.n	800538e <svCLI_ShowHelp+0x32>
			svCLI_Printf("No CLI Entries !!!");
 80053d2:	480a      	ldr	r0, [pc, #40]	; (80053fc <svCLI_ShowHelp+0xa0>)
 80053d4:	f7ff ffa2 	bl	800531c <svCLI_Printf>
 80053d8:	e7e5      	b.n	80053a6 <svCLI_ShowHelp+0x4a>
}
 80053da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053de:	bf00      	nop
 80053e0:	2000061c 	.word	0x2000061c
 80053e4:	20000614 	.word	0x20000614
 80053e8:	20000610 	.word	0x20000610
 80053ec:	080062fd 	.word	0x080062fd
 80053f0:	08006408 	.word	0x08006408
 80053f4:	0800642a 	.word	0x0800642a
 80053f8:	20000618 	.word	0x20000618
 80053fc:	0800642f 	.word	0x0800642f
 8005400:	0800640a 	.word	0x0800640a

08005404 <CLI_Help>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
	svCLI_ShowHelp();
 8005404:	f7ff bfaa 	b.w	800535c <svCLI_ShowHelp>

08005408 <svRingBuffer_Reset>:
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
}

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
	rb->head = rb->tail = rb->buf;
 8005408:	6803      	ldr	r3, [r0, #0]
 800540a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	rb->fOverflow = 0;		// Clear Flag
 800540e:	2300      	movs	r3, #0
	rb->fTurnAround = 0;	// Clear Flag
 8005410:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
 8005414:	4770      	bx	lr

08005416 <svRingBuffer_Push>:

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
	int nRet;
	nRet = 0;
	*(rb->head) = data;
 8005416:	6843      	ldr	r3, [r0, #4]
 8005418:	7019      	strb	r1, [r3, #0]
	rb->head++;
 800541a:	6843      	ldr	r3, [r0, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800541c:	68c2      	ldr	r2, [r0, #12]
	rb->head++;
 800541e:	3301      	adds	r3, #1
	if (rb->head == rb->bufend) {	// Wrap around
 8005420:	4293      	cmp	r3, r2
	rb->head++;
 8005422:	6043      	str	r3, [r0, #4]
	  rb->head = rb->buf;
 8005424:	bf04      	itt	eq
 8005426:	6803      	ldreq	r3, [r0, #0]
 8005428:	6043      	streq	r3, [r0, #4]
		rb->fTurnAround = 1;
		nRet = -1;
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800542a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
		rb->fTurnAround = 1;
 800542e:	bf05      	ittet	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	6183      	streq	r3, [r0, #24]
	nRet = 0;
 8005434:	2300      	movne	r3, #0
		nRet = -1;
 8005436:	f04f 33ff 	moveq.w	r3, #4294967295
	if (rb->head == rb->tail) {		// Over flowed
 800543a:	4291      	cmp	r1, r2
	  rb->fOverflow = 1;
 800543c:	bf02      	ittt	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	6143      	streq	r3, [r0, #20]
		nRet = -2;
 8005442:	f06f 0301 	mvneq.w	r3, #1
	}
	return nRet;
}
 8005446:	4618      	mov	r0, r3
 8005448:	4770      	bx	lr

0800544a <lwrb_get_free>:
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800544a:	b170      	cbz	r0, 800546a <lwrb_get_free+0x20>
 800544c:	6803      	ldr	r3, [r0, #0]
 800544e:	b153      	cbz	r3, 8005466 <lwrb_get_free+0x1c>
 8005450:	6843      	ldr	r3, [r0, #4]
 8005452:	b143      	cbz	r3, 8005466 <lwrb_get_free+0x1c>
        return 0;
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
    r = buff->r;
 8005454:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
    if (w == r) {
 8005458:	428a      	cmp	r2, r1
 800545a:	d003      	beq.n	8005464 <lwrb_get_free+0x1a>
        size = buff->size;
    } else if (r > w) {
        size = r - w;
    } else {
        size = buff->size - (w - r);
 800545c:	bf2a      	itet	cs
 800545e:	185b      	addcs	r3, r3, r1
        size = r - w;
 8005460:	1a8b      	subcc	r3, r1, r2
        size = buff->size - (w - r);
 8005462:	1a9b      	subcs	r3, r3, r2
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8005464:	3b01      	subs	r3, #1
}
 8005466:	4618      	mov	r0, r3
 8005468:	4770      	bx	lr
        return 0;
 800546a:	4603      	mov	r3, r0
 800546c:	e7fb      	b.n	8005466 <lwrb_get_free+0x1c>

0800546e <lwrb_write>:
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800546e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005472:	460f      	mov	r7, r1
 8005474:	4615      	mov	r5, r2
    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8005476:	4604      	mov	r4, r0
 8005478:	b918      	cbnz	r0, 8005482 <lwrb_write+0x14>
        return 0;
 800547a:	2500      	movs	r5, #0
}
 800547c:	4628      	mov	r0, r5
 800547e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8005482:	6803      	ldr	r3, [r0, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f8      	beq.n	800547a <lwrb_write+0xc>
 8005488:	6843      	ldr	r3, [r0, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f5      	beq.n	800547a <lwrb_write+0xc>
 800548e:	2900      	cmp	r1, #0
 8005490:	d0f3      	beq.n	800547a <lwrb_write+0xc>
 8005492:	2a00      	cmp	r2, #0
 8005494:	d0f1      	beq.n	800547a <lwrb_write+0xc>
    free = lwrb_get_free(buff);
 8005496:	f7ff ffd8 	bl	800544a <lwrb_get_free>
		if (free < btw) {
 800549a:	4285      	cmp	r5, r0
 800549c:	d908      	bls.n	80054b0 <lwrb_write+0x42>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	b11b      	cbz	r3, 80054aa <lwrb_write+0x3c>
 80054a2:	4602      	mov	r2, r0
 80054a4:	2102      	movs	r1, #2
 80054a6:	4620      	mov	r0, r4
 80054a8:	4798      	blx	r3
			free = lwrb_get_free(buff);
 80054aa:	4620      	mov	r0, r4
 80054ac:	f7ff ffcd 	bl	800544a <lwrb_get_free>
    btw = BUF_MIN(free, btw);
 80054b0:	4285      	cmp	r5, r0
 80054b2:	bf28      	it	cs
 80054b4:	4605      	movcs	r5, r0
    if (btw == 0) {
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	d0df      	beq.n	800547a <lwrb_write+0xc>
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 80054ba:	68e3      	ldr	r3, [r4, #12]
 80054bc:	6866      	ldr	r6, [r4, #4]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 80054be:	6820      	ldr	r0, [r4, #0]
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 80054c0:	1af6      	subs	r6, r6, r3
 80054c2:	42ae      	cmp	r6, r5
 80054c4:	bf28      	it	cs
 80054c6:	462e      	movcs	r6, r5
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 80054c8:	4418      	add	r0, r3
 80054ca:	4632      	mov	r2, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	f000 fb41 	bl	8005b54 <memcpy>
    buff->w += tocopy;
 80054d2:	68e3      	ldr	r3, [r4, #12]
    if (btw > 0) {
 80054d4:	ebb5 0806 	subs.w	r8, r5, r6
    buff->w += tocopy;
 80054d8:	4433      	add	r3, r6
 80054da:	60e3      	str	r3, [r4, #12]
    if (btw > 0) {
 80054dc:	d006      	beq.n	80054ec <lwrb_write+0x7e>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	4642      	mov	r2, r8
 80054e2:	19b9      	adds	r1, r7, r6
 80054e4:	f000 fb36 	bl	8005b54 <memcpy>
        buff->w = btw;
 80054e8:	f8c4 800c 	str.w	r8, [r4, #12]
    if (buff->w >= buff->size) {
 80054ec:	6863      	ldr	r3, [r4, #4]
 80054ee:	68e2      	ldr	r2, [r4, #12]
 80054f0:	429a      	cmp	r2, r3
        buff->w = 0;
 80054f2:	bf24      	itt	cs
 80054f4:	2300      	movcs	r3, #0
 80054f6:	60e3      	strcs	r3, [r4, #12]
 80054f8:	e7c0      	b.n	800547c <lwrb_write+0xe>
	...

080054fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80054fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80054fe:	490f      	ldr	r1, [pc, #60]	; (800553c <MX_USB_Device_Init+0x40>)
 8005500:	480f      	ldr	r0, [pc, #60]	; (8005540 <MX_USB_Device_Init+0x44>)
 8005502:	2200      	movs	r2, #0
 8005504:	f7ff fb4d 	bl	8004ba2 <USBD_Init>
 8005508:	b108      	cbz	r0, 800550e <MX_USB_Device_Init+0x12>
    Error_Handler();
 800550a:	f7fb f935 	bl	8000778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800550e:	490d      	ldr	r1, [pc, #52]	; (8005544 <MX_USB_Device_Init+0x48>)
 8005510:	480b      	ldr	r0, [pc, #44]	; (8005540 <MX_USB_Device_Init+0x44>)
 8005512:	f7ff fb59 	bl	8004bc8 <USBD_RegisterClass>
 8005516:	b108      	cbz	r0, 800551c <MX_USB_Device_Init+0x20>
    Error_Handler();
 8005518:	f7fb f92e 	bl	8000778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800551c:	490a      	ldr	r1, [pc, #40]	; (8005548 <MX_USB_Device_Init+0x4c>)
 800551e:	4808      	ldr	r0, [pc, #32]	; (8005540 <MX_USB_Device_Init+0x44>)
 8005520:	f7ff fb0d 	bl	8004b3e <USBD_CDC_RegisterInterface>
 8005524:	b108      	cbz	r0, 800552a <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8005526:	f7fb f927 	bl	8000778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800552a:	4805      	ldr	r0, [pc, #20]	; (8005540 <MX_USB_Device_Init+0x44>)
 800552c:	f7ff fb62 	bl	8004bf4 <USBD_Start>
 8005530:	b118      	cbz	r0, 800553a <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8005532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005536:	f7fb b91f 	b.w	8000778 <Error_Handler>
}
 800553a:	bd08      	pop	{r3, pc}
 800553c:	20000170 	.word	0x20000170
 8005540:	20000620 	.word	0x20000620
 8005544:	2000004c 	.word	0x2000004c
 8005548:	2000015c 	.word	0x2000015c

0800554c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800554c:	2000      	movs	r0, #0
 800554e:	4770      	bx	lr

08005550 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005550:	2000      	movs	r0, #0
 8005552:	4770      	bx	lr

08005554 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8005554:	2000      	movs	r0, #0
 8005556:	4770      	bx	lr

08005558 <CDC_Receive_FS>:
{
 8005558:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800555a:	4c05      	ldr	r4, [pc, #20]	; (8005570 <CDC_Receive_FS+0x18>)
{
 800555c:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff faff 	bl	8004b62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005564:	4620      	mov	r0, r4
 8005566:	f7ff fb05 	bl	8004b74 <USBD_CDC_ReceivePacket>
}
 800556a:	2000      	movs	r0, #0
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	20000620 	.word	0x20000620

08005574 <CDC_Init_FS>:
{
 8005574:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005576:	4c06      	ldr	r4, [pc, #24]	; (8005590 <CDC_Init_FS+0x1c>)
 8005578:	4906      	ldr	r1, [pc, #24]	; (8005594 <CDC_Init_FS+0x20>)
 800557a:	2200      	movs	r2, #0
 800557c:	4620      	mov	r0, r4
 800557e:	f7ff fae5 	bl	8004b4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005582:	4905      	ldr	r1, [pc, #20]	; (8005598 <CDC_Init_FS+0x24>)
 8005584:	4620      	mov	r0, r4
 8005586:	f7ff faec 	bl	8004b62 <USBD_CDC_SetRxBuffer>
}
 800558a:	2000      	movs	r0, #0
 800558c:	bd10      	pop	{r4, pc}
 800558e:	bf00      	nop
 8005590:	20000620 	.word	0x20000620
 8005594:	200010f0 	.word	0x200010f0
 8005598:	200008f0 	.word	0x200008f0

0800559c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800559c:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 800559e:	4801      	ldr	r0, [pc, #4]	; (80055a4 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 80055a0:	800b      	strh	r3, [r1, #0]
}
 80055a2:	4770      	bx	lr
 80055a4:	20000190 	.word	0x20000190

080055a8 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80055a8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80055aa:	4801      	ldr	r0, [pc, #4]	; (80055b0 <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80055ac:	800b      	strh	r3, [r1, #0]
}
 80055ae:	4770      	bx	lr
 80055b0:	200001a4 	.word	0x200001a4

080055b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80055b4:	2300      	movs	r3, #0
 80055b6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80055b8:	1c4d      	adds	r5, r1, #1
 80055ba:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 80055bc:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80055be:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80055c2:	bf34      	ite	cc
 80055c4:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80055c6:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80055c8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80055cc:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80055d0:	3301      	adds	r3, #1
 80055d2:	b2dc      	uxtb	r4, r3
 80055d4:	42a2      	cmp	r2, r4
    value = value << 4;
 80055d6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80055da:	d8ef      	bhi.n	80055bc <IntToUnicode+0x8>
  }
}
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080055e0 <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80055e0:	231a      	movs	r3, #26
{
 80055e2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80055e4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <USBD_CDC_SerialStrDescriptor+0x30>)
 80055e8:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial0 += deviceserial2;
 80055ec:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 80055f0:	1880      	adds	r0, r0, r2
 80055f2:	d00a      	beq.n	800560a <USBD_CDC_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80055f4:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80055f8:	4906      	ldr	r1, [pc, #24]	; (8005614 <USBD_CDC_SerialStrDescriptor+0x34>)
 80055fa:	2208      	movs	r2, #8
 80055fc:	f7ff ffda 	bl	80055b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005600:	2204      	movs	r2, #4
 8005602:	3110      	adds	r1, #16
 8005604:	4620      	mov	r0, r4
 8005606:	f7ff ffd5 	bl	80055b4 <IntToUnicode>
}
 800560a:	4803      	ldr	r0, [pc, #12]	; (8005618 <USBD_CDC_SerialStrDescriptor+0x38>)
 800560c:	bd10      	pop	{r4, pc}
 800560e:	bf00      	nop
 8005610:	1fff7000 	.word	0x1fff7000
 8005614:	200001aa 	.word	0x200001aa
 8005618:	200001a8 	.word	0x200001a8

0800561c <USBD_CDC_ManufacturerStrDescriptor>:
{
 800561c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800561e:	4c04      	ldr	r4, [pc, #16]	; (8005630 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8005620:	4804      	ldr	r0, [pc, #16]	; (8005634 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 8005622:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005624:	4621      	mov	r1, r4
 8005626:	f7ff fe1d 	bl	8005264 <USBD_GetString>
}
 800562a:	4620      	mov	r0, r4
 800562c:	bd10      	pop	{r4, pc}
 800562e:	bf00      	nop
 8005630:	200018f0 	.word	0x200018f0
 8005634:	08006458 	.word	0x08006458

08005638 <USBD_CDC_ProductStrDescriptor>:
{
 8005638:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800563a:	4c04      	ldr	r4, [pc, #16]	; (800564c <USBD_CDC_ProductStrDescriptor+0x14>)
 800563c:	4804      	ldr	r0, [pc, #16]	; (8005650 <USBD_CDC_ProductStrDescriptor+0x18>)
{
 800563e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005640:	4621      	mov	r1, r4
 8005642:	f7ff fe0f 	bl	8005264 <USBD_GetString>
}
 8005646:	4620      	mov	r0, r4
 8005648:	bd10      	pop	{r4, pc}
 800564a:	bf00      	nop
 800564c:	200018f0 	.word	0x200018f0
 8005650:	0800646b 	.word	0x0800646b

08005654 <USBD_CDC_ConfigStrDescriptor>:
{
 8005654:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005656:	4c04      	ldr	r4, [pc, #16]	; (8005668 <USBD_CDC_ConfigStrDescriptor+0x14>)
 8005658:	4804      	ldr	r0, [pc, #16]	; (800566c <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 800565a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800565c:	4621      	mov	r1, r4
 800565e:	f7ff fe01 	bl	8005264 <USBD_GetString>
}
 8005662:	4620      	mov	r0, r4
 8005664:	bd10      	pop	{r4, pc}
 8005666:	bf00      	nop
 8005668:	200018f0 	.word	0x200018f0
 800566c:	08006481 	.word	0x08006481

08005670 <USBD_CDC_InterfaceStrDescriptor>:
{
 8005670:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005672:	4c04      	ldr	r4, [pc, #16]	; (8005684 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8005674:	4804      	ldr	r0, [pc, #16]	; (8005688 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 8005676:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005678:	4621      	mov	r1, r4
 800567a:	f7ff fdf3 	bl	8005264 <USBD_GetString>
}
 800567e:	4620      	mov	r0, r4
 8005680:	bd10      	pop	{r4, pc}
 8005682:	bf00      	nop
 8005684:	200018f0 	.word	0x200018f0
 8005688:	0800648c 	.word	0x0800648c

0800568c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800568c:	2803      	cmp	r0, #3
 800568e:	bf9a      	itte	ls
 8005690:	4b01      	ldrls	r3, [pc, #4]	; (8005698 <USBD_Get_USB_Status+0xc>)
 8005692:	5c18      	ldrbls	r0, [r3, r0]
{
 8005694:	2003      	movhi	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005696:	4770      	bx	lr
 8005698:	0800649a 	.word	0x0800649a

0800569c <HAL_PCD_MspInit>:
{
 800569c:	b510      	push	{r4, lr}
 800569e:	4604      	mov	r4, r0
 80056a0:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056a2:	2254      	movs	r2, #84	; 0x54
 80056a4:	2100      	movs	r1, #0
 80056a6:	a801      	add	r0, sp, #4
 80056a8:	f000 fa10 	bl	8005acc <memset>
  if(pcdHandle->Instance==USB)
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <HAL_PCD_MspInit+0x54>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d11a      	bne.n	80056ea <HAL_PCD_MspInit+0x4e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80056b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056b8:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80056ba:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056bc:	f7fd f998 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 80056c0:	b108      	cbz	r0, 80056c6 <HAL_PCD_MspInit+0x2a>
      Error_Handler();
 80056c2:	f7fb f859 	bl	8000778 <Error_Handler>
    __HAL_RCC_USB_CLK_ENABLE();
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_PCD_MspInit+0x58>)
 80056c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056ca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80056ce:	659a      	str	r2, [r3, #88]	; 0x58
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80056d2:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80056d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80056da:	2014      	movs	r0, #20
 80056dc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80056de:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80056e0:	f7fb fba8 	bl	8000e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80056e4:	2014      	movs	r0, #20
 80056e6:	f7fb fbd7 	bl	8000e98 <HAL_NVIC_EnableIRQ>
}
 80056ea:	b016      	add	sp, #88	; 0x58
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	bf00      	nop
 80056f0:	40005c00 	.word	0x40005c00
 80056f4:	40021000 	.word	0x40021000

080056f8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80056f8:	f500 7126 	add.w	r1, r0, #664	; 0x298
 80056fc:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 8005700:	f7ff ba89 	b.w	8004c16 <USBD_LL_SetupStage>

08005704 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005704:	2328      	movs	r3, #40	; 0x28
 8005706:	fb03 0301 	mla	r3, r3, r1, r0
 800570a:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 800570e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8005712:	f7ff bab0 	b.w	8004c76 <USBD_LL_DataOutStage>

08005716 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005716:	2328      	movs	r3, #40	; 0x28
 8005718:	fb03 0301 	mla	r3, r3, r1, r0
 800571c:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 8005720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005722:	f7ff bad8 	b.w	8004cd6 <USBD_LL_DataInStage>

08005726 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005726:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 800572a:	f7ff bb6a 	b.w	8004e02 <USBD_LL_SOF>

0800572e <HAL_PCD_ResetCallback>:
{
 800572e:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005730:	7943      	ldrb	r3, [r0, #5]
 8005732:	2b02      	cmp	r3, #2
{
 8005734:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005736:	d001      	beq.n	800573c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8005738:	f7fb f81e 	bl	8000778 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800573c:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
 8005740:	2101      	movs	r1, #1
 8005742:	f7ff fb46 	bl	8004dd2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005746:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
}
 800574a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800574e:	f7ff bb14 	b.w	8004d7a <USBD_LL_Reset>
	...

08005754 <HAL_PCD_SuspendCallback>:
{
 8005754:	b510      	push	{r4, lr}
 8005756:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005758:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 800575c:	f7ff fb3c 	bl	8004dd8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8005760:	7a63      	ldrb	r3, [r4, #9]
 8005762:	b123      	cbz	r3, 800576e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005764:	4a02      	ldr	r2, [pc, #8]	; (8005770 <HAL_PCD_SuspendCallback+0x1c>)
 8005766:	6913      	ldr	r3, [r2, #16]
 8005768:	f043 0306 	orr.w	r3, r3, #6
 800576c:	6113      	str	r3, [r2, #16]
}
 800576e:	bd10      	pop	{r4, pc}
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <HAL_PCD_ResumeCallback>:
{
 8005774:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 8005776:	7a43      	ldrb	r3, [r0, #9]
{
 8005778:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800577a:	b133      	cbz	r3, 800578a <HAL_PCD_ResumeCallback+0x16>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800577c:	4a06      	ldr	r2, [pc, #24]	; (8005798 <HAL_PCD_ResumeCallback+0x24>)
 800577e:	6913      	ldr	r3, [r2, #16]
 8005780:	f023 0306 	bic.w	r3, r3, #6
 8005784:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 8005786:	f7fa ff3b 	bl	8000600 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800578a:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
}
 800578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005792:	f7ff bb2b 	b.w	8004dec <USBD_LL_Resume>
 8005796:	bf00      	nop
 8005798:	e000ed00 	.word	0xe000ed00

0800579c <USBD_LL_Init>:
{
 800579c:	b510      	push	{r4, lr}
 800579e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80057a0:	481c      	ldr	r0, [pc, #112]	; (8005814 <USBD_LL_Init+0x78>)
  hpcd_USB_FS.Instance = USB;
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <USBD_LL_Init+0x7c>)
 80057a4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80057a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80057aa:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80057ac:	2302      	movs	r3, #2
 80057ae:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80057b0:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80057b2:	f8c0 42d8 	str.w	r4, [r0, #728]	; 0x2d8
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80057b6:	6083      	str	r3, [r0, #8]
  pdev->pData = &hpcd_USB_FS;
 80057b8:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80057bc:	f7fb fe66 	bl	800148c <HAL_PCD_Init>
 80057c0:	b108      	cbz	r0, 80057c6 <USBD_LL_Init+0x2a>
    Error_Handler( );
 80057c2:	f7fa ffd9 	bl	8000778 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80057c6:	2200      	movs	r2, #0
 80057c8:	4611      	mov	r1, r2
 80057ca:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80057ce:	2318      	movs	r3, #24
 80057d0:	f7fc fcc4 	bl	800215c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80057d4:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80057d8:	2358      	movs	r3, #88	; 0x58
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	f7fc fcbd 	bl	800215c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80057e2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80057e6:	23c0      	movs	r3, #192	; 0xc0
 80057e8:	2200      	movs	r2, #0
 80057ea:	2181      	movs	r1, #129	; 0x81
 80057ec:	f7fc fcb6 	bl	800215c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80057f0:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80057f4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80057f8:	2200      	movs	r2, #0
 80057fa:	2101      	movs	r1, #1
 80057fc:	f7fc fcae 	bl	800215c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005800:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8005804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005808:	2200      	movs	r2, #0
 800580a:	2182      	movs	r1, #130	; 0x82
 800580c:	f7fc fca6 	bl	800215c <HAL_PCDEx_PMAConfig>
}
 8005810:	2000      	movs	r0, #0
 8005812:	bd10      	pop	{r4, pc}
 8005814:	20001af0 	.word	0x20001af0
 8005818:	40005c00 	.word	0x40005c00

0800581c <USBD_LL_Start>:
{
 800581c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800581e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005822:	f7fb fe86 	bl	8001532 <HAL_PCD_Start>
}
 8005826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800582a:	f7ff bf2f 	b.w	800568c <USBD_Get_USB_Status>

0800582e <USBD_LL_OpenEP>:
{
 800582e:	b510      	push	{r4, lr}
 8005830:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005832:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8005836:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005838:	4623      	mov	r3, r4
 800583a:	f7fc fb8b 	bl	8001f54 <HAL_PCD_EP_Open>
}
 800583e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005842:	f7ff bf23 	b.w	800568c <USBD_Get_USB_Status>

08005846 <USBD_LL_CloseEP>:
{
 8005846:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005848:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800584c:	f7fc fbb6 	bl	8001fbc <HAL_PCD_EP_Close>
}
 8005850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005854:	f7ff bf1a 	b.w	800568c <USBD_Get_USB_Status>

08005858 <USBD_LL_StallEP>:
{
 8005858:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800585a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800585e:	f7fc fc14 	bl	800208a <HAL_PCD_EP_SetStall>
}
 8005862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005866:	f7ff bf11 	b.w	800568c <USBD_Get_USB_Status>

0800586a <USBD_LL_ClearStallEP>:
{
 800586a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800586c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005870:	f7fc fc3d 	bl	80020ee <HAL_PCD_EP_ClrStall>
}
 8005874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005878:	f7ff bf08 	b.w	800568c <USBD_Get_USB_Status>

0800587c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800587c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005880:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8005884:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005888:	bf1b      	ittet	ne
 800588a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800588e:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005892:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005896:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005898:	bf08      	it	eq
 800589a:	f893 0152 	ldrbeq.w	r0, [r3, #338]	; 0x152
}
 800589e:	4770      	bx	lr

080058a0 <USBD_LL_SetUSBAddress>:
{
 80058a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80058a2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80058a6:	f7fb fe59 	bl	800155c <HAL_PCD_SetAddress>
}
 80058aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058ae:	f7ff beed 	b.w	800568c <USBD_Get_USB_Status>

080058b2 <USBD_LL_Transmit>:
{
 80058b2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80058b4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80058b8:	f7fc fbcc 	bl	8002054 <HAL_PCD_EP_Transmit>
}
 80058bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058c0:	f7ff bee4 	b.w	800568c <USBD_Get_USB_Status>

080058c4 <USBD_LL_PrepareReceive>:
{
 80058c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80058c6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80058ca:	f7fc fba5 	bl	8002018 <HAL_PCD_EP_Receive>
}
 80058ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058d2:	f7ff bedb 	b.w	800568c <USBD_Get_USB_Status>

080058d6 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80058d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80058da:	f7fc bbb3 	b.w	8002044 <HAL_PCD_EP_GetRxCount>
	...

080058e0 <HAL_PCDEx_LPM_Callback>:
{
 80058e0:	b510      	push	{r4, lr}
 80058e2:	4604      	mov	r4, r0
  switch (msg)
 80058e4:	b111      	cbz	r1, 80058ec <HAL_PCDEx_LPM_Callback+0xc>
 80058e6:	2901      	cmp	r1, #1
 80058e8:	d00f      	beq.n	800590a <HAL_PCDEx_LPM_Callback+0x2a>
}
 80058ea:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80058ec:	7a43      	ldrb	r3, [r0, #9]
 80058ee:	b133      	cbz	r3, 80058fe <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 80058f0:	f7fa fe86 	bl	8000600 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80058f4:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <HAL_PCDEx_LPM_Callback+0x44>)
 80058f6:	6913      	ldr	r3, [r2, #16]
 80058f8:	f023 0306 	bic.w	r3, r3, #6
 80058fc:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80058fe:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
}
 8005902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8005906:	f7ff ba71 	b.w	8004dec <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 800590a:	f8d0 02d8 	ldr.w	r0, [r0, #728]	; 0x2d8
 800590e:	f7ff fa63 	bl	8004dd8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8005912:	7a63      	ldrb	r3, [r4, #9]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0e8      	beq.n	80058ea <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005918:	4a02      	ldr	r2, [pc, #8]	; (8005924 <HAL_PCDEx_LPM_Callback+0x44>)
 800591a:	6913      	ldr	r3, [r2, #16]
 800591c:	f043 0306 	orr.w	r3, r3, #6
 8005920:	6113      	str	r3, [r2, #16]
}
 8005922:	e7e2      	b.n	80058ea <HAL_PCDEx_LPM_Callback+0xa>
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <USBD_static_malloc>:
}
 8005928:	4800      	ldr	r0, [pc, #0]	; (800592c <USBD_static_malloc+0x4>)
 800592a:	4770      	bx	lr
 800592c:	20001dcc 	.word	0x20001dcc

08005930 <USBD_static_free>:
}
 8005930:	4770      	bx	lr
	...

08005934 <sbrk_aligned>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4e0e      	ldr	r6, [pc, #56]	; (8005970 <sbrk_aligned+0x3c>)
 8005938:	460c      	mov	r4, r1
 800593a:	6831      	ldr	r1, [r6, #0]
 800593c:	4605      	mov	r5, r0
 800593e:	b911      	cbnz	r1, 8005946 <sbrk_aligned+0x12>
 8005940:	f000 f8cc 	bl	8005adc <_sbrk_r>
 8005944:	6030      	str	r0, [r6, #0]
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 f8c7 	bl	8005adc <_sbrk_r>
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d00a      	beq.n	8005968 <sbrk_aligned+0x34>
 8005952:	1cc4      	adds	r4, r0, #3
 8005954:	f024 0403 	bic.w	r4, r4, #3
 8005958:	42a0      	cmp	r0, r4
 800595a:	d007      	beq.n	800596c <sbrk_aligned+0x38>
 800595c:	1a21      	subs	r1, r4, r0
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f8bc 	bl	8005adc <_sbrk_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d101      	bne.n	800596c <sbrk_aligned+0x38>
 8005968:	f04f 34ff 	mov.w	r4, #4294967295
 800596c:	4620      	mov	r0, r4
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	20001ff0 	.word	0x20001ff0

08005974 <_malloc_r>:
 8005974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005978:	1ccd      	adds	r5, r1, #3
 800597a:	f025 0503 	bic.w	r5, r5, #3
 800597e:	3508      	adds	r5, #8
 8005980:	2d0c      	cmp	r5, #12
 8005982:	bf38      	it	cc
 8005984:	250c      	movcc	r5, #12
 8005986:	2d00      	cmp	r5, #0
 8005988:	4607      	mov	r7, r0
 800598a:	db01      	blt.n	8005990 <_malloc_r+0x1c>
 800598c:	42a9      	cmp	r1, r5
 800598e:	d905      	bls.n	800599c <_malloc_r+0x28>
 8005990:	230c      	movs	r3, #12
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	2600      	movs	r6, #0
 8005996:	4630      	mov	r0, r6
 8005998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a70 <_malloc_r+0xfc>
 80059a0:	f000 f868 	bl	8005a74 <__malloc_lock>
 80059a4:	f8d8 3000 	ldr.w	r3, [r8]
 80059a8:	461c      	mov	r4, r3
 80059aa:	bb5c      	cbnz	r4, 8005a04 <_malloc_r+0x90>
 80059ac:	4629      	mov	r1, r5
 80059ae:	4638      	mov	r0, r7
 80059b0:	f7ff ffc0 	bl	8005934 <sbrk_aligned>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	4604      	mov	r4, r0
 80059b8:	d155      	bne.n	8005a66 <_malloc_r+0xf2>
 80059ba:	f8d8 4000 	ldr.w	r4, [r8]
 80059be:	4626      	mov	r6, r4
 80059c0:	2e00      	cmp	r6, #0
 80059c2:	d145      	bne.n	8005a50 <_malloc_r+0xdc>
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	d048      	beq.n	8005a5a <_malloc_r+0xe6>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	4631      	mov	r1, r6
 80059cc:	4638      	mov	r0, r7
 80059ce:	eb04 0903 	add.w	r9, r4, r3
 80059d2:	f000 f883 	bl	8005adc <_sbrk_r>
 80059d6:	4581      	cmp	r9, r0
 80059d8:	d13f      	bne.n	8005a5a <_malloc_r+0xe6>
 80059da:	6821      	ldr	r1, [r4, #0]
 80059dc:	1a6d      	subs	r5, r5, r1
 80059de:	4629      	mov	r1, r5
 80059e0:	4638      	mov	r0, r7
 80059e2:	f7ff ffa7 	bl	8005934 <sbrk_aligned>
 80059e6:	3001      	adds	r0, #1
 80059e8:	d037      	beq.n	8005a5a <_malloc_r+0xe6>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	442b      	add	r3, r5
 80059ee:	6023      	str	r3, [r4, #0]
 80059f0:	f8d8 3000 	ldr.w	r3, [r8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d038      	beq.n	8005a6a <_malloc_r+0xf6>
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	42a2      	cmp	r2, r4
 80059fc:	d12b      	bne.n	8005a56 <_malloc_r+0xe2>
 80059fe:	2200      	movs	r2, #0
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	e00f      	b.n	8005a24 <_malloc_r+0xb0>
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	1b52      	subs	r2, r2, r5
 8005a08:	d41f      	bmi.n	8005a4a <_malloc_r+0xd6>
 8005a0a:	2a0b      	cmp	r2, #11
 8005a0c:	d917      	bls.n	8005a3e <_malloc_r+0xca>
 8005a0e:	1961      	adds	r1, r4, r5
 8005a10:	42a3      	cmp	r3, r4
 8005a12:	6025      	str	r5, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	6059      	strne	r1, [r3, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	bf08      	it	eq
 8005a1c:	f8c8 1000 	streq.w	r1, [r8]
 8005a20:	5162      	str	r2, [r4, r5]
 8005a22:	604b      	str	r3, [r1, #4]
 8005a24:	4638      	mov	r0, r7
 8005a26:	f104 060b 	add.w	r6, r4, #11
 8005a2a:	f000 f829 	bl	8005a80 <__malloc_unlock>
 8005a2e:	f026 0607 	bic.w	r6, r6, #7
 8005a32:	1d23      	adds	r3, r4, #4
 8005a34:	1af2      	subs	r2, r6, r3
 8005a36:	d0ae      	beq.n	8005996 <_malloc_r+0x22>
 8005a38:	1b9b      	subs	r3, r3, r6
 8005a3a:	50a3      	str	r3, [r4, r2]
 8005a3c:	e7ab      	b.n	8005996 <_malloc_r+0x22>
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	6862      	ldr	r2, [r4, #4]
 8005a42:	d1dd      	bne.n	8005a00 <_malloc_r+0x8c>
 8005a44:	f8c8 2000 	str.w	r2, [r8]
 8005a48:	e7ec      	b.n	8005a24 <_malloc_r+0xb0>
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	6864      	ldr	r4, [r4, #4]
 8005a4e:	e7ac      	b.n	80059aa <_malloc_r+0x36>
 8005a50:	4634      	mov	r4, r6
 8005a52:	6876      	ldr	r6, [r6, #4]
 8005a54:	e7b4      	b.n	80059c0 <_malloc_r+0x4c>
 8005a56:	4613      	mov	r3, r2
 8005a58:	e7cc      	b.n	80059f4 <_malloc_r+0x80>
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f000 f80e 	bl	8005a80 <__malloc_unlock>
 8005a64:	e797      	b.n	8005996 <_malloc_r+0x22>
 8005a66:	6025      	str	r5, [r4, #0]
 8005a68:	e7dc      	b.n	8005a24 <_malloc_r+0xb0>
 8005a6a:	605b      	str	r3, [r3, #4]
 8005a6c:	deff      	udf	#255	; 0xff
 8005a6e:	bf00      	nop
 8005a70:	20001fec 	.word	0x20001fec

08005a74 <__malloc_lock>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__malloc_lock+0x8>)
 8005a76:	f000 b86b 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20002130 	.word	0x20002130

08005a80 <__malloc_unlock>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__malloc_unlock+0x8>)
 8005a82:	f000 b866 	b.w	8005b52 <__retarget_lock_release_recursive>
 8005a86:	bf00      	nop
 8005a88:	20002130 	.word	0x20002130

08005a8c <_vsiprintf_r>:
 8005a8c:	b500      	push	{lr}
 8005a8e:	b09b      	sub	sp, #108	; 0x6c
 8005a90:	9100      	str	r1, [sp, #0]
 8005a92:	9104      	str	r1, [sp, #16]
 8005a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a98:	9105      	str	r1, [sp, #20]
 8005a9a:	9102      	str	r1, [sp, #8]
 8005a9c:	4905      	ldr	r1, [pc, #20]	; (8005ab4 <_vsiprintf_r+0x28>)
 8005a9e:	9103      	str	r1, [sp, #12]
 8005aa0:	4669      	mov	r1, sp
 8005aa2:	f000 f90b 	bl	8005cbc <_svfiprintf_r>
 8005aa6:	9b00      	ldr	r3, [sp, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	b01b      	add	sp, #108	; 0x6c
 8005aae:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ab2:	bf00      	nop
 8005ab4:	ffff0208 	.word	0xffff0208

08005ab8 <vsiprintf>:
 8005ab8:	4613      	mov	r3, r2
 8005aba:	460a      	mov	r2, r1
 8005abc:	4601      	mov	r1, r0
 8005abe:	4802      	ldr	r0, [pc, #8]	; (8005ac8 <vsiprintf+0x10>)
 8005ac0:	6800      	ldr	r0, [r0, #0]
 8005ac2:	f7ff bfe3 	b.w	8005a8c <_vsiprintf_r>
 8005ac6:	bf00      	nop
 8005ac8:	20000210 	.word	0x20000210

08005acc <memset>:
 8005acc:	4402      	add	r2, r0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d100      	bne.n	8005ad6 <memset+0xa>
 8005ad4:	4770      	bx	lr
 8005ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8005ada:	e7f9      	b.n	8005ad0 <memset+0x4>

08005adc <_sbrk_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d06      	ldr	r5, [pc, #24]	; (8005af8 <_sbrk_r+0x1c>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	f7fa fef0 	bl	80008cc <_sbrk>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_sbrk_r+0x1a>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_sbrk_r+0x1a>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	2000212c 	.word	0x2000212c

08005afc <__errno>:
 8005afc:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <__errno+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000210 	.word	0x20000210

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	; (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	; (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	; (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	; (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f000 fbae 	bl	800627c <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	080064dc 	.word	0x080064dc
 8005b44:	080064dc 	.word	0x080064dc
 8005b48:	080064dc 	.word	0x080064dc
 8005b4c:	080064e0 	.word	0x080064e0

08005b50 <__retarget_lock_acquire_recursive>:
 8005b50:	4770      	bx	lr

08005b52 <__retarget_lock_release_recursive>:
 8005b52:	4770      	bx	lr

08005b54 <memcpy>:
 8005b54:	440a      	add	r2, r1
 8005b56:	4291      	cmp	r1, r2
 8005b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b5c:	d100      	bne.n	8005b60 <memcpy+0xc>
 8005b5e:	4770      	bx	lr
 8005b60:	b510      	push	{r4, lr}
 8005b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	d1f9      	bne.n	8005b62 <memcpy+0xe>
 8005b6e:	bd10      	pop	{r4, pc}

08005b70 <_free_r>:
 8005b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b72:	2900      	cmp	r1, #0
 8005b74:	d044      	beq.n	8005c00 <_free_r+0x90>
 8005b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7a:	9001      	str	r0, [sp, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b82:	bfb8      	it	lt
 8005b84:	18e4      	addlt	r4, r4, r3
 8005b86:	f7ff ff75 	bl	8005a74 <__malloc_lock>
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <_free_r+0x94>)
 8005b8c:	9801      	ldr	r0, [sp, #4]
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	b933      	cbnz	r3, 8005ba0 <_free_r+0x30>
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	b003      	add	sp, #12
 8005b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b9c:	f7ff bf70 	b.w	8005a80 <__malloc_unlock>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d908      	bls.n	8005bb6 <_free_r+0x46>
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	1961      	adds	r1, r4, r5
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf01      	itttt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	1949      	addeq	r1, r1, r5
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	e7ed      	b.n	8005b92 <_free_r+0x22>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b10b      	cbz	r3, 8005bc0 <_free_r+0x50>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d9fa      	bls.n	8005bb6 <_free_r+0x46>
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	1855      	adds	r5, r2, r1
 8005bc4:	42a5      	cmp	r5, r4
 8005bc6:	d10b      	bne.n	8005be0 <_free_r+0x70>
 8005bc8:	6824      	ldr	r4, [r4, #0]
 8005bca:	4421      	add	r1, r4
 8005bcc:	1854      	adds	r4, r2, r1
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	d1e0      	bne.n	8005b96 <_free_r+0x26>
 8005bd4:	681c      	ldr	r4, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	440c      	add	r4, r1
 8005bdc:	6014      	str	r4, [r2, #0]
 8005bde:	e7da      	b.n	8005b96 <_free_r+0x26>
 8005be0:	d902      	bls.n	8005be8 <_free_r+0x78>
 8005be2:	230c      	movs	r3, #12
 8005be4:	6003      	str	r3, [r0, #0]
 8005be6:	e7d6      	b.n	8005b96 <_free_r+0x26>
 8005be8:	6825      	ldr	r5, [r4, #0]
 8005bea:	1961      	adds	r1, r4, r5
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf04      	itt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	bf04      	itt	eq
 8005bf8:	1949      	addeq	r1, r1, r5
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	6054      	str	r4, [r2, #4]
 8005bfe:	e7ca      	b.n	8005b96 <_free_r+0x26>
 8005c00:	b003      	add	sp, #12
 8005c02:	bd30      	pop	{r4, r5, pc}
 8005c04:	20001fec 	.word	0x20001fec

08005c08 <__ssputs_r>:
 8005c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	688e      	ldr	r6, [r1, #8]
 8005c0e:	461f      	mov	r7, r3
 8005c10:	42be      	cmp	r6, r7
 8005c12:	680b      	ldr	r3, [r1, #0]
 8005c14:	4682      	mov	sl, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	4690      	mov	r8, r2
 8005c1a:	d82c      	bhi.n	8005c76 <__ssputs_r+0x6e>
 8005c1c:	898a      	ldrh	r2, [r1, #12]
 8005c1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c22:	d026      	beq.n	8005c72 <__ssputs_r+0x6a>
 8005c24:	6965      	ldr	r5, [r4, #20]
 8005c26:	6909      	ldr	r1, [r1, #16]
 8005c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c2c:	eba3 0901 	sub.w	r9, r3, r1
 8005c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c34:	1c7b      	adds	r3, r7, #1
 8005c36:	444b      	add	r3, r9
 8005c38:	106d      	asrs	r5, r5, #1
 8005c3a:	429d      	cmp	r5, r3
 8005c3c:	bf38      	it	cc
 8005c3e:	461d      	movcc	r5, r3
 8005c40:	0553      	lsls	r3, r2, #21
 8005c42:	d527      	bpl.n	8005c94 <__ssputs_r+0x8c>
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7ff fe95 	bl	8005974 <_malloc_r>
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	b360      	cbz	r0, 8005ca8 <__ssputs_r+0xa0>
 8005c4e:	6921      	ldr	r1, [r4, #16]
 8005c50:	464a      	mov	r2, r9
 8005c52:	f7ff ff7f 	bl	8005b54 <memcpy>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	6126      	str	r6, [r4, #16]
 8005c64:	6165      	str	r5, [r4, #20]
 8005c66:	444e      	add	r6, r9
 8005c68:	eba5 0509 	sub.w	r5, r5, r9
 8005c6c:	6026      	str	r6, [r4, #0]
 8005c6e:	60a5      	str	r5, [r4, #8]
 8005c70:	463e      	mov	r6, r7
 8005c72:	42be      	cmp	r6, r7
 8005c74:	d900      	bls.n	8005c78 <__ssputs_r+0x70>
 8005c76:	463e      	mov	r6, r7
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	f000 faab 	bl	80061d8 <memmove>
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	1b9b      	subs	r3, r3, r6
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	4433      	add	r3, r6
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	462a      	mov	r2, r5
 8005c96:	f000 fab9 	bl	800620c <_realloc_r>
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d1e0      	bne.n	8005c62 <__ssputs_r+0x5a>
 8005ca0:	6921      	ldr	r1, [r4, #16]
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	f7ff ff64 	bl	8005b70 <_free_r>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	f8ca 3000 	str.w	r3, [sl]
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cba:	e7e9      	b.n	8005c90 <__ssputs_r+0x88>

08005cbc <_svfiprintf_r>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	898b      	ldrh	r3, [r1, #12]
 8005cc4:	061b      	lsls	r3, r3, #24
 8005cc6:	b09d      	sub	sp, #116	; 0x74
 8005cc8:	4607      	mov	r7, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	d50e      	bpl.n	8005cee <_svfiprintf_r+0x32>
 8005cd0:	690b      	ldr	r3, [r1, #16]
 8005cd2:	b963      	cbnz	r3, 8005cee <_svfiprintf_r+0x32>
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	f7ff fe4d 	bl	8005974 <_malloc_r>
 8005cda:	6028      	str	r0, [r5, #0]
 8005cdc:	6128      	str	r0, [r5, #16]
 8005cde:	b920      	cbnz	r0, 8005cea <_svfiprintf_r+0x2e>
 8005ce0:	230c      	movs	r3, #12
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	e0d0      	b.n	8005e8c <_svfiprintf_r+0x1d0>
 8005cea:	2340      	movs	r3, #64	; 0x40
 8005cec:	616b      	str	r3, [r5, #20]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf2:	2320      	movs	r3, #32
 8005cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cfc:	2330      	movs	r3, #48	; 0x30
 8005cfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ea4 <_svfiprintf_r+0x1e8>
 8005d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d06:	f04f 0901 	mov.w	r9, #1
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	469a      	mov	sl, r3
 8005d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d12:	b10a      	cbz	r2, 8005d18 <_svfiprintf_r+0x5c>
 8005d14:	2a25      	cmp	r2, #37	; 0x25
 8005d16:	d1f9      	bne.n	8005d0c <_svfiprintf_r+0x50>
 8005d18:	ebba 0b04 	subs.w	fp, sl, r4
 8005d1c:	d00b      	beq.n	8005d36 <_svfiprintf_r+0x7a>
 8005d1e:	465b      	mov	r3, fp
 8005d20:	4622      	mov	r2, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	4638      	mov	r0, r7
 8005d26:	f7ff ff6f 	bl	8005c08 <__ssputs_r>
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f000 80a9 	beq.w	8005e82 <_svfiprintf_r+0x1c6>
 8005d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d32:	445a      	add	r2, fp
 8005d34:	9209      	str	r2, [sp, #36]	; 0x24
 8005d36:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80a1 	beq.w	8005e82 <_svfiprintf_r+0x1c6>
 8005d40:	2300      	movs	r3, #0
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d4a:	f10a 0a01 	add.w	sl, sl, #1
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	9307      	str	r3, [sp, #28]
 8005d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d56:	931a      	str	r3, [sp, #104]	; 0x68
 8005d58:	4654      	mov	r4, sl
 8005d5a:	2205      	movs	r2, #5
 8005d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d60:	4850      	ldr	r0, [pc, #320]	; (8005ea4 <_svfiprintf_r+0x1e8>)
 8005d62:	f7fa fa5d 	bl	8000220 <memchr>
 8005d66:	9a04      	ldr	r2, [sp, #16]
 8005d68:	b9d8      	cbnz	r0, 8005da2 <_svfiprintf_r+0xe6>
 8005d6a:	06d0      	lsls	r0, r2, #27
 8005d6c:	bf44      	itt	mi
 8005d6e:	2320      	movmi	r3, #32
 8005d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d74:	0711      	lsls	r1, r2, #28
 8005d76:	bf44      	itt	mi
 8005d78:	232b      	movmi	r3, #43	; 0x2b
 8005d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d82:	2b2a      	cmp	r3, #42	; 0x2a
 8005d84:	d015      	beq.n	8005db2 <_svfiprintf_r+0xf6>
 8005d86:	9a07      	ldr	r2, [sp, #28]
 8005d88:	4654      	mov	r4, sl
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f04f 0c0a 	mov.w	ip, #10
 8005d90:	4621      	mov	r1, r4
 8005d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d96:	3b30      	subs	r3, #48	; 0x30
 8005d98:	2b09      	cmp	r3, #9
 8005d9a:	d94d      	bls.n	8005e38 <_svfiprintf_r+0x17c>
 8005d9c:	b1b0      	cbz	r0, 8005dcc <_svfiprintf_r+0x110>
 8005d9e:	9207      	str	r2, [sp, #28]
 8005da0:	e014      	b.n	8005dcc <_svfiprintf_r+0x110>
 8005da2:	eba0 0308 	sub.w	r3, r0, r8
 8005da6:	fa09 f303 	lsl.w	r3, r9, r3
 8005daa:	4313      	orrs	r3, r2
 8005dac:	9304      	str	r3, [sp, #16]
 8005dae:	46a2      	mov	sl, r4
 8005db0:	e7d2      	b.n	8005d58 <_svfiprintf_r+0x9c>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	9103      	str	r1, [sp, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bfbb      	ittet	lt
 8005dbe:	425b      	neglt	r3, r3
 8005dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8005dc4:	9307      	strge	r3, [sp, #28]
 8005dc6:	9307      	strlt	r3, [sp, #28]
 8005dc8:	bfb8      	it	lt
 8005dca:	9204      	strlt	r2, [sp, #16]
 8005dcc:	7823      	ldrb	r3, [r4, #0]
 8005dce:	2b2e      	cmp	r3, #46	; 0x2e
 8005dd0:	d10c      	bne.n	8005dec <_svfiprintf_r+0x130>
 8005dd2:	7863      	ldrb	r3, [r4, #1]
 8005dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd6:	d134      	bne.n	8005e42 <_svfiprintf_r+0x186>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	9203      	str	r2, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfb8      	it	lt
 8005de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005de8:	3402      	adds	r4, #2
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005eb4 <_svfiprintf_r+0x1f8>
 8005df0:	7821      	ldrb	r1, [r4, #0]
 8005df2:	2203      	movs	r2, #3
 8005df4:	4650      	mov	r0, sl
 8005df6:	f7fa fa13 	bl	8000220 <memchr>
 8005dfa:	b138      	cbz	r0, 8005e0c <_svfiprintf_r+0x150>
 8005dfc:	9b04      	ldr	r3, [sp, #16]
 8005dfe:	eba0 000a 	sub.w	r0, r0, sl
 8005e02:	2240      	movs	r2, #64	; 0x40
 8005e04:	4082      	lsls	r2, r0
 8005e06:	4313      	orrs	r3, r2
 8005e08:	3401      	adds	r4, #1
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e10:	4825      	ldr	r0, [pc, #148]	; (8005ea8 <_svfiprintf_r+0x1ec>)
 8005e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e16:	2206      	movs	r2, #6
 8005e18:	f7fa fa02 	bl	8000220 <memchr>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d038      	beq.n	8005e92 <_svfiprintf_r+0x1d6>
 8005e20:	4b22      	ldr	r3, [pc, #136]	; (8005eac <_svfiprintf_r+0x1f0>)
 8005e22:	bb1b      	cbnz	r3, 8005e6c <_svfiprintf_r+0x1b0>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	3307      	adds	r3, #7
 8005e28:	f023 0307 	bic.w	r3, r3, #7
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	9303      	str	r3, [sp, #12]
 8005e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e32:	4433      	add	r3, r6
 8005e34:	9309      	str	r3, [sp, #36]	; 0x24
 8005e36:	e768      	b.n	8005d0a <_svfiprintf_r+0x4e>
 8005e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	2001      	movs	r0, #1
 8005e40:	e7a6      	b.n	8005d90 <_svfiprintf_r+0xd4>
 8005e42:	2300      	movs	r3, #0
 8005e44:	3401      	adds	r4, #1
 8005e46:	9305      	str	r3, [sp, #20]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f04f 0c0a 	mov.w	ip, #10
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e54:	3a30      	subs	r2, #48	; 0x30
 8005e56:	2a09      	cmp	r2, #9
 8005e58:	d903      	bls.n	8005e62 <_svfiprintf_r+0x1a6>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0c6      	beq.n	8005dec <_svfiprintf_r+0x130>
 8005e5e:	9105      	str	r1, [sp, #20]
 8005e60:	e7c4      	b.n	8005dec <_svfiprintf_r+0x130>
 8005e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e66:	4604      	mov	r4, r0
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e7f0      	b.n	8005e4e <_svfiprintf_r+0x192>
 8005e6c:	ab03      	add	r3, sp, #12
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	462a      	mov	r2, r5
 8005e72:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <_svfiprintf_r+0x1f4>)
 8005e74:	a904      	add	r1, sp, #16
 8005e76:	4638      	mov	r0, r7
 8005e78:	f3af 8000 	nop.w
 8005e7c:	1c42      	adds	r2, r0, #1
 8005e7e:	4606      	mov	r6, r0
 8005e80:	d1d6      	bne.n	8005e30 <_svfiprintf_r+0x174>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	065b      	lsls	r3, r3, #25
 8005e86:	f53f af2d 	bmi.w	8005ce4 <_svfiprintf_r+0x28>
 8005e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e8c:	b01d      	add	sp, #116	; 0x74
 8005e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e92:	ab03      	add	r3, sp, #12
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <_svfiprintf_r+0x1f4>)
 8005e9a:	a904      	add	r1, sp, #16
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f000 f879 	bl	8005f94 <_printf_i>
 8005ea2:	e7eb      	b.n	8005e7c <_svfiprintf_r+0x1c0>
 8005ea4:	0800649e 	.word	0x0800649e
 8005ea8:	080064a8 	.word	0x080064a8
 8005eac:	00000000 	.word	0x00000000
 8005eb0:	08005c09 	.word	0x08005c09
 8005eb4:	080064a4 	.word	0x080064a4

08005eb8 <_printf_common>:
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	4616      	mov	r6, r2
 8005ebe:	4699      	mov	r9, r3
 8005ec0:	688a      	ldr	r2, [r1, #8]
 8005ec2:	690b      	ldr	r3, [r1, #16]
 8005ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	bfb8      	it	lt
 8005ecc:	4613      	movlt	r3, r2
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	b10a      	cbz	r2, 8005ede <_printf_common+0x26>
 8005eda:	3301      	adds	r3, #1
 8005edc:	6033      	str	r3, [r6, #0]
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	0699      	lsls	r1, r3, #26
 8005ee2:	bf42      	ittt	mi
 8005ee4:	6833      	ldrmi	r3, [r6, #0]
 8005ee6:	3302      	addmi	r3, #2
 8005ee8:	6033      	strmi	r3, [r6, #0]
 8005eea:	6825      	ldr	r5, [r4, #0]
 8005eec:	f015 0506 	ands.w	r5, r5, #6
 8005ef0:	d106      	bne.n	8005f00 <_printf_common+0x48>
 8005ef2:	f104 0a19 	add.w	sl, r4, #25
 8005ef6:	68e3      	ldr	r3, [r4, #12]
 8005ef8:	6832      	ldr	r2, [r6, #0]
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	dc26      	bgt.n	8005f4e <_printf_common+0x96>
 8005f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f04:	1e13      	subs	r3, r2, #0
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	bf18      	it	ne
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	0692      	lsls	r2, r2, #26
 8005f0e:	d42b      	bmi.n	8005f68 <_printf_common+0xb0>
 8005f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f14:	4649      	mov	r1, r9
 8005f16:	4638      	mov	r0, r7
 8005f18:	47c0      	blx	r8
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d01e      	beq.n	8005f5c <_printf_common+0xa4>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	f003 0306 	and.w	r3, r3, #6
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	bf02      	ittt	eq
 8005f2a:	68e5      	ldreq	r5, [r4, #12]
 8005f2c:	6833      	ldreq	r3, [r6, #0]
 8005f2e:	1aed      	subeq	r5, r5, r3
 8005f30:	68a3      	ldr	r3, [r4, #8]
 8005f32:	bf0c      	ite	eq
 8005f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f38:	2500      	movne	r5, #0
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	bfc4      	itt	gt
 8005f3e:	1a9b      	subgt	r3, r3, r2
 8005f40:	18ed      	addgt	r5, r5, r3
 8005f42:	2600      	movs	r6, #0
 8005f44:	341a      	adds	r4, #26
 8005f46:	42b5      	cmp	r5, r6
 8005f48:	d11a      	bne.n	8005f80 <_printf_common+0xc8>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e008      	b.n	8005f60 <_printf_common+0xa8>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4652      	mov	r2, sl
 8005f52:	4649      	mov	r1, r9
 8005f54:	4638      	mov	r0, r7
 8005f56:	47c0      	blx	r8
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d103      	bne.n	8005f64 <_printf_common+0xac>
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f64:	3501      	adds	r5, #1
 8005f66:	e7c6      	b.n	8005ef6 <_printf_common+0x3e>
 8005f68:	18e1      	adds	r1, r4, r3
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	2030      	movs	r0, #48	; 0x30
 8005f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f72:	4422      	add	r2, r4
 8005f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f7c:	3302      	adds	r3, #2
 8005f7e:	e7c7      	b.n	8005f10 <_printf_common+0x58>
 8005f80:	2301      	movs	r3, #1
 8005f82:	4622      	mov	r2, r4
 8005f84:	4649      	mov	r1, r9
 8005f86:	4638      	mov	r0, r7
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d0e6      	beq.n	8005f5c <_printf_common+0xa4>
 8005f8e:	3601      	adds	r6, #1
 8005f90:	e7d9      	b.n	8005f46 <_printf_common+0x8e>
	...

08005f94 <_printf_i>:
 8005f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	7e0f      	ldrb	r7, [r1, #24]
 8005f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f9c:	2f78      	cmp	r7, #120	; 0x78
 8005f9e:	4691      	mov	r9, r2
 8005fa0:	4680      	mov	r8, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	469a      	mov	sl, r3
 8005fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005faa:	d807      	bhi.n	8005fbc <_printf_i+0x28>
 8005fac:	2f62      	cmp	r7, #98	; 0x62
 8005fae:	d80a      	bhi.n	8005fc6 <_printf_i+0x32>
 8005fb0:	2f00      	cmp	r7, #0
 8005fb2:	f000 80d4 	beq.w	800615e <_printf_i+0x1ca>
 8005fb6:	2f58      	cmp	r7, #88	; 0x58
 8005fb8:	f000 80c0 	beq.w	800613c <_printf_i+0x1a8>
 8005fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fc4:	e03a      	b.n	800603c <_printf_i+0xa8>
 8005fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fca:	2b15      	cmp	r3, #21
 8005fcc:	d8f6      	bhi.n	8005fbc <_printf_i+0x28>
 8005fce:	a101      	add	r1, pc, #4	; (adr r1, 8005fd4 <_printf_i+0x40>)
 8005fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fd4:	0800602d 	.word	0x0800602d
 8005fd8:	08006041 	.word	0x08006041
 8005fdc:	08005fbd 	.word	0x08005fbd
 8005fe0:	08005fbd 	.word	0x08005fbd
 8005fe4:	08005fbd 	.word	0x08005fbd
 8005fe8:	08005fbd 	.word	0x08005fbd
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08005fbd 	.word	0x08005fbd
 8005ff4:	08005fbd 	.word	0x08005fbd
 8005ff8:	08005fbd 	.word	0x08005fbd
 8005ffc:	08005fbd 	.word	0x08005fbd
 8006000:	08006145 	.word	0x08006145
 8006004:	0800606d 	.word	0x0800606d
 8006008:	080060ff 	.word	0x080060ff
 800600c:	08005fbd 	.word	0x08005fbd
 8006010:	08005fbd 	.word	0x08005fbd
 8006014:	08006167 	.word	0x08006167
 8006018:	08005fbd 	.word	0x08005fbd
 800601c:	0800606d 	.word	0x0800606d
 8006020:	08005fbd 	.word	0x08005fbd
 8006024:	08005fbd 	.word	0x08005fbd
 8006028:	08006107 	.word	0x08006107
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	1d1a      	adds	r2, r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	602a      	str	r2, [r5, #0]
 8006034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800603c:	2301      	movs	r3, #1
 800603e:	e09f      	b.n	8006180 <_printf_i+0x1ec>
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	0607      	lsls	r7, r0, #24
 8006046:	f103 0104 	add.w	r1, r3, #4
 800604a:	6029      	str	r1, [r5, #0]
 800604c:	d501      	bpl.n	8006052 <_printf_i+0xbe>
 800604e:	681e      	ldr	r6, [r3, #0]
 8006050:	e003      	b.n	800605a <_printf_i+0xc6>
 8006052:	0646      	lsls	r6, r0, #25
 8006054:	d5fb      	bpl.n	800604e <_printf_i+0xba>
 8006056:	f9b3 6000 	ldrsh.w	r6, [r3]
 800605a:	2e00      	cmp	r6, #0
 800605c:	da03      	bge.n	8006066 <_printf_i+0xd2>
 800605e:	232d      	movs	r3, #45	; 0x2d
 8006060:	4276      	negs	r6, r6
 8006062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006066:	485a      	ldr	r0, [pc, #360]	; (80061d0 <_printf_i+0x23c>)
 8006068:	230a      	movs	r3, #10
 800606a:	e012      	b.n	8006092 <_printf_i+0xfe>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	6820      	ldr	r0, [r4, #0]
 8006070:	1d19      	adds	r1, r3, #4
 8006072:	6029      	str	r1, [r5, #0]
 8006074:	0605      	lsls	r5, r0, #24
 8006076:	d501      	bpl.n	800607c <_printf_i+0xe8>
 8006078:	681e      	ldr	r6, [r3, #0]
 800607a:	e002      	b.n	8006082 <_printf_i+0xee>
 800607c:	0641      	lsls	r1, r0, #25
 800607e:	d5fb      	bpl.n	8006078 <_printf_i+0xe4>
 8006080:	881e      	ldrh	r6, [r3, #0]
 8006082:	4853      	ldr	r0, [pc, #332]	; (80061d0 <_printf_i+0x23c>)
 8006084:	2f6f      	cmp	r7, #111	; 0x6f
 8006086:	bf0c      	ite	eq
 8006088:	2308      	moveq	r3, #8
 800608a:	230a      	movne	r3, #10
 800608c:	2100      	movs	r1, #0
 800608e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006092:	6865      	ldr	r5, [r4, #4]
 8006094:	60a5      	str	r5, [r4, #8]
 8006096:	2d00      	cmp	r5, #0
 8006098:	bfa2      	ittt	ge
 800609a:	6821      	ldrge	r1, [r4, #0]
 800609c:	f021 0104 	bicge.w	r1, r1, #4
 80060a0:	6021      	strge	r1, [r4, #0]
 80060a2:	b90e      	cbnz	r6, 80060a8 <_printf_i+0x114>
 80060a4:	2d00      	cmp	r5, #0
 80060a6:	d04b      	beq.n	8006140 <_printf_i+0x1ac>
 80060a8:	4615      	mov	r5, r2
 80060aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80060ae:	fb03 6711 	mls	r7, r3, r1, r6
 80060b2:	5dc7      	ldrb	r7, [r0, r7]
 80060b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060b8:	4637      	mov	r7, r6
 80060ba:	42bb      	cmp	r3, r7
 80060bc:	460e      	mov	r6, r1
 80060be:	d9f4      	bls.n	80060aa <_printf_i+0x116>
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d10b      	bne.n	80060dc <_printf_i+0x148>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	07de      	lsls	r6, r3, #31
 80060c8:	d508      	bpl.n	80060dc <_printf_i+0x148>
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	6861      	ldr	r1, [r4, #4]
 80060ce:	4299      	cmp	r1, r3
 80060d0:	bfde      	ittt	le
 80060d2:	2330      	movle	r3, #48	; 0x30
 80060d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060dc:	1b52      	subs	r2, r2, r5
 80060de:	6122      	str	r2, [r4, #16]
 80060e0:	f8cd a000 	str.w	sl, [sp]
 80060e4:	464b      	mov	r3, r9
 80060e6:	aa03      	add	r2, sp, #12
 80060e8:	4621      	mov	r1, r4
 80060ea:	4640      	mov	r0, r8
 80060ec:	f7ff fee4 	bl	8005eb8 <_printf_common>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d14a      	bne.n	800618a <_printf_i+0x1f6>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	b004      	add	sp, #16
 80060fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	f043 0320 	orr.w	r3, r3, #32
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	4833      	ldr	r0, [pc, #204]	; (80061d4 <_printf_i+0x240>)
 8006108:	2778      	movs	r7, #120	; 0x78
 800610a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	6829      	ldr	r1, [r5, #0]
 8006112:	061f      	lsls	r7, r3, #24
 8006114:	f851 6b04 	ldr.w	r6, [r1], #4
 8006118:	d402      	bmi.n	8006120 <_printf_i+0x18c>
 800611a:	065f      	lsls	r7, r3, #25
 800611c:	bf48      	it	mi
 800611e:	b2b6      	uxthmi	r6, r6
 8006120:	07df      	lsls	r7, r3, #31
 8006122:	bf48      	it	mi
 8006124:	f043 0320 	orrmi.w	r3, r3, #32
 8006128:	6029      	str	r1, [r5, #0]
 800612a:	bf48      	it	mi
 800612c:	6023      	strmi	r3, [r4, #0]
 800612e:	b91e      	cbnz	r6, 8006138 <_printf_i+0x1a4>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	f023 0320 	bic.w	r3, r3, #32
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	2310      	movs	r3, #16
 800613a:	e7a7      	b.n	800608c <_printf_i+0xf8>
 800613c:	4824      	ldr	r0, [pc, #144]	; (80061d0 <_printf_i+0x23c>)
 800613e:	e7e4      	b.n	800610a <_printf_i+0x176>
 8006140:	4615      	mov	r5, r2
 8006142:	e7bd      	b.n	80060c0 <_printf_i+0x12c>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	6826      	ldr	r6, [r4, #0]
 8006148:	6961      	ldr	r1, [r4, #20]
 800614a:	1d18      	adds	r0, r3, #4
 800614c:	6028      	str	r0, [r5, #0]
 800614e:	0635      	lsls	r5, r6, #24
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	d501      	bpl.n	8006158 <_printf_i+0x1c4>
 8006154:	6019      	str	r1, [r3, #0]
 8006156:	e002      	b.n	800615e <_printf_i+0x1ca>
 8006158:	0670      	lsls	r0, r6, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0x1c0>
 800615c:	8019      	strh	r1, [r3, #0]
 800615e:	2300      	movs	r3, #0
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	4615      	mov	r5, r2
 8006164:	e7bc      	b.n	80060e0 <_printf_i+0x14c>
 8006166:	682b      	ldr	r3, [r5, #0]
 8006168:	1d1a      	adds	r2, r3, #4
 800616a:	602a      	str	r2, [r5, #0]
 800616c:	681d      	ldr	r5, [r3, #0]
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	2100      	movs	r1, #0
 8006172:	4628      	mov	r0, r5
 8006174:	f7fa f854 	bl	8000220 <memchr>
 8006178:	b108      	cbz	r0, 800617e <_printf_i+0x1ea>
 800617a:	1b40      	subs	r0, r0, r5
 800617c:	6060      	str	r0, [r4, #4]
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	6123      	str	r3, [r4, #16]
 8006182:	2300      	movs	r3, #0
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	e7aa      	b.n	80060e0 <_printf_i+0x14c>
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	462a      	mov	r2, r5
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	47d0      	blx	sl
 8006194:	3001      	adds	r0, #1
 8006196:	d0ad      	beq.n	80060f4 <_printf_i+0x160>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	079b      	lsls	r3, r3, #30
 800619c:	d413      	bmi.n	80061c6 <_printf_i+0x232>
 800619e:	68e0      	ldr	r0, [r4, #12]
 80061a0:	9b03      	ldr	r3, [sp, #12]
 80061a2:	4298      	cmp	r0, r3
 80061a4:	bfb8      	it	lt
 80061a6:	4618      	movlt	r0, r3
 80061a8:	e7a6      	b.n	80060f8 <_printf_i+0x164>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4632      	mov	r2, r6
 80061ae:	4649      	mov	r1, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	47d0      	blx	sl
 80061b4:	3001      	adds	r0, #1
 80061b6:	d09d      	beq.n	80060f4 <_printf_i+0x160>
 80061b8:	3501      	adds	r5, #1
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	9903      	ldr	r1, [sp, #12]
 80061be:	1a5b      	subs	r3, r3, r1
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	dcf2      	bgt.n	80061aa <_printf_i+0x216>
 80061c4:	e7eb      	b.n	800619e <_printf_i+0x20a>
 80061c6:	2500      	movs	r5, #0
 80061c8:	f104 0619 	add.w	r6, r4, #25
 80061cc:	e7f5      	b.n	80061ba <_printf_i+0x226>
 80061ce:	bf00      	nop
 80061d0:	080064af 	.word	0x080064af
 80061d4:	080064c0 	.word	0x080064c0

080061d8 <memmove>:
 80061d8:	4288      	cmp	r0, r1
 80061da:	b510      	push	{r4, lr}
 80061dc:	eb01 0402 	add.w	r4, r1, r2
 80061e0:	d902      	bls.n	80061e8 <memmove+0x10>
 80061e2:	4284      	cmp	r4, r0
 80061e4:	4623      	mov	r3, r4
 80061e6:	d807      	bhi.n	80061f8 <memmove+0x20>
 80061e8:	1e43      	subs	r3, r0, #1
 80061ea:	42a1      	cmp	r1, r4
 80061ec:	d008      	beq.n	8006200 <memmove+0x28>
 80061ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061f6:	e7f8      	b.n	80061ea <memmove+0x12>
 80061f8:	4402      	add	r2, r0
 80061fa:	4601      	mov	r1, r0
 80061fc:	428a      	cmp	r2, r1
 80061fe:	d100      	bne.n	8006202 <memmove+0x2a>
 8006200:	bd10      	pop	{r4, pc}
 8006202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800620a:	e7f7      	b.n	80061fc <memmove+0x24>

0800620c <_realloc_r>:
 800620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	4680      	mov	r8, r0
 8006212:	4614      	mov	r4, r2
 8006214:	460e      	mov	r6, r1
 8006216:	b921      	cbnz	r1, 8006222 <_realloc_r+0x16>
 8006218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800621c:	4611      	mov	r1, r2
 800621e:	f7ff bba9 	b.w	8005974 <_malloc_r>
 8006222:	b92a      	cbnz	r2, 8006230 <_realloc_r+0x24>
 8006224:	f7ff fca4 	bl	8005b70 <_free_r>
 8006228:	4625      	mov	r5, r4
 800622a:	4628      	mov	r0, r5
 800622c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006230:	f000 f81b 	bl	800626a <_malloc_usable_size_r>
 8006234:	4284      	cmp	r4, r0
 8006236:	4607      	mov	r7, r0
 8006238:	d802      	bhi.n	8006240 <_realloc_r+0x34>
 800623a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800623e:	d812      	bhi.n	8006266 <_realloc_r+0x5a>
 8006240:	4621      	mov	r1, r4
 8006242:	4640      	mov	r0, r8
 8006244:	f7ff fb96 	bl	8005974 <_malloc_r>
 8006248:	4605      	mov	r5, r0
 800624a:	2800      	cmp	r0, #0
 800624c:	d0ed      	beq.n	800622a <_realloc_r+0x1e>
 800624e:	42bc      	cmp	r4, r7
 8006250:	4622      	mov	r2, r4
 8006252:	4631      	mov	r1, r6
 8006254:	bf28      	it	cs
 8006256:	463a      	movcs	r2, r7
 8006258:	f7ff fc7c 	bl	8005b54 <memcpy>
 800625c:	4631      	mov	r1, r6
 800625e:	4640      	mov	r0, r8
 8006260:	f7ff fc86 	bl	8005b70 <_free_r>
 8006264:	e7e1      	b.n	800622a <_realloc_r+0x1e>
 8006266:	4635      	mov	r5, r6
 8006268:	e7df      	b.n	800622a <_realloc_r+0x1e>

0800626a <_malloc_usable_size_r>:
 800626a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626e:	1f18      	subs	r0, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	bfbc      	itt	lt
 8006274:	580b      	ldrlt	r3, [r1, r0]
 8006276:	18c0      	addlt	r0, r0, r3
 8006278:	4770      	bx	lr
	...

0800627c <_init>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	bf00      	nop
 8006280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006282:	bc08      	pop	{r3}
 8006284:	469e      	mov	lr, r3
 8006286:	4770      	bx	lr

08006288 <_fini>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	bf00      	nop
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr
